{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n\n    <px-vis-annotations\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        margin=\"[[margin]]\"\n        domain-changed=\"[[domainChanged]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        annotation-data=\"[[data]]\">\n    </px-vis-annotations>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n`--px-vis-annotations-icon-color` | Color of the annotation icon\n`--px-vis-annotations-icon-fill` | Color of the fill of annotation icon\n`--px-vis-annotations-icon-hover-fill` | Color of the fill of annotation icon when hovered\n`--px-vis-annotations-icon-pressed-fill` | Color of the fill of annotation icon when pressed",
      "summary": "",
      "path": "px-vis-annotations.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "annotationData",
          "type": "Array",
          "description": "The annotation data: x and y values + the series which scale should be used.\nData is an arbitrary object you want to store for use when showing the\nannotation\n\n[{\n x: 1325897523,\n y: 15.7,\n series: y0,\n data: {\n\n },\n...\n}\n]",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3299,
              "column": 4
            },
            "end": {
              "line": 3304,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.annotationData"
        },
        {
          "name": "_iconWidth",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 142,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12"
        },
        {
          "name": "_iconHeight",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12"
        },
        {
          "name": "forceRecalc",
          "type": "boolean",
          "description": "when switched forces the annotations to recalculate their position",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hide",
          "type": "boolean",
          "description": "Whether the annotations should be hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getTransform",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_mouseOver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_mouseLeave",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 200,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_mouseClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 4
            },
            "end": {
              "line": 204,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_mouseEnter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 4
            },
            "end": {
              "line": 208,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_mouseOut",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_requestAnnotation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            },
            {
              "name": "eventName"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 70,
          "column": 10
        },
        "end": {
          "line": 219,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "annotation-data",
          "description": "The annotation data: x and y values + the series which scale should be used.\nData is an arbitrary object you want to store for use when showing the\nannotation\n\n[{\n x: 1325897523,\n y: 15.7,\n series: y0,\n data: {\n\n },\n...\n}\n]",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3299,
              "column": 4
            },
            "end": {
              "line": 3304,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.annotationData"
        },
        {
          "name": "force-recalc",
          "description": "when switched forces the annotations to recalculate their position",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hide",
          "description": "Whether the annotations should be hidden",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-annotation-click",
          "description": "px-vis-annotation-click",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-annotation-creation",
          "description": "px-vis-annotation-creation",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-annotation-enter",
          "description": "px-vis-annotation-enter",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-annotation-leave",
          "description": "px-vis-annotation-leave",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-annotation-out",
          "description": "px-vis-annotation-out",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-annotation-over",
          "description": "px-vis-annotation-over",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-annotations"
    },
    {
      "description": "Unlike most other drawing elements that can use chartData directly, area requires that data first be passed through d3.stack: https://github.com/d3/d3-shape/blob/master/README.md#stack\n\n### Usage\n\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data={{chartData}}\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n\n    <px-vis-area-svg\n      svg=\"[[svg]]\"\n      complete-series-config=\"[[seriesConfig]]\"\n      chart-data=\"[[stackedChartData]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-area-svg>",
      "summary": "",
      "path": "px-vis-area-svg.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "areaPath",
          "type": "Object",
          "description": "A holder object for the series object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "areaBuilder",
          "type": "Object",
          "description": "A holder object for the series builder",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "areaGroup",
          "type": "Object",
          "description": "A holder object for the series group",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 104,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time to use for drawing",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "_xKey",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_keySeriesDict",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the line element.\nCalled from an observer watching for data and the necessary d3 objects",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawElementDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_defineArea",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "Helper to call addClipPath with the element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 234,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computekeySeriesDict",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 10
        },
        "end": {
          "line": 254,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "area-path",
          "description": "A holder object for the series object",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "area-builder",
          "description": "A holder object for the series builder",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "area-group",
          "description": "A holder object for the series group",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 104,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for drawing",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-area-svg-rendering-ended",
          "description": "px-vis-area-svg-rendering-ended",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-area-svg"
    },
    {
      "description": "Unlike most other drawing elements that can use chartData directly, bar requires that data first be passed through d3.stack: https://github.com/d3/d3-shape/blob/master/README.md#stack\n\n### Usage\n\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n      x-axis-type=\"scaleBand\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data={{chartData}}\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n\n    <px-vis-bar-svg\n      svg=\"[[svg]]\"\n      complete-series-config=\"[[seriesConfig]]\"\n      chart-data=\"[[stackedChartData]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-bar-svg>",
      "summary": "",
      "path": "px-vis-bar-svg.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "barRects",
          "type": "Object",
          "description": "A holder object for the series object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 89,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "barBuilder",
          "type": "Object",
          "description": "A holder object for the series builder",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "barGroup",
          "type": "Object",
          "description": "A holder object for the series group",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time to use for drawing",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "_iKey",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_keySeriesDict",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_funcsWereSet",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "type",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"column\""
        },
        {
          "name": "_returnX",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_returnY",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_returnWidth",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_returnHeight",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the line element.\nCalled from an observer watching for data and the necessary d3 objects",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawElementDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setFuncs",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "Helper to call addClipPath with the element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 4
            },
            "end": {
              "line": 271,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computekeySeriesDict",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 10
        },
        "end": {
          "line": 291,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "bar-rects",
          "description": "A holder object for the series object",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 89,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "bar-builder",
          "description": "A holder object for the series builder",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "bar-group",
          "description": "A holder object for the series group",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for drawing",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "type",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "series-key",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-bar-svg-rendering-ended",
          "description": "px-vis-bar-svg-rendering-ended",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-bar-svg"
    },
    {
      "description": "### Usage\n\n   <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data={{chartData}}\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>",
      "summary": "",
      "path": "px-vis-svg.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "Holder for the d3 instantiated svg container.\nMust be set in ready and passed to all components so they know where to draw.\n\nFUTURE: when Polymer supports SVG, this only needs to be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "attached",
          "description": "When attached, re-fire set properties for precipitation pattern,\nas well as the svg element that's inside px-svg.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 8
            },
            "end": {
              "line": 124,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setSVG",
          "description": "Configures the SVG and d3 drawing element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 151,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 52,
          "column": 12
        },
        "end": {
          "line": 152,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "Holder for the d3 instantiated svg container.\nMust be set in ready and passed to all components so they know where to draw.\n\nFUTURE: when Polymer supports SVG, this only needs to be set on the SVG element.",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-svg-element-updated",
          "description": "px-vis-svg-element-updated",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-svg-updated",
          "description": "px-vis-svg-updated",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-svg"
    },
    {
      "description": "### Usage\n\n    <px-vis-canvas\n        canvas-context=\"{{canvasContext}}\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        offset=\"[[offset]]\">\n    </px-vis-canvas>",
      "summary": "",
      "path": "px-vis-canvas.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "_canvas",
          "type": "Object",
          "description": "The canvas element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "attached",
          "description": "when attached, re-fire set properties for precipitation pattern, as well as the svg element that's inside px-svg.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 93,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setCanvas",
          "description": "Configures the canvas and context",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_reCenterCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createCanvaContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 10
        },
        "end": {
          "line": 148,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-canvas-context-updated",
          "description": "px-vis-canvas-context-updated",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-canvas"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg-canvas\n        svg=\"{{svg}}\"\n        canvas-context=\"{{canvasContext}}\"\n        svg-lower=\"{{svgLower}}\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\">\n    </px-vis-svg-canvas>",
      "summary": "",
      "path": "px-vis-svg-canvas.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "pxSvgElemLower",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 280,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        }
      ],
      "methods": [
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_assignCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_returnKeys",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 8
            },
            "end": {
              "line": 122,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnProp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "prop"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 87,
          "column": 12
        },
        "end": {
          "line": 130,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem-lower",
          "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 280,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-lower-changed",
          "description": "Fired when the `pxSvgElemLower` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svgLower"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "0",
          "range": {
            "file": "px-vis-svg-canvas.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 28
            }
          }
        },
        {
          "description": "",
          "name": "1",
          "range": {
            "file": "px-vis-svg-canvas.html",
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 50,
              "column": 28
            }
          }
        },
        {
          "description": "",
          "name": "2",
          "range": {
            "file": "px-vis-svg-canvas.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 28
            }
          }
        },
        {
          "description": "",
          "name": "3",
          "range": {
            "file": "px-vis-svg-canvas.html",
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 28
            }
          }
        },
        {
          "description": "",
          "name": "4",
          "range": {
            "file": "px-vis-svg-canvas.html",
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 28
            }
          }
        }
      ],
      "tagname": "px-vis-svg-canvas"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data={{chartData}}\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n    <px-vis-line-svg\n      svg=\"[[svg]]\"\n      series-id=\"mySeries\"\n      complete-series-config=\"[[seriesConfig]]\"\n      chart-data=\"[[chartData]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-line-svg>",
      "summary": "",
      "path": "px-vis-line-svg.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "lineRadiusLimit",
          "type": "number",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "type": "Object",
          "description": "A holder object for the line generator",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "showGaps",
          "type": "boolean",
          "description": "A boolean spcifying if the line should show gaps on undefined data.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1390,
              "column": 4
            },
            "end": {
              "line": 1393,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineGaps"
        },
        {
          "name": "timeDomain",
          "type": "Object",
          "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3199,
              "column": 4
            },
            "end": {
              "line": 3204,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.timeDomain"
        },
        {
          "name": "parallelCoordinates",
          "type": "boolean",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1415,
              "column": 4
            },
            "end": {
              "line": 1418,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "radialLine",
          "type": "boolean",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1423,
              "column": 4
            },
            "end": {
              "line": 1426,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradientLine",
          "type": "boolean",
          "description": "A boolean spceifying if a opacity gradient should get applied to the line",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1431,
              "column": 4
            },
            "end": {
              "line": 1434,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradientRange",
          "type": "Array",
          "description": "Calculated range values for the gradient scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1439,
              "column": 4
            },
            "end": {
              "line": 1442,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_colorArr",
          "type": "Array",
          "description": "Gets and saves the rgb so we can make an rgba to apply to the line",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1447,
              "column": 4
            },
            "end": {
              "line": 1450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "multiPath",
          "type": "boolean",
          "description": "A boolean spcifying if multiple paths get drawn by the line",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1456,
              "column": 4
            },
            "end": {
              "line": 1459,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_currentDrawingOptions",
          "type": "Object",
          "description": "Object used to store various info about current rendering state",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1463,
              "column": 4
            },
            "end": {
              "line": 1471,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"lastPointRenderedIndex\":null,\"currentBatchStartIndex\":0}",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "serieToRedrawOnTop",
          "type": "Array",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2362,
              "column": 4
            },
            "end": {
              "line": 2365,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "linePath",
          "type": "Object",
          "description": "A holder object for the series object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lineBuilder",
          "type": "Object",
          "description": "A holder object for the series builder.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 6
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lineGroup",
          "type": "Object",
          "description": "A holder object for the series group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "mutedOpacity",
          "type": "number",
          "description": "The opacity value of the fill to be used when muting a series (stroke is not drawn on mute).\nThis property will be read from the completeSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time to use for drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "disablePointerEvents",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_defineRadialLine",
          "description": "Defines a multi-scale d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1281,
              "column": 2
            },
            "end": {
              "line": 1368,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            },
            {
              "name": "multiLine"
            },
            {
              "name": "counterClockwise"
            },
            {
              "name": "useDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "_resetRenderingContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1474,
              "column": 2
            },
            "end": {
              "line": 1477,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_computeColorArr",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1479,
              "column": 2
            },
            "end": {
              "line": 1510,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "categories"
            },
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_opacityLine",
          "description": "Returns the correct opacity to use for all lines.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1516,
              "column": 2
            },
            "end": {
              "line": 1521,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_computeGradientRange",
          "description": "Computes the data range.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1527,
              "column": 2
            },
            "end": {
              "line": 1543,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData"
            },
            {
              "name": "timeDomain"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_removeGaps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1545,
              "column": 2
            },
            "end": {
              "line": 1547,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_defineSingleLine",
          "description": "Defines the d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1553,
              "column": 2
            },
            "end": {
              "line": 1613,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_defineMultiLine",
          "description": "Defines a multi-scale d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1619,
              "column": 2
            },
            "end": {
              "line": 1653,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_drawSVGOnTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1669,
              "column": 2
            },
            "end": {
              "line": 1674,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "idToRedraw"
            },
            {
              "name": "selfId"
            },
            {
              "name": "d3Selection"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.serieToRedrawOnTopSVG"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the line element.\nCalled from an observer watching for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawElementDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 4
            },
            "end": {
              "line": 271,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "Helper to call addClipPath with the element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "isIdInMuted",
          "description": "Checks mutedSeries to see if this ID is in there.\nCalled from an observer watching mutedSeries.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 4
            },
            "end": {
              "line": 307,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_colorLine",
          "description": "Adds full color to the SVG line.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_svgLineOpacity",
          "description": "Returns the opacity for the SVG line.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_drawOnTop",
          "description": "Redraw this series on top if needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "serieToRedrawOnTop"
            }
          ]
        },
        {
          "name": "_disablePointerEvents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 362,
              "column": 4
            },
            "end": {
              "line": 370,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 53,
          "column": 10
        },
        "end": {
          "line": 371,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "line-radius-limit",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "description": "A holder object for the line generator",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "show-gaps",
          "description": "A boolean spcifying if the line should show gaps on undefined data.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1390,
              "column": 4
            },
            "end": {
              "line": 1393,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineGaps"
        },
        {
          "name": "time-domain",
          "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3199,
              "column": 4
            },
            "end": {
              "line": 3204,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.timeDomain"
        },
        {
          "name": "parallel-coordinates",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1415,
              "column": 4
            },
            "end": {
              "line": 1418,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "radial-line",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1423,
              "column": 4
            },
            "end": {
              "line": 1426,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradient-line",
          "description": "A boolean spceifying if a opacity gradient should get applied to the line",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1431,
              "column": 4
            },
            "end": {
              "line": 1434,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradient-range",
          "description": "Calculated range values for the gradient scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1439,
              "column": 4
            },
            "end": {
              "line": 1442,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "multi-path",
          "description": "A boolean spcifying if multiple paths get drawn by the line",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1456,
              "column": 4
            },
            "end": {
              "line": 1459,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "serie-to-redraw-on-top",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "line-path",
          "description": "A holder object for the series object.",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "line-builder",
          "description": "A holder object for the series builder.",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 6
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "line-group",
          "description": "A holder object for the series group.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "stroke-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "muted-opacity",
          "description": "The opacity value of the fill to be used when muting a series (stroke is not drawn on mute).\nThis property will be read from the completeSeriesConfig.",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for drawing.",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "disable-pointer-events",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-line-svg-rendering-ended",
          "description": "px-vis-line-svg-rendering-ended",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-line-svg"
    },
    {
      "description": "### Minimal instantiation\n\n    <px-vis-svg\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        x-axis-type=\"time\"\n        y-axis-type=\"linear\"\n        complete-series-config=\"[[seriesConfig]]\"\n        data-extents=\"[[dataExtents]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        chart-data={{chartData}}\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-axis\n        svg=\"[[svg]]\"\n        axis=\"[[y]]\"\n        margin=\"[[margin]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        title=\"myTitle\"\n        orientation=\"left\"\n        label-position=\"center\"\n        complete-series-config=\"[[seriesConfig]]\"\n        muted-series=[[mutedSeries]]\n        domain-changed=\"[[domainChanged]]\">\n    </px-vis-axis>\n\n### d3 reference\nhttps://github.com/mbostock/d3/wiki/SVG-Axes\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-font-family` | The font family for all labels and text\n  `--px-vis-axis-color` | The color for the axis lines, axis ticks, and axis tick labels\n  `--px-vis-axis-title-color` | The color for the axis title\n  `--px-vis-axis-inline-title-color` | The color for the axis title\n  `--px-vis-axis-inline-type-color` | The color for the axis lines, axis ticks, and axis tick labels when using 'inline' labelPosition\n  `--px-vis-axis-inline-box-color` | The color for the tick boxes when using 'inline' labelPosition",
      "summary": "",
      "path": "px-vis-axis.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "Translation offset to apply to the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 10
            },
            "end": {
              "line": 218,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]"
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\"",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "type": "Object",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "labelTypeSize",
          "type": "number",
          "description": "Defines the base label type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The displayed title for the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelPosition",
          "type": "string",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelRotation",
          "type": "number",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelTranslation",
          "type": "Array",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "type": "Array",
          "description": "Array of the series which belong to this axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translateAmt",
          "type": "Array",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleLocation",
          "type": "Object",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleTypeSize",
          "type": "number",
          "description": "Defines the Title type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "Defines the axis stroke width",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outerTickSize",
          "type": "number",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tickValues",
          "type": "Array",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "type": "(Object|Number)",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axisColor",
          "type": "string",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawnTickValues",
          "type": "Array",
          "description": "Returned tick values from the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "truncationLength",
          "type": "number",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2362,
              "column": 4
            },
            "end": {
              "line": 2365,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_axis",
          "type": "Object",
          "description": "Holder for the instantiated d3 axis",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_axisGroup",
          "type": "Object",
          "description": "Holder for the axis drawing",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "axisId",
          "type": "string",
          "description": "A unique ID for the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "displayedTitle",
          "type": "string",
          "description": "The truncated title",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "appendUnitInTitle",
          "type": "boolean",
          "description": "Whether to append a unit (if existing in config) in the title",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "preventSeriesBar",
          "type": "boolean",
          "description": "Boolean which specifies not to draw the series bars",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 10
            },
            "end": {
              "line": 145,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "titleDrawn",
          "type": "boolean",
          "description": "A boolean specifying if the axis title has been drawn",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 10
            },
            "end": {
              "line": 153,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "The series ID this axis refers to, used to look in the config",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_currentUnits",
          "type": "string",
          "description": "The text representing the units of the axis",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 10
            },
            "end": {
              "line": 167,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "titleTruncation",
          "type": "boolean",
          "description": "A boolean specifying if the axis title should truncate when too long",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 10
            },
            "end": {
              "line": 175,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_titleTruncated",
          "type": "boolean",
          "description": "Whether the title has been truncated",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 182,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "tickFormat",
          "type": "(String|Function)",
          "description": "A string that specifies the format of the ticks\n\nhttps://github.com/d3/d3-format\n\nhttps://github.com/d3/d3-time-format",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 10
            },
            "end": {
              "line": 195,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "axisType",
          "type": "string",
          "description": "A string specifying the type of axis. Used only for tick formating. Valid entries are:\n- `time`\n- `linear`\n- `ordinal`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 10
            },
            "end": {
              "line": 205,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\""
        },
        {
          "name": "rotation",
          "type": "number",
          "description": "Rotation to apply to the axis, in degrees",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 211,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "disableTicks",
          "type": "boolean",
          "description": "A boolean specifying whether the axis should have ticks or not",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 10
            },
            "end": {
              "line": 226,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_titleGroup",
          "type": "Object",
          "description": "Holder for the title group",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 10
            },
            "end": {
              "line": 233,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_animationFrameDone",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 10
            },
            "end": {
              "line": 238,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "seriesOnAxis",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "rebuildOnDraw",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 10
            },
            "end": {
              "line": 249,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_removingAxis",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 10
            },
            "end": {
              "line": 253,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_tooltipElem",
          "type": "HTMLElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 10
            },
            "end": {
              "line": 256,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisDrawn",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 10
            },
            "end": {
              "line": 260,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 8
            },
            "end": {
              "line": 283,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_truncateName",
          "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": ", {Integer} len"
            },
            {
              "name": "len"
            }
          ],
          "return": {
            "type": "String",
            "desc": "truncatedString"
          },
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 8
            },
            "end": {
              "line": 301,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 8
            },
            "end": {
              "line": 294,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "defineAxis",
          "description": "Sets up this._axis as a d3 axis object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 337,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_processTicks",
          "description": "Examines the tick configs and applies them if relevant",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 8
            },
            "end": {
              "line": 416,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "removeAll",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "removeAxis",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 423,
              "column": 8
            },
            "end": {
              "line": 432,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "removeTitle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 8
            },
            "end": {
              "line": 438,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 445,
              "column": 8
            },
            "end": {
              "line": 474,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateAxis",
          "description": "Updates the axis",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 480,
              "column": 8
            },
            "end": {
              "line": 496,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_buildAxis",
          "description": "Builds the axis",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateTicks",
          "description": "Updates the ticks",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 538,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcDrawnTicks",
          "description": "Returns the drawn tick values",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 544,
              "column": 8
            },
            "end": {
              "line": 561,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "setLabelDims",
          "description": "Calculates the dimensions for the label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 568,
              "column": 8
            },
            "end": {
              "line": 613,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setLabelStyles",
          "description": "Sets the d3 attributes for the labels",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 618,
              "column": 8
            },
            "end": {
              "line": 667,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_setLineStyles",
          "description": "Sets the axis line styles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 672,
              "column": 8
            },
            "end": {
              "line": 680,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            },
            {
              "name": "lines"
            }
          ]
        },
        {
          "name": "_getAxisGroupSize",
          "description": "/!\\ Forces layout reflow, call carefully",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 684,
              "column": 8
            },
            "end": {
              "line": 700,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTopBottomLabelSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 702,
              "column": 8
            },
            "end": {
              "line": 704,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcLeftRightLabelSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 706,
              "column": 8
            },
            "end": {
              "line": 748,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawTitle",
          "description": "Draws the axis title",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 754,
              "column": 8
            },
            "end": {
              "line": 848,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawSeriesBars",
          "description": "Draws the color bars for each series",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 853,
              "column": 8
            },
            "end": {
              "line": 871,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_muteSeriesBars",
          "description": "Mutes and unmutes the color bars for each series",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 876,
              "column": 8
            },
            "end": {
              "line": 893,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawBar",
          "description": "Helper function to draw the series color bar",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 898,
              "column": 8
            },
            "end": {
              "line": 917,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            },
            {
              "name": "sid"
            },
            {
              "name": "color"
            },
            {
              "name": "index"
            },
            {
              "name": "dashPattern"
            }
          ]
        },
        {
          "name": "_computeUnits",
          "description": "Helper function to append units to the title",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 923,
              "column": 8
            },
            "end": {
              "line": 934,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "appendUnitInTitle"
            },
            {
              "name": "title"
            },
            {
              "name": "unit"
            }
          ]
        },
        {
          "name": "_truncateTitle",
          "description": "Truncates the title label appropriately",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 939,
              "column": 8
            },
            "end": {
              "line": 963,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "truncationLength"
            },
            {
              "name": "appendUnitInTitle"
            }
          ]
        },
        {
          "name": "_titleChanged",
          "description": "Redraws the title on change",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 968,
              "column": 8
            },
            "end": {
              "line": 977,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "displayedTitle"
            }
          ]
        },
        {
          "name": "_processTooltip",
          "description": "Assigns target to tooltip",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 982,
              "column": 8
            },
            "end": {
              "line": 997,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_orientationChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 999,
              "column": 8
            },
            "end": {
              "line": 1006,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 74,
          "column": 12
        },
        "end": {
          "line": 1007,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "Translation offset to apply to the axis",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 10
            },
            "end": {
              "line": 218,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "orientation",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "label-type-size",
          "description": "Defines the base label type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "description": "The displayed title for the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-position",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-rotation",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-translation",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "description": "Array of the series which belong to this axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translate-amt",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-location",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-type-size",
          "description": "Defines the Title type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "stroke-width",
          "description": "Defines the axis stroke width",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outer-tick-size",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tick-values",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {},
          "type": "(Object|Number)",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axis-color",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawn-tick-values",
          "description": "Returned tick values from the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "truncation-length",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "axis-id",
          "description": "A unique ID for the axis",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "displayed-title",
          "description": "The truncated title",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 10
            },
            "end": {
              "line": 131,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "append-unit-in-title",
          "description": "Whether to append a unit (if existing in config) in the title",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 138,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "prevent-series-bar",
          "description": "Boolean which specifies not to draw the series bars",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 10
            },
            "end": {
              "line": 145,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "title-drawn",
          "description": "A boolean specifying if the axis title has been drawn",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 10
            },
            "end": {
              "line": 153,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "series-id",
          "description": "The series ID this axis refers to, used to look in the config",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "title-truncation",
          "description": "A boolean specifying if the axis title should truncate when too long",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 10
            },
            "end": {
              "line": 175,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "tick-format",
          "description": "A string that specifies the format of the ticks\n\nhttps://github.com/d3/d3-format\n\nhttps://github.com/d3/d3-time-format",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 10
            },
            "end": {
              "line": 195,
              "column": 11
            }
          },
          "metadata": {},
          "type": "(String|Function)"
        },
        {
          "name": "axis-type",
          "description": "A string specifying the type of axis. Used only for tick formating. Valid entries are:\n- `time`\n- `linear`\n- `ordinal`",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 10
            },
            "end": {
              "line": 205,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "rotation",
          "description": "Rotation to apply to the axis, in degrees",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 211,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "disable-ticks",
          "description": "A boolean specifying whether the axis should have ticks or not",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 10
            },
            "end": {
              "line": 226,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "series-on-axis",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "rebuild-on-draw",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 10
            },
            "end": {
              "line": 249,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "drawn-tick-values-changed",
          "description": "Fired when the `drawnTickValues` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "type": "CustomEvent",
          "name": "displayed-title-changed",
          "description": "Fired when the `displayedTitle` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-axis"
    },
    {
      "description": "### Usage\n\n    <px-vis-brush\n      svg=\"[[svg]]\"\n      axis=\"[[x]]\"\n      height=\"[[height]]\"\n      width=\"[[width]]\"\n      margin=\"[[margin]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-brush>\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data=\"[[chartData]]\"\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-nav-brush-outline-color` | The stroke (border) color for the brushed box\n  `--px-vis-nav-brush-fill-color` | The fill (background) color for the brushed box\n  `--px-vis-nav-brush-opacity` | The opacity of the brushed box\n  `--px-vis-nav-brush-gradient-fill-color` | The fill (background) color for the brushed box when gradientOverlay is 'true'\n  `--px-vis-nav-brush-gradient-opacity-1` | The start opacity of the brushed box when gradientOverlay is 'true'\n  `--px-vis-nav-brush-gradient-opacity-2` | The end opacity of the brushed box when gradientOverlay is 'true'\n  `--px-vis-nav-brush-handle-fill-color` | The fill (background) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-lines-color` | The stroke (border) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-fill-color-hover` | The hover state fill (background) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-lines-color-hover` | The hover state stroke (border) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-fill-color-press` | The pressed/mousedown state fill (background) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-lines-color-press` | The pressed/mousedown state stroke (border) color for the handles on the brushed box",
      "summary": "",
      "path": "px-vis-brush.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\"",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "type": "Object",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_brush",
          "type": "Object",
          "description": "Holder for the d3.svg.brush() object\n\nSee: https://github.com/mbostock/d3/wiki/SVG-Controls",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 101,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_brushGroup",
          "type": "Object",
          "description": "Holder for a group of SVG <g> elements pertaining to the brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_handleGroup",
          "type": "Object",
          "description": "Holder for a group of SVG elements pertaining to the handles",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_center",
          "type": "Object",
          "description": "Holder for the calculated center of the extent box",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_centering",
          "type": "boolean",
          "description": "A boolean to tell if the extents box is currently moving",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_brushing",
          "type": "boolean",
          "description": "A boolean to tell if a handle is currently moving",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "chartDomain",
          "type": "Object",
          "description": "The parent chart's extents",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "gradientOverlay",
          "type": "boolean",
          "description": "Boolean specifying if the rectangular overlay should have a gradient applied",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_preventDomainChange",
          "type": "boolean",
          "description": "Allows or prevents changes to selectedDomain",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_animationFrameDone",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_clipPathId",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 4
            },
            "end": {
              "line": 190,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Defines the svg for the brush, draws brush elements, and sets up listeners.\n\nCan be called manually after svg and domainChanged are set.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createClipPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 326,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "vR"
            }
          ]
        },
        {
          "name": "_drawClipPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 371,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "vR"
            }
          ]
        },
        {
          "name": "_brushstart",
          "description": "Helper function to add class \"selecting\" to elements selected in the brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 382,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_brushend",
          "description": "Helper function to remove class \"selecting\" to elements not selected in the brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 4
            },
            "end": {
              "line": 398,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_brushmove",
          "description": "Helper function fired when the brush is moved / extents are changed.\nSets the attribute 'selectedDomain' with the new extents.\nThis attr should travel up the component tree via observers and set the new domain in the chart.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 4
            },
            "end": {
              "line": 447,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            }
          ]
        },
        {
          "name": "_brushcenter",
          "description": "Helper function fired when the navigator is clicked on",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 453,
              "column": 4
            },
            "end": {
              "line": 472,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_brushcentermove",
          "description": "Helper function to calculate the center point where the brush should move to",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 478,
              "column": 4
            },
            "end": {
              "line": 484,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "x0"
            },
            {
              "name": "x1"
            }
          ]
        },
        {
          "name": "_brushcenterend",
          "description": "Helper function to move the brush and disable listener",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 490,
              "column": 4
            },
            "end": {
              "line": 493,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_recenter",
          "description": "Helper function to tween and calculate the brush move",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 499,
              "column": 4
            },
            "end": {
              "line": 520,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "smooth"
            }
          ]
        },
        {
          "name": "tween",
          "description": "Helper function to tween so that the brush slides rather than jumps",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 4
            },
            "end": {
              "line": 538,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            }
          ]
        },
        {
          "name": "_drawHandles",
          "description": "Helper function to draw the handle elements",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 545,
              "column": 4
            },
            "end": {
              "line": 597,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "heightOffset"
            }
          ]
        },
        {
          "name": "_handleGroupMouseDown",
          "description": "Function to restyle handles on mousedown event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 604,
              "column": 4
            },
            "end": {
              "line": 616,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            }
          ]
        },
        {
          "name": "_handleGroupMouseUp",
          "description": "Function to restyle handles on mouseup event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 622,
              "column": 4
            },
            "end": {
              "line": 633,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            }
          ]
        },
        {
          "name": "_handleGroupMouseLeave",
          "description": "Function to restyle handles on mouseleave event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 4
            },
            "end": {
              "line": 646,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            }
          ]
        },
        {
          "name": "_handleGroupMouseEnter",
          "description": "Function to restyle handles on mouseenter event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 652,
              "column": 4
            },
            "end": {
              "line": 659,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            }
          ]
        },
        {
          "name": "_zoomBrush",
          "description": "Function to trigger a brush extent calculation when the main chart extents change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 665,
              "column": 4
            },
            "end": {
              "line": 689,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartDomain"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 70,
          "column": 10
        },
        "end": {
          "line": 690,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "orientation",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "chart-domain",
          "description": "The parent chart's extents",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "gradient-overlay",
          "description": "Boolean specifying if the rectangular overlay should have a gradient applied",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "chart-domain-changed",
          "description": "Fired when the `chartDomain` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-brush"
    },
    {
      "description": "### Usage\n    <px-vis-chart-navigator\n        id=\"navigator\"\n        x-axis-type=\"time\"\n        y-axis-type=\"linear\"\n        width=\"[[width]]\"\n        height=\"100\"\n        margin=\"[[marginNav]]\"\n        default-series-config=\"[[defaultSeriesConfig]]\"\n        series-config=\"[[seriesConfig]]\"\n        include-all-series=\"[[includeAllSeries]]\"\n        chart-data=\"[[chartData]]\"\n        nav-series-limit=\"[[navSeriesLimit]]\"\n        chart-domain-x=\"[[chartDomainX]]\"\n        chart-domain-y=\"[[chartDomainY]]\"\n        range=\"[[range]]\"\n        disable-empty-render\n        selected-domain=\"{{selectedDomain}}\">\n    </px-vis-chart-navigator>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-nav-brush-outline-color` | The stroke (border) color for the brushed box\n  `--px-vis-nav-brush-fill-color` | The fill (background) color for the brushed box\n  `--px-vis-nav-brush-opacity` | The opacity of the brushed box\n  `--px-vis-nav-brush-gradient-fill-color` | The fill (background) color for the brushed box when gradientOverlay is 'true'\n  `--px-vis-nav-brush-gradient-opacity-1` | The start opacity of the brushed box when gradientOverlay is 'true'\n  `--px-vis-nav-brush-gradient-opacity-2` | The end opacity of the brushed box when gradientOverlay is 'true'\n  `--px-vis-nav-brush-handle-fill-color` | The fill (background) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-lines-color` | The stroke (border) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-fill-color-hover` | The hover state fill (background) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-lines-color-hover` | The hover state stroke (border) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-fill-color-press` | The pressed/mousedown state fill (background) color for the handles on the brushed box\n  `--px-vis-nav-brush-handle-lines-color-press` | The pressed/mousedown state stroke (border) color for the handles on the brushed box\n  |\n  |\n  |\n  `--px-vis-series-color-0` | These are the colors used to represent the data series on the charts. Used in numerical order by default. Colors MUST start at 0 and cannot contain gaps between numbers.\n  `--px-vis-series-color-1` |\n  `--px-vis-series-color-2` |\n  `--px-vis-series-color-n` |",
      "summary": "",
      "path": "px-vis-chart-navigator.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 321,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{\"x\":[null],\"y\":[null]}"
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 543,
              "column": 4
            },
            "end": {
              "line": 547,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "name": "preventWebWorkerSynchronization",
          "type": "boolean",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3028,
              "column": 6
            },
            "end": {
              "line": 3031,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "_extents",
          "type": "Array",
          "description": "Holder for chart extents from the seriesConfig object",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[[],[]]",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataHasChanged",
          "type": "number",
          "description": "Boolean to detect if the chart data has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calculatingDomain",
          "type": "boolean",
          "description": "Boolean to indicate if we are currently calculating the domain",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_defaultScaleValue",
          "type": "Object",
          "description": "default extents to use if none are specified\n\n0 for y axis for best practice",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"x\":[null],\"y\":[null]}",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "disableDynamicUpdate",
          "type": "boolean",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_runOnce",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chartId",
          "type": "string",
          "description": "Internal unique ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "truncationLength",
          "type": "number",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "numberFormatCulture",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en-US\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatIsCurrency",
          "type": "boolean",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatCurrency",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"$0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatDefault",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormat",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatUnformat",
          "type": "string",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatZero",
          "type": "string",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "firstDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"HH:mm:ss ZZ\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "secondDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"DD MMM YYYY\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "type": "string",
          "description": "Defines a separator character between the two datetime strings.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"|\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "type": "string",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"utc\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\"",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "type": "Object",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2362,
              "column": 4
            },
            "end": {
              "line": 2365,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "renderToCanvas",
          "type": "boolean",
          "description": "Boolean to specify if drawings should render to canvas instead of svg",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 386,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_renderToCanvasChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
        },
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "seriesConfig",
          "type": "Object",
          "description": "A configuration file to associate series order, name, type, and colors.\n\nAssociation of name, type, and seriesNumber should be developer set. Color and axis are optional.\n\n```\n {\n    \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n        \"type\": \"line\",  //line or scatter or both\n        \"markerSymbol\": \"diamond\" //if using scatter different markerSymbol can be used. See \"markerSymbol\" in px-vis-scatter\n        \"markerSize\": \"64\" //if using scatter allows to change the size of markers\n        \"markerScale\": \"2\" //if using scatter allows to scale the size of markers\n        \"markerFillOpacity\": \"0.5\" //if using scatter allows to specify the opacity of the inside of the marker\n        \"markerStrokeOpacity\": \"1\" //if using scatter allows to specify the opacity of the outside of the marker\n        \"strokeWidth\": \"1\" //if using line, allows you to specify the thickness of the line\n        \"mutedOpacity\": \"0.3\" //opacity value to use when muting a serie\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"x\",  //index or key name for independent variable\n        \"y\": \"y\",  //index or key name for dependent variable\n        \"xAxisUnit\": \"Volt\" //Unit to be used for the X axis. Can be ignored if x axis is time based\n        \"yAxisUnit\": \"Oranges\" //unit to be used for the Y axis.\n        \"xMin\": 0,  // minimum x value\n        \"xMax\": 100,  //maximum x value\n        \"yMin\": 5,  //minimum y value\n        \"yMax\": 50,  //maximum y value\n        \"color\": \"rgb(0,0,0)\", //color you want the chart\n        \"interpolationFunction\": Px.d3.curveBasis, //The line interpretor you want to use. See property 'interpolationFunction'\n        \"axis\": {\n            \"id\": \"AXIS_ID\"   //a unique identifier\n            \"side\": \"left\"    //the side that you want the axis to draw on, `left` or `right`\n            \"number\": 1       //the order of the axis on each side\n         }\n    }\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_defaultSeriesConfig",
          "type": "Object",
          "description": "A default configuration file. It fills in the missing parts of seriesConfig. Any options from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig\n\nDefault:\n\n```\n {\n    \"type\": \"line\",\n    \"x\": 'x',\n    \"axis\": {\n      \"id\": \"defaultAxis\",\n      \"side\": \"left\",\n      \"number\": 1\n  }}\n```",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"type\":\"line\",\"x\":\"x\",\"axis\":{\"id\":\"defaultAxis\",\"side\":\"left\",\"number\":1}}",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "defaultSeriesConfig",
          "type": "Object",
          "description": "Overwrites to the default configuration file. The defaultSeriesConfig is used to fill in the missing parts of seriesConfig. Any option from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 135,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateDSC\""
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "includeAllSeries",
          "type": "boolean",
          "description": "A boolean flag on whether to include all the series in the data.\n- `false`: only series defined in the seriesConfig file will be drawn\n- `true`: All series in the dataset will be drawn. Defaults will be used for the seriesConfig. If this is used do not specify a seriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 145,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_seriesKeys",
          "type": "Array",
          "description": "Representes the keys avaiable in completeSeriesConfig. It's being set\n before completeSeriesConfig is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "preventCompleteSeriesConfigCalc",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "preventResize",
          "type": "boolean",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 753,
              "column": 6
            },
            "end": {
              "line": 757,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_preventResizeChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartHorizontalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 770,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartVerticalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 780,
              "column": 6
            },
            "end": {
              "line": 783,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_chartWrapperClass",
          "type": "string",
          "description": "Class to be used on the external wrapper within the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 787,
              "column": 6
            },
            "end": {
              "line": 790,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounceResizeTiming",
          "type": "number",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 795,
              "column": 6
            },
            "end": {
              "line": 798,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "250",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "tooltipConfig",
          "type": "Object",
          "description": "Configuration object used to customize the tooltip cosmetic properties.\nPlease refer to px-vis-tooltip and px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- width\n- height\n- tooltipStyle\n- forceDateTimeDisplay",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1091,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "registerConfig",
          "type": "Object",
          "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1099,
              "column": 4
            },
            "end": {
              "line": 1101,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1177,
              "column": 4
            },
            "end": {
              "line": 1179,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1185,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "layer",
          "type": "Array",
          "description": "Array of the svg layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1415,
              "column": 4
            },
            "end": {
              "line": 1418,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "numberOfLayers",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1419,
              "column": 4
            },
            "end": {
              "line": 1421,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generateLayers",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1422,
              "column": 4
            },
            "end": {
              "line": 1425,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "wwDataSyncCounter",
          "type": "number",
          "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3052,
              "column": 4
            },
            "end": {
              "line": 3055,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
        },
        {
          "name": "_wwSyncRequestDataDeletion",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 482,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_wwSyncDataDeleted",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 483,
              "column": 6
            },
            "end": {
              "line": 486,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_wwSyncDataDeletionTimeout",
          "type": "number",
          "description": "After detaching the chart time after which we will delete\nthe synced data of the chart from the webworker. If the\nchart is re-attached in the meantime the deletion will\nbe canceled to avoid a re-sync",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 496,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1500",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_wwSyncDataPropName",
          "type": "string",
          "description": "Name of the property to be kept in sync. Usually chartData but can\nbe overriden for a filtered dataset instead for example",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 501,
              "column": 6
            },
            "end": {
              "line": 504,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"chartData\"",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "drawDebounceTime",
          "type": "Object",
          "description": "Debounce time to use for different types of rendering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"chartData\":10,\"filteredChartData\":10,\"highlightData\":10,\"markers\":10}",
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "_oldDrawDebounceTime",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "debounceOnPanning",
          "type": "boolean",
          "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "_progressiveRenderingCounter",
          "type": "Object",
          "description": "Counter to track progressive rendering requests and only draw the latest one",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_canvasTargets",
          "type": "Object",
          "description": "Current registered targets to draw on canvas during rendering",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_svgTargets",
          "type": "Object",
          "description": "Current registered targets to draw on svg during rendering",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "rendererMinimumPointsPerFrame",
          "type": "number",
          "description": "The minimum number of points to render per frame\neven if the chart is laggy",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "50",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "rendererFrameDurationTarget",
          "type": "number",
          "description": "Target duration (in ms) for one frame. The renderer will try to render\nas much data as possible in that given timeframe before calling the next\nanimation frame.\nWARNING: this needs to be higher than 16ms since by default\nrequestAnimationFrame will be called every ~16ms, so our target needs to\nbe higher to ensure we keep the processor busy",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "20",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "rendererFrameCountToAverage",
          "type": "number",
          "description": "Number of previous frames to average for the adaptive\nprogressive rendering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "3",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_previousFramesTiming",
          "type": "Object",
          "description": "For each renderer type the previous frames number of points and duration for line and scatter",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 181,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_hasBeenDetached",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "navSeriesLimit",
          "type": "number",
          "description": "Number of series to display on the navigator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "chartDomainX",
          "type": "Array",
          "description": "The parent chart's extents",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 10
            },
            "end": {
              "line": 254,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "chartDomainY",
          "type": "Array",
          "description": "The parent chart's extents",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 10
            },
            "end": {
              "line": 262,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "gradientOverlay",
          "type": "boolean",
          "description": "Boolean specifying if the rectangular overlay should have a gradient applied",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 10
            },
            "end": {
              "line": 270,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "range",
          "type": "Object",
          "description": "Can be set to override the time span shown by the navigator. Allows use of\nthe navigator without data.\n\n* Format ISO8601 strings\n```\n{\n   \"from\": \"2013-01-07T22:44:30.652Z\",\n   \"to\" : \"2013-02-04T22:44:30.652Z\"\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 10
            },
            "end": {
              "line": 287,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_rangeChanged\""
            }
          }
        },
        {
          "name": "disableEmptyRender",
          "type": "boolean",
          "description": "Boolean specifying if the navigator should be allowed to render empty or not",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 10
            },
            "end": {
              "line": 294,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_recreateScales",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setXScale",
          "description": "Sets the x scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 112,
              "column": 2
            },
            "end": {
              "line": 117,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetXScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setYScale",
          "description": "Sets the y scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 146,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMultiYScale",
          "description": "Sets a multi y scale",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetMultiYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 209,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setScale",
          "description": "Helper function to set the x and y based on scale type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 247,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "range"
            },
            {
              "name": "currentAxis"
            },
            {
              "name": "isMultiAxis"
            },
            {
              "name": "key"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setDomain",
          "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 256,
              "column": 3
            },
            "end": {
              "line": 313,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 353,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extents"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_determineExtents",
          "description": "Calculates the extents based on chartExtents, dataExtents, and the data.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 359,
              "column": 2
            },
            "end": {
              "line": 441,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkForExtents",
          "description": "Looks at chartExtents and dataExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 447,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "chartExtents"
            },
            {
              "name": "dataExtents"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkChartExtents",
          "description": "Looks at chartExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 496,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkDataExtents",
          "description": "Looks at dataExtents for extents values per axis; resolves chartExtents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 502,
              "column": 2
            },
            "end": {
              "line": 519,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dExts"
            },
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            },
            {
              "name": "bool"
            },
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findMinMax",
          "description": "Find the min and max values or ordinal values in data, for X and/or Y axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 526,
              "column": 2
            },
            "end": {
              "line": 552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "doX"
            },
            {
              "name": "doY"
            },
            {
              "name": "ordX"
            },
            {
              "name": "ordY"
            },
            {
              "name": "timeX"
            },
            {
              "name": "result"
            },
            {
              "name": "keys"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_getDataExtents",
          "description": "Goes through the data and extracts min and max values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 558,
              "column": 2
            },
            "end": {
              "line": 572,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "keysArr"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findTimeMM",
          "description": "Finds time based Max and Min",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 578,
              "column": 2
            },
            "end": {
              "line": 585,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result"
            },
            {
              "name": "d"
            },
            {
              "name": "l"
            },
            {
              "name": "x"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMin",
          "description": "Compares existing min and new data for min",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 591,
              "column": 2
            },
            "end": {
              "line": 595,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMax",
          "description": "Compares existing max and new data for max",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 601,
              "column": 2
            },
            "end": {
              "line": 605,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_processDataValues",
          "description": "Goes through the values from the data and calcs the extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 611,
              "column": 2
            },
            "end": {
              "line": 627,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "r"
            },
            {
              "name": "d"
            },
            {
              "name": "axis"
            },
            {
              "name": "key"
            },
            {
              "name": "i"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            },
            {
              "name": "v0"
            },
            {
              "name": "v1"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkInSeriesConfig",
          "description": "Loop through each series and see if it has mins and maxes in seriesConfig",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 634,
              "column": 0
            },
            "end": {
              "line": 646,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyChartExtents",
          "description": "Apply chart extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 652,
              "column": 0
            },
            "end": {
              "line": 673,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_searchForExtents",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 679,
              "column": 0
            },
            "end": {
              "line": 695,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "seriesToSearch"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcSeriesToSearch",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 701,
              "column": 0
            },
            "end": {
              "line": 713,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            },
            {
              "name": "seriesToSearch"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcMultiAxisExtents",
          "description": "calculates chart extents for multi axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 719,
              "column": 0
            },
            "end": {
              "line": 763,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_updateDomain",
          "description": "When the domain gets set via a user interaction, set the scale function to use the new domain\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 772,
              "column": 2
            },
            "end": {
              "line": 797,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedDomain"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 798,
              "column": 2
            },
            "end": {
              "line": 803,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setAxisScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 805,
              "column": 2
            },
            "end": {
              "line": 843,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftDims"
            },
            {
              "name": "rightDims"
            },
            {
              "name": "leftAxisSize"
            },
            {
              "name": "rightAxisSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getPixelFromData",
          "description": "Gets pixel values for data values relating to a series (series is the id\nused in seriesConfig). data is an array: [xValue, yValue]\nif margin is specified it will use thos to adjust the pixel values\ninstead of the normal `margin` property\nreturns an object with the result and whether that result is out of\nbounds for the current domain",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 853,
              "column": 2
            },
            "end": {
              "line": 871,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "series"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getDataFromPixel",
          "description": "Gets data values for pixel values relating to a series (series is the id\nused in seriesConfig). pixelVal is an array: [xValue, yValue]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 879,
              "column": 2
            },
            "end": {
              "line": 887,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pixelVal"
            },
            {
              "name": "series"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_pixelRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 892,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_truncateName",
          "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": ", {Integer} len"
            },
            {
              "name": "len"
            }
          ],
          "return": {
            "type": "String",
            "desc": "truncatedString"
          },
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "formatTimestamp",
          "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "timezone"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "formatedDatetimeString"
          },
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 215,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 8
            },
            "end": {
              "line": 341,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderToCanvasChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 392,
              "column": 2
            },
            "end": {
              "line": 407,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "renderToCanvas"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 199,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_returnAllKeys",
          "description": "Goes through an array of objects and gathers all unique keys. Returns a list of keys\n\nExpects and array of objects\n\nReturns an array of strings",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommonMethods"
        },
        {
          "name": "muteUnmuteSeries",
          "description": "Method to mute or umute",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 576,
              "column": 2
            },
            "end": {
              "line": 595,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "series"
            },
            {
              "name": "fromRegister"
            }
          ],
          "inheritedFrom": "PxVisBehavior.muteUnmuteSeries"
        },
        {
          "name": "_calcChartExts",
          "description": "Calcs the extents of the charts",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mins"
            },
            {
              "name": "maxes"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_setCompleteSeriesConfig",
          "description": "Creates the real series confit object based on the default settings, the dev defined series config, and the includeAllSeries flag.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 376,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_sideRegister",
          "description": "Helper function for the register. Returns true if the side register should exist",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 382,
              "column": 4
            },
            "end": {
              "line": 384,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "location"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_topRegister",
          "description": "Helper function for the register. Returns true if the top register should exist",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 390,
              "column": 4
            },
            "end": {
              "line": 392,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "location"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_chartTypeLine",
          "description": "Helper function for the line series. Returns true if the series is a line",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_chartTypeScatter",
          "description": "Helper function for the line series. Returns true if the series is a line",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_returnKeys",
          "description": "returns the keys of an object",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 420,
              "column": 4
            },
            "end": {
              "line": 422,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_updateDSC",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 424,
              "column": 4
            },
            "end": {
              "line": 438,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dsc"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "_returnStrokeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 440,
              "column": 4
            },
            "end": {
              "line": 442,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "seriesId"
            },
            {
              "name": "config"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 197,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "getImage",
          "description": "Takes a graphic \"snapshot\" of the component and pass results through a callback:\n- a canvas containing the graphical snapshot\n- a png base 64 data uri\n\ncallback object:\n{\n canvas: theCanvasObject\n image: \"data:image/png;base64;iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN...\"\n}\n\nthe data uri can be used to save the image and the canvas object to do\nfurther processing, such as combining different elements snapshot into one image",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 589,
              "column": 4
            },
            "end": {
              "line": 660,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "renderLegend"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_finishGetImage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 661,
              "column": 4
            },
            "end": {
              "line": 666,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "canvas"
            },
            {
              "name": "renderLegend"
            },
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_getRegisterWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 667,
              "column": 4
            },
            "end": {
              "line": 701,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_drawRegister",
          "description": "Draws a fake representation of the registers",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 705,
              "column": 4
            },
            "end": {
              "line": 733,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "startWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_preventResizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 801,
              "column": 4
            },
            "end": {
              "line": 809,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_secondaryToolbarToggled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 810,
              "column": 4
            },
            "end": {
              "line": 818,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_getChartWrapperClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 819,
              "column": 4
            },
            "end": {
              "line": 843,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hor"
            },
            {
              "name": "vert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 865,
              "column": 4
            },
            "end": {
              "line": 883,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_createLayers",
          "description": "Creates <g> layers",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1435,
              "column": 2
            },
            "end": {
              "line": 1458,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createLayersOnce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1459,
              "column": 2
            },
            "end": {
              "line": 1473,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "generateLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_initMousePiercing",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1474,
              "column": 2
            },
            "end": {
              "line": 1488,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createPiercingEventHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1489,
              "column": 2
            },
            "end": {
              "line": 1530,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventName"
            },
            {
              "name": "context"
            },
            {
              "name": "topLayer"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 506,
              "column": 4
            },
            "end": {
              "line": 508,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 146,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_keepDataInSync",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 547,
              "column": 4
            },
            "end": {
              "line": 560,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_panningStarted",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "_panningStopped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 73,
              "column": 2
            },
            "end": {
              "line": 77,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "_initializeRendererTypeObject",
          "description": "Creates an object with all renderer types and a default value for each",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 228,
              "column": 2
            },
            "end": {
              "line": 236,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "initialVal"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_registerDrawingElement",
          "description": "Elements wanting to use the renderer need to fire an event which\nwill be processed here",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 242,
              "column": 2
            },
            "end": {
              "line": 252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_unregisterDrawingElement",
          "description": "Elements wanting to use the renderer need to fire an event (on detached)\nwhich will be processed here",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderSeriesOnTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 293,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderTypedContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 352,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "renderType"
            },
            {
              "name": "canvasesToClear"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderChartData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 354,
              "column": 2
            },
            "end": {
              "line": 364,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderFilteredChartData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 366,
              "column": 2
            },
            "end": {
              "line": 376,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderHighlight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 378,
              "column": 2
            },
            "end": {
              "line": 385,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderMarkers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 387,
              "column": 2
            },
            "end": {
              "line": 392,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderAllLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 394,
              "column": 2
            },
            "end": {
              "line": 421,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderData",
          "description": "Initial entry point, debouncing as needed or cancel",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 429,
              "column": 2
            },
            "end": {
              "line": 446,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderDataDebounced",
          "description": "Ensure we the basic conditions for allowign rendering\nand start it",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 452,
              "column": 2
            },
            "end": {
              "line": 462,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            },
            {
              "name": "allowCanvasClearing"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_initializeCanvasRendering",
          "description": "Resets var relating to 1 complete rendering, call initializeDrawingSession\non all rendering targets and kick the process",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 468,
              "column": 2
            },
            "end": {
              "line": 490,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            },
            {
              "name": "allowCanvasClearing"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_processCanvasRendering",
          "description": "Called each frame.\n- Updates previous frame timings if there was one\n- Render what can be in the current frame\n- Exit or wait for next frame",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 498,
              "column": 2
            },
            "end": {
              "line": 530,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_processCanvasOneFrame",
          "description": "Rendering process during one frame. Calculate how many points can be\nrendered for the current target an render those. Keep rendering next\ntargets if we have enough time, based on same process",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 537,
              "column": 2
            },
            "end": {
              "line": 578,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_updatePreviousFrameTiming",
          "description": "Updates stats of the previous frame: how many points have been\nrendered per type and how long it took",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 584,
              "column": 2
            },
            "end": {
              "line": 616,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            },
            {
              "name": "now"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_getCurrentCanvasRenderingTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 618,
              "column": 2
            },
            "end": {
              "line": 625,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_firstCanvasRender",
          "description": "Used when rendering a target we don't have stats about. Assumes a first\nnumber of points to render, measure that and render more if we think we can",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 631,
              "column": 2
            },
            "end": {
              "line": 675,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_renderTargetToCanvas",
          "description": "Tries to render toRender number of points for the current target.\nreturns the number of points actually rendered and how much of the budget\nthis used",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 682,
              "column": 2
            },
            "end": {
              "line": 710,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toRender"
            },
            {
              "name": "ctx"
            },
            {
              "name": "currentBudget"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_calculatePointsAllowance",
          "description": "Calculates how many points we can render in one frame for the\ncontext current target. Based on stats of previous rendering of same type.\nReturns -1 if we don't have stats about this type of rendering",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 717,
              "column": 2
            },
            "end": {
              "line": 746,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ctx"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "_xAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 344,
              "column": 8
            },
            "end": {
              "line": 350,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_limitSeries",
          "description": "Dom if function to decide if a repeated item is above the limit",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 8
            },
            "end": {
              "line": 361,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ]
        },
        {
          "name": "resizeChart",
          "description": "Forces the chart to resize and redraw",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 8
            },
            "end": {
              "line": 368,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onIronResize",
          "description": "Resizes the chart based on a container resize if prevent-resize is false (default)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 8
            },
            "end": {
              "line": 382,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_rangeChanged",
          "description": "Sets the range when the values in rangepicker changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 387,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateDummyData",
          "description": "Creates some dummy data for initial use",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 8
            },
            "end": {
              "line": 454,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newXRange"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 193,
          "column": 12
        },
        "end": {
          "line": 455,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 321,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 543,
              "column": 4
            },
            "end": {
              "line": 547,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "name": "prevent-web-worker-synchronization",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3028,
              "column": 6
            },
            "end": {
              "line": 3031,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "disable-dynamic-update",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chart-id",
          "description": "Internal unique ID",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "truncation-length",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "number-format-culture",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-is-currency",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-currency",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-default",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-unformat",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-zero",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "first-date-time-format",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "second-date-time-format",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "description": "Defines a separator character between the two datetime strings.",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "orientation",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "render-to-canvas",
          "description": "Boolean to specify if drawings should render to canvas instead of svg",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 386,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
        },
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "series-config",
          "description": "A configuration file to associate series order, name, type, and colors.\n\nAssociation of name, type, and seriesNumber should be developer set. Color and axis are optional.\n\n```\n {\n    \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n        \"type\": \"line\",  //line or scatter or both\n        \"markerSymbol\": \"diamond\" //if using scatter different markerSymbol can be used. See \"markerSymbol\" in px-vis-scatter\n        \"markerSize\": \"64\" //if using scatter allows to change the size of markers\n        \"markerScale\": \"2\" //if using scatter allows to scale the size of markers\n        \"markerFillOpacity\": \"0.5\" //if using scatter allows to specify the opacity of the inside of the marker\n        \"markerStrokeOpacity\": \"1\" //if using scatter allows to specify the opacity of the outside of the marker\n        \"strokeWidth\": \"1\" //if using line, allows you to specify the thickness of the line\n        \"mutedOpacity\": \"0.3\" //opacity value to use when muting a serie\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"x\",  //index or key name for independent variable\n        \"y\": \"y\",  //index or key name for dependent variable\n        \"xAxisUnit\": \"Volt\" //Unit to be used for the X axis. Can be ignored if x axis is time based\n        \"yAxisUnit\": \"Oranges\" //unit to be used for the Y axis.\n        \"xMin\": 0,  // minimum x value\n        \"xMax\": 100,  //maximum x value\n        \"yMin\": 5,  //minimum y value\n        \"yMax\": 50,  //maximum y value\n        \"color\": \"rgb(0,0,0)\", //color you want the chart\n        \"interpolationFunction\": Px.d3.curveBasis, //The line interpretor you want to use. See property 'interpolationFunction'\n        \"axis\": {\n            \"id\": \"AXIS_ID\"   //a unique identifier\n            \"side\": \"left\"    //the side that you want the axis to draw on, `left` or `right`\n            \"number\": 1       //the order of the axis on each side\n         }\n    }\n }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "default-series-config",
          "description": "Overwrites to the default configuration file. The defaultSeriesConfig is used to fill in the missing parts of seriesConfig. Any option from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 135,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "include-all-series",
          "description": "A boolean flag on whether to include all the series in the data.\n- `false`: only series defined in the seriesConfig file will be drawn\n- `true`: All series in the dataset will be drawn. Defaults will be used for the seriesConfig. If this is used do not specify a seriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 145,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "prevent-complete-series-config-calc",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.chartCommon"
        },
        {
          "name": "prevent-resize",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 753,
              "column": 6
            },
            "end": {
              "line": 757,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-horizontal-alignment",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 770,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-vertical-alignment",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 780,
              "column": 6
            },
            "end": {
              "line": 783,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounce-resize-timing",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 795,
              "column": 6
            },
            "end": {
              "line": 798,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "tooltip-config",
          "description": "Configuration object used to customize the tooltip cosmetic properties.\nPlease refer to px-vis-tooltip and px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- width\n- height\n- tooltipStyle\n- forceDateTimeDisplay",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1091,
              "column": 4
            },
            "end": {
              "line": 1093,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "register-config",
          "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1099,
              "column": 4
            },
            "end": {
              "line": 1101,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1177,
              "column": 4
            },
            "end": {
              "line": 1179,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1185,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "layer",
          "description": "Array of the svg layers",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1415,
              "column": 4
            },
            "end": {
              "line": 1418,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "number-of-layers",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1419,
              "column": 4
            },
            "end": {
              "line": 1421,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generate-layers",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 1422,
              "column": 4
            },
            "end": {
              "line": 1425,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "ww-data-sync-counter",
          "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3052,
              "column": 4
            },
            "end": {
              "line": 3055,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for different types of rendering",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "debounce-on-panning",
          "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
        },
        {
          "name": "renderer-minimum-points-per-frame",
          "description": "The minimum number of points to render per frame\neven if the chart is laggy",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "renderer-frame-duration-target",
          "description": "Target duration (in ms) for one frame. The renderer will try to render\nas much data as possible in that given timeframe before calling the next\nanimation frame.\nWARNING: this needs to be higher than 16ms since by default\nrequestAnimationFrame will be called every ~16ms, so our target needs to\nbe higher to ensure we keep the processor busy",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "renderer-frame-count-to-average",
          "description": "Number of previous frames to average for the adaptive\nprogressive rendering",
          "sourceRange": {
            "file": "px-vis-behavior-renderer.html",
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "name": "nav-series-limit",
          "description": "Number of series to display on the navigator",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-domain-x",
          "description": "The parent chart's extents",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 10
            },
            "end": {
              "line": 254,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "chart-domain-y",
          "description": "The parent chart's extents",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 10
            },
            "end": {
              "line": 262,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "gradient-overlay",
          "description": "Boolean specifying if the rectangular overlay should have a gradient applied",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 10
            },
            "end": {
              "line": 270,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "range",
          "description": "Can be set to override the time span shown by the navigator. Allows use of\nthe navigator without data.\n\n* Format ISO8601 strings\n```\n{\n   \"from\": \"2013-01-07T22:44:30.652Z\",\n   \"to\" : \"2013-02-04T22:44:30.652Z\"\n}\n```",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 10
            },
            "end": {
              "line": 287,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "disable-empty-render",
          "description": "Boolean specifying if the navigator should be allowed to render empty or not",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 10
            },
            "end": {
              "line": 294,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "domain-changed-changed",
          "description": "Fired when the `domainChanged` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "layer-changed",
          "description": "Fired when the `layer` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-chart-canvas-rendering-ended",
          "description": "px-vis-chart-canvas-rendering-ended",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-chart-canvas-rendering-started",
          "description": "px-vis-chart-canvas-rendering-started",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorRenderer.base"
        },
        {
          "type": "CustomEvent",
          "name": "nav-series-limit-changed",
          "description": "Fired when the `navSeriesLimit` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-domain-x-changed",
          "description": "Fired when the `chartDomainX` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-domain-y-changed",
          "description": "Fired when the `chartDomainY` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-chart-navigator"
    },
    {
      "description": "### Usage\n\n    <px-vis-clip-complex-area\n      svg=\"[[svg]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\"\n      chart-data=\"[[chartData]]\"\n      dimensions=\"[[dimensions]]\"\n      clip-path=\"{{clipPath}}\">\n    </px-vis-clip-complex-area>\n\n## MDN Spec\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath",
      "summary": "",
      "path": "px-vis-clip-path-complex-area.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_clipPathObj",
          "type": "Object",
          "description": "Holder for the clip path object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_clipPathSvg",
          "type": "Object",
          "description": "Holder for the clip path svg",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_drawElement",
          "description": "Creates and sets a clipping path",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 10
        },
        "end": {
          "line": 125,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-clip-path-complex-area"
    },
    {
      "description": "### Usage\n\n    <px-vis-clip-path\n        clip-path=\"{{clipPath}}\"\n        series-clip-path=\"{{serieClipPath}}\"\n        svg=\"[[svg]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\">\n    </px-vis-clip-path>\n\n## MDN Spec\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath",
      "summary": "",
      "path": "px-vis-clip-path.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_clipPathSvg",
          "type": "Object",
          "description": "Holder for the bigger clip path intended for other chart objects such as events",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 56,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_seriesClipPathSvg",
          "type": "Object",
          "description": "Holder for smaller clip path intended for the chart series",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "seriesClipPathYOffset",
          "type": "number",
          "description": "Top offset to be applied to the series clip path",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_drawElement",
          "description": "Creates and sets two clipping paths.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 32,
          "column": 10
        },
        "end": {
          "line": 127,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path-y-offset",
          "description": "Top offset to be applied to the series clip path",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-clip-path"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-cursor-line\n        svg=\"[[layer.2]]\"\n        svg-data-layer=\"[[layer.0]]\"\n        svg-overlay-layer=\"[[layer.1]]\"\n        canvas-data-layer=\"[[canvasContext]]\"\n        canvas-overlay-layer=\"[[canvasLayers.highlighter]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        parallel-coordinates\n        dimensions=\"[[dimensions]]\"\n        domain-changed=\"[[domainChanged]]\"\n        time-data=\"[[seriesKey]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        series-id=\"[[seriesKey]]\"\n        category-key=\"[[categoryKey]]\"\n        categories=\"[[categories]]\"\n        tooltip-data=\"[[tooltipData.dataset]]\">\n    </px-vis-cursor-line>",
      "summary": "",
      "path": "px-vis-cursor-line.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "axes",
          "type": "Array",
          "description": "An optional dev set array to specify which dimensions to plot",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "An array of dimensions which the chart uses.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "A string specifying which key to use as the series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "lineRadiusLimit",
          "type": "number",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1236,
              "column": 4
            },
            "end": {
              "line": 1238,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.lineRadiusLimit"
        },
        {
          "name": "parallelCoordinates",
          "type": "boolean",
          "description": "Boolean specifying if the chart is a parallel coordinates chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "radialLine",
          "type": "boolean",
          "description": "Boolean specifying if the line is using radial (polar) data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "svgDataLayer",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_applyTransition\""
            }
          }
        },
        {
          "name": "svgOverlayLayer",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_applyTransition\""
            }
          }
        },
        {
          "name": "canvasDataLayer",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_applyTransitionCanvas\""
            }
          }
        },
        {
          "name": "canvasOverlayLayer",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_applyTransitionCanvas\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_applyTransition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "layer"
            }
          ]
        },
        {
          "name": "_applyTransitionCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "layer"
            }
          ]
        },
        {
          "name": "_updateLayers",
          "description": "Mutes and unmutes the other chart layers",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnData",
          "description": "Passes the data to the line generator if it exists",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 4
            },
            "end": {
              "line": 204,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "reDrawElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 4
            },
            "end": {
              "line": 208,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 78,
          "column": 10
        },
        "end": {
          "line": 209,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "axes",
          "description": "An optional dev set array to specify which dimensions to plot",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "description": "An array of dimensions which the chart uses.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "series-key",
          "description": "A string specifying which key to use as the series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "line-radius-limit",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1236,
              "column": 4
            },
            "end": {
              "line": 1238,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.lineRadiusLimit"
        },
        {
          "name": "parallel-coordinates",
          "description": "Boolean specifying if the chart is a parallel coordinates chart",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "radial-line",
          "description": "Boolean specifying if the line is using radial (polar) data",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "svg-data-layer",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "svg-overlay-layer",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "canvas-data-layer",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "canvas-overlay-layer",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-cursor-line"
    },
    {
      "description": "### Usage\n\n  <px-vis-svg\n    width=\"[[width]]\"\n    height=\"[[height]]\"\n    margin=\"[[margin]]\"\n    svg=\"{{svg}}\">\n  </px-vis-svg>\n  <px-vis-scale\n    x-axis-type=\"time\"\n    y-axis-type=\"linear\"\n    complete-series-config=\"[[seriesConfig]]\"\n    data-extents=\"[[dataExtents]]\"\n    width=\"[[width]]\"\n    height=\"[[height]]\"\n    margin=\"[[margin]]\"\n    chart-data={{chartData}}\n    x=\"{{x}}\"\n    y=\"{{y}}\"\n    domain-changed=\"{{domainChanged}}\"\n    selected-domain=\"[[selectedDomain]]\">\n  </px-vis-scale>\n  <px-vis-interaction-space\n    x-axis-type=\"time\"\n    svg=\"[[svg]]\"\n    width=\"[[width]]\"\n    height=\"[[height]]\"\n    margin=\"[[margin]]\"\n    complete-series-config=\"[[seriesConfig]]\"\n    chart-data=\"[[chartData]]\"\n    tooltip-data={{tooltipData}}\n    series-keys=\"[[seriesKeys]]\"\n    extents-data={{extentsData}}\n    x=\"[[x]]\"\n    y=\"[[y]]\"\n    domain-changed=\"[[domainChanged]]\">\n  </px-vis-interaction-space>\n  <px-vis-cursor\n    svg=\"[[svg]]\"\n    width=\"[[width]]\"\n    height=\"[[height]]\"\n    margin=\"[[margin]]\"\n    complete-series-config=\"[[seriesConfig]]\"\n    chart-data=\"[[chartData]]\"\n    tooltip-data=\"[[tooltipData]]\"\n    selection-type=[[selectionType]]>\n  </px-vis-cursor>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-cursor-line-color` | The color for the lines which track the cursor/data",
      "summary": "",
      "path": "px-vis-cursor.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "seriesKeys",
          "type": "Array",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "_mutedCompleteSeriesConfig",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 507,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_nonMutedSeriesKeys",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 508,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_cursor",
          "type": "Object",
          "description": "Holder for the cursor drawing objects",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_vLines",
          "type": "Object",
          "description": "Holder for the vertical line drawing object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_hLines",
          "type": "Object",
          "description": "Holder for the horizontal line drawing objects",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_circles",
          "type": "Object",
          "description": "Holder for the tooltip circle drawing objects",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_hLinesBuilder",
          "type": "Object",
          "description": "Object used to build the horizontal lines",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_vLinesBuilder",
          "type": "Object",
          "description": "Object used to build the vertical lines",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "horizontalLine",
          "type": "string",
          "description": "Draws a horizontal line through the point. Valid values:\n- full\n- none\n- left\n- right",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"full\""
        },
        {
          "name": "verticalLine",
          "type": "string",
          "description": "Draws a vertical line through the point. Valid values:\n- full\n- none\n- bottom\n- top",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"full\""
        },
        {
          "name": "circlePoint",
          "type": "string",
          "description": "Draws a circle at the point. Valid values:\n- yes\n- no",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"yes\""
        },
        {
          "name": "mutedOpacity",
          "type": "number",
          "description": "The opacity value of the fill to be used when muting a series (stroke is not drawn on mute).\nThis property will be read from the completeSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_radiusCursor",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 211,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "radialAreaCursor",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeNonMutedSeriesKeys",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 514,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeMutedCompleteSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 531,
              "column": 2
            },
            "end": {
              "line": 553,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "hardMute"
            },
            {
              "name": "mutedSeries"
            }
          ],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 228,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws the tooltip elements and sets up listeners and callbacks on chart hover.\nSets the tooltipData property, which gets passed to the register.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawHorizontalLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 297,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawVerticalLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawPointCircles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_cursorChange",
          "description": "Function called by observer.\nDetermines if the cursor should be shown or hidden.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 371,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_showCursor",
          "description": "Helper function called on mouseover,\nshows the cursor elements.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 380,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hideCursor",
          "description": "Helper function called on mouseout,\nhides the cursor elements.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveCursor",
          "description": "Helper function called on mousemove,\nmoves the cursor elements to their proper location.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 406,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveCircles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 4
            },
            "end": {
              "line": 436,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveHorizontalLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 438,
              "column": 4
            },
            "end": {
              "line": 444,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveHorizontalLinesRadial",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 469,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveHorizontalLinesCartesian",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 4
            },
            "end": {
              "line": 508,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveVerticalLines",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 510,
              "column": 4
            },
            "end": {
              "line": 516,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveVerticalLinesRadial",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 4
            },
            "end": {
              "line": 537,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_moveVerticalLinesCartesian",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 539,
              "column": 4
            },
            "end": {
              "line": 566,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 568,
              "column": 4
            },
            "end": {
              "line": 593,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_processOpacity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 595,
              "column": 4
            },
            "end": {
              "line": 653,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 655,
              "column": 4
            },
            "end": {
              "line": 667,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": "//TODO implement a dev setting to choose between only showing data at that x, snapping to nearest data, or interpolating value at x"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 79,
          "column": 10
        },
        "end": {
          "line": 668,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "series-keys",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "horizontal-line",
          "description": "Draws a horizontal line through the point. Valid values:\n- full\n- none\n- left\n- right",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "vertical-line",
          "description": "Draws a vertical line through the point. Valid values:\n- full\n- none\n- bottom\n- top",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "circle-point",
          "description": "Draws a circle at the point. Valid values:\n- yes\n- no",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "muted-opacity",
          "description": "The opacity value of the fill to be used when muting a series (stroke is not drawn on mute).\nThis property will be read from the completeSeriesConfig.",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "radial",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "radial-area-cursor",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-cursor"
    },
    {
      "description": "Converts data from Array form to Object form.\n\npx-vis charts expect data in the following array of objects format:\n\n```\n[\n    {\n        x: 10,\n        y: 50\n    },{\n        x: 20,\n        y: 40\n    }\n]\n```\n\nKeys are flexible - multiple keys can be added to the same object:\n\n```\n[\n    {\n        timestamp: 1413930600000,\n        tag1: 15,\n        tag2: 16,\n        tag3: 11\n    },{\n        timestamp: 1414080000000,\n        tag1: 14,\n        tag2: 17,\n        tag3: 13\n    }\n]\n```\n\nThis component accepts data in the following format:\n\n```\n[{\n    \"id\":\"myTagID\",\n    \"name\":\"My Favorite Tag\",\n    \"minValue\":0,\n    \"maxValue\":293,\n    \"data\":[\n        [1464562720308,41],\n        [1464571360308,170]\n    ]\n}]\n```\n\nIt will reformat the data into the object format and create a seriesConfig file.\n\n### Usage\n\n    <px-vis-data-converter\n        data-key=\"[[dataKey]]\"\n        id-key=\"[[idKey]]\"\n        original-data=\"[[originalData]]\"\n        chart-data=\"{{chartData}}\"\n        series-config=\"{{seriesConfig}}\">\n    </px-vis-data-converter>",
      "summary": "",
      "path": "px-vis-data-converter.html",
      "properties": [
        {
          "name": "dataKey",
          "type": "string",
          "description": "The key for accessing the data array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"data\""
        },
        {
          "name": "idKey",
          "type": "string",
          "description": "The key for accessing the data id.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"id\""
        },
        {
          "name": "nameKey",
          "type": "string",
          "description": "The key for accessing the data name.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"name\""
        },
        {
          "name": "dataIds",
          "type": "Array",
          "description": "An optional array of data IDs matching the order of the data array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "dataNames",
          "type": "Array",
          "description": "An optional array of data names matching the order of the data array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "newXKey",
          "type": "string",
          "description": "An optional name for the x-key for chartData.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 142,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"x\""
        },
        {
          "name": "xUnitKey",
          "type": "string",
          "description": "An optional key for the x axis units for chartData.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"xAxisUnit\""
        },
        {
          "name": "yUnitKey",
          "type": "string",
          "description": "An optional key for the y axis units for chartData.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"units\""
        },
        {
          "name": "originalData",
          "type": "Array",
          "description": "The original data in Array form.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "seriesConfig",
          "type": "Object",
          "description": "A series configuration file computed from originalData.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "The computed data in the Array of Object form expected by px-vis charts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "emptySets",
          "type": "Object",
          "description": "A list of the empty datasets.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_calcId",
          "description": "returns the correct id for the series",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-data-converter.html",
            "start": {
              "line": 67,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "d"
            },
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataConverterMethods"
        },
        {
          "name": "computeChartData",
          "description": "Merges n sorted arrays into an array of objects",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-data-converter.html",
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "originalData",
              "type": "Array",
              "description": "An array of dataset arrays (returned from the timeseries database) to be merged together."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "Holder for a variety of configs:"
            },
            {
              "name": "emptySets",
              "type": "Object",
              "description": "An object with keys for each empty set in the oringinalData"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Merged datasets as an Array of Objects"
          },
          "inheritedFrom": "PxVisBehavior.dataConverterMethods"
        },
        {
          "name": "computeSeriesConfig",
          "description": "bundles info in the original dataset into a new series config",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-data-converter.html",
            "start": {
              "line": 177,
              "column": 2
            },
            "end": {
              "line": 227,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "originalData",
              "type": "Array",
              "description": "An array of dataset arrays (returned from the timeseries database) to be merged together."
            },
            {
              "name": "context",
              "type": "Object",
              "description": "Holder for a variety of configs:"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "An Object with all configuration found in the originalData"
          },
          "inheritedFrom": "PxVisBehavior.dataConverterMethods"
        },
        {
          "name": "attached",
          "description": "When attached, re-fire set properties for precipitation pattern.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeChartData",
          "description": "Merges n sorted arrays into an array of objects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeSeriesConfig",
          "description": "Bundles info in the original dataset into a new series config.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 78,
          "column": 10
        },
        "end": {
          "line": 237,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "data-key",
          "description": "The key for accessing the data array.",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "id-key",
          "description": "The key for accessing the data id.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "name-key",
          "description": "The key for accessing the data name.",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "data-ids",
          "description": "An optional array of data IDs matching the order of the data array.",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "data-names",
          "description": "An optional array of data names matching the order of the data array.",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "new-x-key",
          "description": "An optional name for the x-key for chartData.",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 142,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "x-unit-key",
          "description": "An optional key for the x axis units for chartData.",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "y-unit-key",
          "description": "An optional key for the y axis units for chartData.",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "original-data",
          "description": "The original data in Array form.",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "series-config",
          "description": "A series configuration file computed from originalData.",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "chart-data",
          "description": "The computed data in the Array of Object form expected by px-vis charts.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "empty-sets",
          "description": "A list of the empty datasets.",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "original-data-changed",
          "description": "Fired when the `originalData` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "series-config-changed",
          "description": "Fired when the `seriesConfig` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "chart-data-changed",
          "description": "Fired when the `chartData` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "empty-sets-changed",
          "description": "Fired when the `emptySets` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-data-converter"
    },
    {
      "description": "### Usage\n\n    <px-vis-event\n        svg=\"[[svg]]\"\n        x-axis-type=\"[[xAxisType]]\"\n        clip-path=\"[[clipPath]]\"\n        event-id=\"[[item.id]]\"\n        chart-data=\"[[item]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        event-config=\"[[eventConfig]]\">\n    </px-vis-event>\n\nThe configuration object allows developers to set the icon used for each event type.\n\nIt should follow this form:\n\n    eventConfig = {\n      \"Event Name 1\":{\n        \"color\": \"blue\",\n        \"icon\": \"px-fea:deployments\",\n        \"type\": \"px\",\n        \"offset\":[0,0]\n      },\n      \"Event Name 2\":{\n        \"color\": \"green\",\n        \"icon\": \"px-nav:favorite\",\n        \"type\": \"px\",\n        \"offset\":[0,0],\n        \"lineWeight\": 0\n      },\n      \"Event Name 3\":{\n        \"icon\": \"Dancing_banana.gif\",\n        \"type\": \"image\",\n        \"offset\":[-2,-20],\n        \"size\":\"25\"\n      }\n    }\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-event-line-color` | The default color for the vertical lines below the icon\n  `--px-vis-event-icon-color` | The default color for the event icon markers\n  |\n  |\n  |\n  `--px-tooltip-background-color` | The color of the tooltip\n  `--px-tooltip-text-color` | The color of the tooltip text\n  `--px-tooltip-light-background-color` | The color of the light version tooltip\n  `--px-tooltip-light-text-color` | The color of the light version tooltip text\n  `--px-tooltip-light-border-color`| The color of the light version tooltip border",
      "summary": "",
      "path": "px-vis-event.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "firstDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"HH:mm:ss ZZ\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "secondDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"DD MMM YYYY\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "type": "string",
          "description": "Defines a separator character between the two datetime strings.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"|\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "type": "string",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"utc\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "eventConfig",
          "type": "Object",
          "description": "Configuration object to define what event should map to what icon and color.\nThe object has a key being the event name, the value being a configuration object for that event. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design\n- `icon`: the reference to the icon; for 'px' it is an icon set and an icon name; for an image, it is a path\n- `type`: 'px', or 'image'.\n- `offset`: a 2 element array with the number of pixels to offset the icon. offset[0] is along the x-axis; offset[1] is along the y-axis; necessary for some icons to adjust their values to achieve a better alignment over the event line.\n- `size`: a size in pixels for images.\n- `enableTooltip` enable/disable tooltip on the event, useful when using a lot of events\n- `firstDateTimeFormat`: moment.js format string for the first part of the timestamp if the x Axis is time based\n- `separator`: the separator character between the two datetime strings\n- `secondDateTimeFormat`: moment.js format string for the second part of the timestamp if the x Axis is time based\n- `tooltipOrientation`: orientation of the tooltip\n- `timezone`: the moment.js timezone to be used for the timestamp\n```\nFormat: {\n  \"Event-Name-A\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"a px icon\",\n    \"type\": \"px\",\n    \"offset\":[0,0],\n    'enableTooltip': true\n  },\n  \"Event-Name-C\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"path-to-an-img\",\n    \"type\": \"image\",\n    \"offset\":[0,0]\n  },\n}\n```\n\n```\nExample: {\n  \"Recalibrate\":{\n    \"color\": \"rgb(0,0,255)\",\n    \"icon\": \"px-vis:mov\",\n    \"type\": \"px\",\n    \"offset\":[-3,0]\n  },\n  \"Fan stop\":{\n    \"icon\": \"Dancing_banana.gif\",\n    \"type\": \"image\",\n    \"offset\":[-2,-20],\n    \"size\":\"25\"\n   }\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1283,
              "column": 4
            },
            "end": {
              "line": 1285,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "defaultEventConfig",
          "type": "Object",
          "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'color': 'grey7', //or theme var\n  'icon': 'px-vis:mov',\n  'type': 'px',\n  'offset': 0,\n  'lineColor': 'grey9',\n  'lineWeght': 1,\n  'enableTooltip': true\n  'firstDateTimeFormat': 'HH:mm:ss ZZ',\n  'secondDateTimeFormat': 'DD MMM YYYY',\n  'separator': '|',\n  'timezone': 'utc',\n  'tooltipOrientation': 'left'\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1309,
              "column": 4
            },
            "end": {
              "line": 1311,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "_defaultDefaultEventConfig",
          "type": "Object",
          "description": "Default defaultEventConfig\n\n```\nDefault: {\n  'color': 'rgb(0,0,0)',\n  'icon': 'px-utl:information',\n  'type': 'px',\n  'offset': 0,\n  'size': 16,\n  'lineColor': 'rgb(0,0,0)',\n  'lineWeight': 1,\n  'enableTooltip': true,\n  'firstDateTimeFormat': 'HH:mm:ss ZZ',\n  'secondDateTimeFormat': 'DD MMM YYYY',\n  'separator': '|',\n  'timezone': 'utc',\n  'tooltipOrientation': 'left'\n}\n```",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1334,
              "column": 4
            },
            "end": {
              "line": 1353,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"color\":\"rgb(0,0,0)\",\"icon\":\"px-utl:information\",\"type\":\"px\",\"offset\":[0,0],\"size\":16,\"lineColor\":\"rgb(0,0,0)\",\"lineWeight\":1,\"enableTooltip\":true,\"firstDateTimeFormat\":\"HH:mm:ss ZZ\",\"secondDateTimeFormat\":\"DD MMM YYYY\",\"separator\":\"|\",\"timezone\":\"utc\",\"tooltipOrientation\":\"left\"}",
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "eventData",
          "type": "Array",
          "description": "Data representing the events. Example:\n[\n   {\n     \"id\": \"123\",\n     \"x\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"id\": \"456\",\n     \"x\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"id\": \"789\",\n     \"x\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"id\": \"333\",\n     \"x\": 8,\n     \"label\": \"Default\"\n   }\n ]",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1380,
              "column": 4
            },
            "end": {
              "line": 1382,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "__localizationCache",
          "type": "Object",
          "description": "Internal singleton cache. This is the private implementation of the\nbehaviour; don't interact with it directly.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "language",
          "type": "string",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en\""
        },
        {
          "name": "resources",
          "type": "Object",
          "description": "List of keys & values used for translating this component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"en\":{\"Event\":\"Event\",\"ID\":\"ID\",\"Timestamp\":\"Timestamp\",\"X\":\"X\"}}"
        },
        {
          "name": "formats",
          "type": "Object",
          "description": "Optional dictionary of user defined formats, as explained here:\nhttp://formatjs.io/guides/message-syntax/#custom-formats\n\nFor example, a valid dictionary of formats would be:\nthis.formats = {\n   number: { USD: { style: 'currency', currency: 'USD' } }\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "useKeyIfMissing",
          "type": "boolean",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 5
            },
            "end": {
              "line": 232,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "localize",
          "type": "Function",
          "description": "Translates a string to the current `language`. Any parameters to the\nstring should be passed in order, as follows:\n`localize(stringKey, param1Name, param1Value, param2Name, param2Value)`",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "bubbleEvent",
          "type": "boolean",
          "description": "If true, will bubble up the event to the parents",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "_meta",
          "type": "!Polymer.IronMeta",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1880,
              "column": 4
            },
            "end": {
              "line": 1882,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_iconSize",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1884,
              "column": 4
            },
            "end": {
              "line": 1887,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "16",
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_iconScale",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1889,
              "column": 4
            },
            "end": {
              "line": 1892,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "16",
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "eventGroup",
          "type": "Object",
          "description": "Holder object for the event svg \"g\" element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "eventLine",
          "type": "Object",
          "description": "Holder object for the event svg \"line\" element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "eventIcon",
          "type": "Object",
          "description": "Holder object for the event svg icon.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_thisConfig",
          "type": "Object",
          "description": "Computed configuration object based on custom styles and default styles.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "tooltipOrientation",
          "type": "string",
          "description": "Specifies the orientation of the event tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"left\""
        },
        {
          "name": "xKey",
          "type": "string",
          "description": "Specifies the x key for the event data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 6
            },
            "end": {
              "line": 178,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"x\""
        },
        {
          "name": "_eventConfigChanged",
          "type": "boolean",
          "description": "Tracks if the event configuration has been edited.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 6
            },
            "end": {
              "line": 186,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_animationFrameDone",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_eventDrawn",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_hasBeenDetached",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_reCalcValue",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 243,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_value",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 5
            },
            "end": {
              "line": 273,
              "column": 6
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "formatTimestamp",
          "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "timezone"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "formatedDatetimeString"
          },
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "loadResources",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__computeLocalize",
          "description": "Returns a computed `localize` method, based on the current `language`.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 247,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "language"
            },
            {
              "name": "resources"
            },
            {
              "name": "formats"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__onRequestResponse",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 249,
              "column": 2
            },
            "end": {
              "line": 252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__onRequestError",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__checkLocalizationCache",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 266,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "proto"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "_getIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1895,
              "column": 2
            },
            "end": {
              "line": 1921,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "iconName"
            },
            {
              "name": "targetSize"
            },
            {
              "name": "defaultKey"
            },
            {
              "name": "defaultName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_calcIconScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1923,
              "column": 2
            },
            "end": {
              "line": 1925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "size"
            },
            {
              "name": "targetSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 285,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_tooltipRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 293,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_eventConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 4
            },
            "end": {
              "line": 301,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_recalcValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getTooltiptarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcThemeOrConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the event element.\nCalled from an observer watching for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "positionElement",
          "description": "Updates the position of the event.\nCalled from an observer watching for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 404,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "Helper to call addClipPath with the element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 4
            },
            "end": {
              "line": 418,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_positionEvent",
          "description": "Sets the position for the event line and icon.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 425,
              "column": 4
            },
            "end": {
              "line": 441,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_processConfiguration",
          "description": "Compiles a configuration object by looking if there is a custom style, or if it should use defaults.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 467,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_formatDatetime",
          "description": "Formats the datetime to match the custom format.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 510,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time"
            },
            {
              "name": "format"
            }
          ]
        },
        {
          "name": "_getValueTitle",
          "description": "Returns the title value to the tooltip.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 517,
              "column": 4
            },
            "end": {
              "line": 523,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxisType"
            }
          ]
        },
        {
          "name": "_getValue",
          "description": "Returns the x value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 528,
              "column": 4
            },
            "end": {
              "line": 535,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxisType"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 93,
          "column": 10
        },
        "end": {
          "line": 536,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "first-date-time-format",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "second-date-time-format",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "description": "Defines a separator character between the two datetime strings.",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "event-config",
          "description": "Configuration object to define what event should map to what icon and color.\nThe object has a key being the event name, the value being a configuration object for that event. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design\n- `icon`: the reference to the icon; for 'px' it is an icon set and an icon name; for an image, it is a path\n- `type`: 'px', or 'image'.\n- `offset`: a 2 element array with the number of pixels to offset the icon. offset[0] is along the x-axis; offset[1] is along the y-axis; necessary for some icons to adjust their values to achieve a better alignment over the event line.\n- `size`: a size in pixels for images.\n- `enableTooltip` enable/disable tooltip on the event, useful when using a lot of events\n- `firstDateTimeFormat`: moment.js format string for the first part of the timestamp if the x Axis is time based\n- `separator`: the separator character between the two datetime strings\n- `secondDateTimeFormat`: moment.js format string for the second part of the timestamp if the x Axis is time based\n- `tooltipOrientation`: orientation of the tooltip\n- `timezone`: the moment.js timezone to be used for the timestamp\n```\nFormat: {\n  \"Event-Name-A\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"a px icon\",\n    \"type\": \"px\",\n    \"offset\":[0,0],\n    'enableTooltip': true\n  },\n  \"Event-Name-C\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"path-to-an-img\",\n    \"type\": \"image\",\n    \"offset\":[0,0]\n  },\n}\n```\n\n```\nExample: {\n  \"Recalibrate\":{\n    \"color\": \"rgb(0,0,255)\",\n    \"icon\": \"px-vis:mov\",\n    \"type\": \"px\",\n    \"offset\":[-3,0]\n  },\n  \"Fan stop\":{\n    \"icon\": \"Dancing_banana.gif\",\n    \"type\": \"image\",\n    \"offset\":[-2,-20],\n    \"size\":\"25\"\n   }\n}\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1283,
              "column": 4
            },
            "end": {
              "line": 1285,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "default-event-config",
          "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'color': 'grey7', //or theme var\n  'icon': 'px-vis:mov',\n  'type': 'px',\n  'offset': 0,\n  'lineColor': 'grey9',\n  'lineWeght': 1,\n  'enableTooltip': true\n  'firstDateTimeFormat': 'HH:mm:ss ZZ',\n  'secondDateTimeFormat': 'DD MMM YYYY',\n  'separator': '|',\n  'timezone': 'utc',\n  'tooltipOrientation': 'left'\n}\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1309,
              "column": 4
            },
            "end": {
              "line": 1311,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "event-data",
          "description": "Data representing the events. Example:\n[\n   {\n     \"id\": \"123\",\n     \"x\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"id\": \"456\",\n     \"x\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"id\": \"789\",\n     \"x\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"id\": \"333\",\n     \"x\": 8,\n     \"label\": \"Default\"\n   }\n ]",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1380,
              "column": 4
            },
            "end": {
              "line": 1382,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.events"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "language",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "resources",
          "description": "List of keys & values used for translating this component.",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "formats",
          "description": "Optional dictionary of user defined formats, as explained here:\nhttp://formatjs.io/guides/message-syntax/#custom-formats\n\nFor example, a valid dictionary of formats would be:\nthis.formats = {\n   number: { USD: { style: 'currency', currency: 'USD' } }\n}",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "use-key-if-missing",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 5
            },
            "end": {
              "line": 232,
              "column": 6
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "localize",
          "description": "Translates a string to the current `language`. Any parameters to the\nstring should be passed in order, as follows:\n`localize(stringKey, param1Name, param1Value, param2Name, param2Value)`",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "bubble-event",
          "description": "If true, will bubble up the event to the parents",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "event-group",
          "description": "Holder object for the event svg \"g\" element.",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "event-line",
          "description": "Holder object for the event svg \"line\" element.",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "event-icon",
          "description": "Holder object for the event svg icon.",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "tooltip-orientation",
          "description": "Specifies the orientation of the event tooltip.",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "x-key",
          "description": "Specifies the x key for the event data.",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 6
            },
            "end": {
              "line": 178,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "app-localize-resources-error",
          "description": "app-localize-resources-error",
          "metadata": {},
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "app-localize-resources-loaded",
          "description": "app-localize-resources-loaded",
          "metadata": {},
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-event"
    },
    {
      "description": "The drawing object has two orientation options: `bottom` and `left`.\n\nUsing `bottom` specifies vertical gridlines drawn from the x-axis.\nUsing `left` specifes horizontal gridlines drawn from the y-axis.\n\n### Usage\n\n    <px-vis-gridlines\n        svg=\"[[svg]]\"\n        axis=\"[[x]]\"\n        margin=\"[[margin]]\"\n        length=\"[[height]]\"\n        orientation=\"bottom\">\n    </px-vis-gridlines>\n\n### d3 reference\nhttps://github.com/mbostock/d3/wiki/SVG-Axes\nThe gridlines still make use of the d3.axis object, just with different settings\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-gridlines-color` | The color for the gridlines",
      "summary": "",
      "path": "px-vis-gridlines.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\"",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "type": "Object",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "labelTypeSize",
          "type": "number",
          "description": "Defines the base label type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The displayed title for the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelPosition",
          "type": "string",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelRotation",
          "type": "number",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelTranslation",
          "type": "Array",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "type": "Array",
          "description": "Array of the series which belong to this axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translateAmt",
          "type": "Array",
          "description": "An x,y amount to move the grid to allow for labels and titles.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]"
        },
        {
          "name": "titleLocation",
          "type": "Object",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleTypeSize",
          "type": "number",
          "description": "Defines the Title type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "Defines the axis stroke width",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outerTickSize",
          "type": "number",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tickValues",
          "type": "Array",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "type": "(Object|Number)",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axisColor",
          "type": "string",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawnTickValues",
          "type": "Array",
          "description": "Returned tick values from the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_grid",
          "type": "Object",
          "description": "Holder for the instantiated d3 grid.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_gridGroup",
          "type": "Object",
          "description": "Holder for the grid drawing.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 87,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "gridId",
          "type": "string",
          "description": "A unique ID for the grid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_drawGrid",
          "type": "boolean",
          "description": "Boolean to control if the grid should be drawn.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 10
            },
            "end": {
              "line": 116,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_isDirty",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 120,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 151,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 134,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "defineGrid",
          "description": "Defines basics of the d3.axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 8
            },
            "end": {
              "line": 191,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Method fired via observer which draws the gridlines.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 235,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeUncessaryElems",
          "description": "Removes other axis elements which are duplicated with px-vis-axis.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 8
            },
            "end": {
              "line": 244,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_setLineStyles",
          "description": "Sets the gridline lines styles.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 8
            },
            "end": {
              "line": 261,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 46,
          "column": 12
        },
        "end": {
          "line": 262,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "orientation",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "label-type-size",
          "description": "Defines the base label type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "description": "The displayed title for the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-position",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-rotation",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-translation",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "description": "Array of the series which belong to this axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translate-amt",
          "description": "An x,y amount to move the grid to allow for labels and titles.",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 10
            },
            "end": {
              "line": 108,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "title-location",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-type-size",
          "description": "Defines the Title type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "stroke-width",
          "description": "Defines the axis stroke width",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outer-tick-size",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tick-values",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {},
          "type": "(Object|Number)",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axis-color",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawn-tick-values",
          "description": "Returned tick values from the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "grid-id",
          "description": "A unique ID for the grid.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "drawn-tick-values-changed",
          "description": "Fired when the `drawnTickValues` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-gridlines"
    },
    {
      "description": "### Usage\n      <px-vis-svg-canvas\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        canvas-context=\"{{canvasContext}}\">\n      </px-vis-svg-canvas>\n      <px-vis-scale\n        x-axis-type=\"time\"\n        y-axis-type=\"linear\"\n        complete-series-config=\"[[seriesConfig]]\"\n        data-extents=\"[[dataExtents]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        chart-data={{chartData}}\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domainChanged=\"{{domainChanged}}\"\n        selected-domain=\"[[selectedDomain]]\">\n      </px-vis-scale>\n      <px-vis-line-canvas\n        series-id=\"mySeries\"\n        complete-series-config=\"[[seriesConfig]]\"\n        chart-data=\"[[chartData]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        canvas-context=\"[[canvasContext]]\"\n        domain-changed=\"[[domainChanged]]\">\n        </px-vis-line-canvas>",
      "summary": "",
      "path": "px-vis-line-canvas.html",
      "properties": [
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "lineRadiusLimit",
          "type": "number",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "type": "Object",
          "description": "A holder object for the line generator",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "showGaps",
          "type": "boolean",
          "description": "A boolean spcifying if the line should show gaps on undefined data.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1390,
              "column": 4
            },
            "end": {
              "line": 1393,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineGaps"
        },
        {
          "name": "timeDomain",
          "type": "Object",
          "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3199,
              "column": 4
            },
            "end": {
              "line": 3204,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.timeDomain"
        },
        {
          "name": "parallelCoordinates",
          "type": "boolean",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1415,
              "column": 4
            },
            "end": {
              "line": 1418,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "radialLine",
          "type": "boolean",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1423,
              "column": 4
            },
            "end": {
              "line": 1426,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradientLine",
          "type": "boolean",
          "description": "A boolean spceifying if a opacity gradient should get applied to the line",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1431,
              "column": 4
            },
            "end": {
              "line": 1434,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradientRange",
          "type": "Array",
          "description": "Calculated range values for the gradient scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1439,
              "column": 4
            },
            "end": {
              "line": 1442,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_colorArr",
          "type": "Array",
          "description": "Gets and saves the rgb so we can make an rgba to apply to the line",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1447,
              "column": 4
            },
            "end": {
              "line": 1450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "multiPath",
          "type": "boolean",
          "description": "A boolean spcifying if multiple paths get drawn by the line",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1456,
              "column": 4
            },
            "end": {
              "line": 1459,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_currentDrawingOptions",
          "type": "Object",
          "description": "Options currently in use for drawing lines: opacity, color, etc.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 111,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "serieToRedrawOnTop",
          "type": "Array",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2362,
              "column": 4
            },
            "end": {
              "line": 2365,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "rendererType",
          "type": "string",
          "description": "Type of renderer this drawing element should be using. Determines on what\ncondition the element is going to be drawn\n- chartData\n- filteredChartData\n- highlightData",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3136,
              "column": 4
            },
            "end": {
              "line": 3139,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"chartData\"",
          "inheritedFrom": "PxVisBehavior.rendererType"
        },
        {
          "name": "clipPath",
          "type": "boolean",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "mutedOpacity",
          "type": "number",
          "description": "The opacity value of the fill to be used when muting a series (stroke is not drawn on mute).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0.3"
        },
        {
          "name": "_clipData",
          "type": "Array",
          "description": "Holder for clipPath data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 97,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_defineRadialLine",
          "description": "Defines a multi-scale d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1281,
              "column": 2
            },
            "end": {
              "line": 1368,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            },
            {
              "name": "multiLine"
            },
            {
              "name": "counterClockwise"
            },
            {
              "name": "useDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "_resetRenderingContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1474,
              "column": 2
            },
            "end": {
              "line": 1477,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_computeColorArr",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1479,
              "column": 2
            },
            "end": {
              "line": 1510,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "categories"
            },
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_opacityLine",
          "description": "Returns the correct opacity to use for all lines.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1516,
              "column": 2
            },
            "end": {
              "line": 1521,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_computeGradientRange",
          "description": "Computes the data range.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1527,
              "column": 2
            },
            "end": {
              "line": 1543,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData"
            },
            {
              "name": "timeDomain"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_removeGaps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1545,
              "column": 2
            },
            "end": {
              "line": 1547,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_defineSingleLine",
          "description": "Defines the d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1553,
              "column": 2
            },
            "end": {
              "line": 1613,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_defineMultiLine",
          "description": "Defines a multi-scale d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1619,
              "column": 2
            },
            "end": {
              "line": 1653,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "initializeDrawingSession",
          "description": "Defines the appropriate line generator and updates drawing\nvariables: opacity, colors, etc.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawClipPath",
          "description": "Draws a clip path for canvas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawRadarClipPath",
          "description": "Draws a clip path for radar.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawRectClipPath",
          "description": "Draws a rectangular clip path for cartesian charts.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_generateRadarClipData",
          "description": "Generates the edges for the radar clip path.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 6
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderOneBatch",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 308,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "stop"
            }
          ]
        },
        {
          "name": "_isSerieMuted",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_canvasLineColor",
          "description": "Returns the correct rgba to use for the canvas line.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 332,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "opacity"
            }
          ]
        },
        {
          "name": "rgbToRgba",
          "description": "Adds alpha to an rgb value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb"
            },
            {
              "name": "opacity"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 10
        },
        "end": {
          "line": 347,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "line-radius-limit",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "description": "A holder object for the line generator",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "show-gaps",
          "description": "A boolean spcifying if the line should show gaps on undefined data.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1390,
              "column": 4
            },
            "end": {
              "line": 1393,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineGaps"
        },
        {
          "name": "time-domain",
          "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3199,
              "column": 4
            },
            "end": {
              "line": 3204,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.timeDomain"
        },
        {
          "name": "parallel-coordinates",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1415,
              "column": 4
            },
            "end": {
              "line": 1418,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "radial-line",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1423,
              "column": 4
            },
            "end": {
              "line": 1426,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradient-line",
          "description": "A boolean spceifying if a opacity gradient should get applied to the line",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1431,
              "column": 4
            },
            "end": {
              "line": 1434,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "gradient-range",
          "description": "Calculated range values for the gradient scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1439,
              "column": 4
            },
            "end": {
              "line": 1442,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "multi-path",
          "description": "A boolean spcifying if multiple paths get drawn by the line",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1456,
              "column": 4
            },
            "end": {
              "line": 1459,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.lineShared"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "serie-to-redraw-on-top",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "renderer-type",
          "description": "Type of renderer this drawing element should be using. Determines on what\ncondition the element is going to be drawn\n- chartData\n- filteredChartData\n- highlightData",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3136,
              "column": 4
            },
            "end": {
              "line": 3139,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.rendererType"
        },
        {
          "name": "clip-path",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "muted-opacity",
          "description": "The opacity value of the fill to be used when muting a series (stroke is not drawn on mute).",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 6
            },
            "end": {
              "line": 91,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "stroke-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-line-canvas"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-interaction-space\n        ...\n        generating-crosshair-data=\"{{generatingCrosshairData}}\"\n        crosshair-data=\"{{crosshairData}}\">\n    </px-vis-interaction-space>\n\n    <px-vis-highlight-line\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        domain-changed=\"[[domainChanged]]\"\n        time-data=\"[[key]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        chart-data=\"[[chartData]]\"\n        generating-crosshair-data=\"[[generatingCrosshairData]]\"\n        crosshair-data=\"[[crosshairData]]\">\n    </px-vis-highlight-line>",
      "summary": "",
      "path": "px-vis-highlight-line-canvas.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshairData",
          "type": "Object",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generatingCrosshairData",
          "type": "string",
          "description": "Bool indicating if interaction space is currently generating data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshairPixelSearch",
          "type": "number",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "clipPath",
          "type": "boolean",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "axes",
          "type": "Array",
          "description": "An optional dev set array to specify which dimensions to plot",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "An array of dimensions which the chart uses.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "A string specifying which key to use as the series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "differentDataset",
          "type": "boolean",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "type": "number",
          "description": "The amount +/- around the datapoint",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\"",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layersToMask",
          "type": "Array",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "drawWithLocalCrosshairData",
          "type": "boolean",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_highlightData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2828,
              "column": 4
            },
            "end": {
              "line": 2831,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "parallelCoordinates",
          "type": "boolean",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2837,
              "column": 4
            },
            "end": {
              "line": 2840,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "radialLine",
          "type": "boolean",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2845,
              "column": 4
            },
            "end": {
              "line": 2848,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_resetTooltipData",
          "description": "Helper function called on mouseout\nresets tooltipData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2522,
              "column": 2
            },
            "end": {
              "line": 2552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_createTooltipDataStub",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2554,
              "column": 2
            },
            "end": {
              "line": 2567,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "timestamp"
            },
            {
              "name": "showTooltip"
            }
          ],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_calcDataset",
          "description": "Determines if we should do a regular binary search or a fuzzy binary search",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2625,
              "column": 2
            },
            "end": {
              "line": 2656,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_generateSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2659,
              "column": 2
            },
            "end": {
              "line": 2695,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_setTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2697,
              "column": 2
            },
            "end": {
              "line": 2710,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_muteDataSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2728,
              "column": 2
            },
            "end": {
              "line": 2744,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightCanvasShared"
        },
        {
          "name": "_addTransition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2746,
              "column": 2
            },
            "end": {
              "line": 2758,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightCanvasShared"
        },
        {
          "name": "_requestCanvasCreation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2760,
              "column": 2
            },
            "end": {
              "line": 2768,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightCanvasShared"
        },
        {
          "name": "_computeChartData",
          "description": "Draws the crosshair elements and sets up listeners and callbacks on chart hover\nSets the crosshairData property which gets passed to the register.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2857,
              "column": 2
            },
            "end": {
              "line": 2895,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_setTooltipDataMultiLine",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2898,
              "column": 2
            },
            "end": {
              "line": 2912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_resetMultilineTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2914,
              "column": 2
            },
            "end": {
              "line": 2925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_createMultilineTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2927,
              "column": 2
            },
            "end": {
              "line": 3001,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            },
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 78,
          "column": 10
        },
        "end": {
          "line": 102,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshair-data",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generating-crosshair-data",
          "description": "Bool indicating if interaction space is currently generating data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshair-pixel-search",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "clip-path",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "axes",
          "description": "An optional dev set array to specify which dimensions to plot",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "description": "An array of dimensions which the chart uses.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "series-key",
          "description": "A string specifying which key to use as the series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "different-dataset",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "description": "The amount +/- around the datapoint",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layers-to-mask",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "draw-with-local-crosshair-data",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "parallel-coordinates",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2837,
              "column": 4
            },
            "end": {
              "line": 2840,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "radial-line",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2845,
              "column": 4
            },
            "end": {
              "line": 2848,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "crosshair-data-changed",
          "description": "Fired when the `crosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "generating-crosshair-data-changed",
          "description": "Fired when the `generatingCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "draw-with-local-crosshair-data-changed",
          "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-highlight-line-canvas"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-interaction-space\n        ...\n        generating-crosshair-data=\"{{generatingCrosshairData}}\"\n        crosshair-data=\"{{crosshairData}}\">\n    </px-vis-interaction-space>\n\n    <px-vis-highlight-line\n        id=\"highlighter\"\n        margin=\"[[margin]]\"\n        svg=\"[[layer.1]]\"\n        layers-to-mask=\"[[layer.0]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        parallel-coordinates\n        dimensions=\"[[dimensions]]\"\n        domain-changed=\"[[domainChanged]]\"\n        time-data=\"[[seriesKey]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        series-id=\"[[seriesKey]]\"\n        category-key=\"[[categoryKey]]\"\n        categories=\"[[categories]]\"\n        chart-data=\"[[chartData]]\"\n        generating-crosshair-data=\"[[generatingCrosshairData]]\"\n        crosshair-data=\"[[crosshairData]]\"\n        default-empty-data=\"{{defaultEmptyData}}\">\n    </px-vis-highlight-line>",
      "summary": "",
      "path": "px-vis-highlight-line.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshairData",
          "type": "Object",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generatingCrosshairData",
          "type": "string",
          "description": "Bool indicating if interaction space is currently generating data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshairPixelSearch",
          "type": "number",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "axes",
          "type": "Array",
          "description": "An optional dev set array to specify which dimensions to plot",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "An array of dimensions which the chart uses.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "A string specifying which key to use as the series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "differentDataset",
          "type": "boolean",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "type": "number",
          "description": "The amount +/- around the datapoint",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\"",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layersToMask",
          "type": "Array",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "drawWithLocalCrosshairData",
          "type": "boolean",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "_highlightData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2828,
              "column": 4
            },
            "end": {
              "line": 2831,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "parallelCoordinates",
          "type": "boolean",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2837,
              "column": 4
            },
            "end": {
              "line": 2840,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "radialLine",
          "type": "boolean",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2845,
              "column": 4
            },
            "end": {
              "line": 2848,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        }
      ],
      "methods": [
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_resetTooltipData",
          "description": "Helper function called on mouseout\nresets tooltipData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2522,
              "column": 2
            },
            "end": {
              "line": 2552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_createTooltipDataStub",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2554,
              "column": 2
            },
            "end": {
              "line": 2567,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "timestamp"
            },
            {
              "name": "showTooltip"
            }
          ],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_calcDataset",
          "description": "Determines if we should do a regular binary search or a fuzzy binary search",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2625,
              "column": 2
            },
            "end": {
              "line": 2656,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_generateSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2659,
              "column": 2
            },
            "end": {
              "line": 2695,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_setTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2697,
              "column": 2
            },
            "end": {
              "line": 2710,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_muteDataSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2787,
              "column": 2
            },
            "end": {
              "line": 2801,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightSvgShared"
        },
        {
          "name": "_addTransition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2803,
              "column": 2
            },
            "end": {
              "line": 2815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightSvgShared"
        },
        {
          "name": "_computeChartData",
          "description": "Draws the crosshair elements and sets up listeners and callbacks on chart hover\nSets the crosshairData property which gets passed to the register.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2857,
              "column": 2
            },
            "end": {
              "line": 2895,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_setTooltipDataMultiLine",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2898,
              "column": 2
            },
            "end": {
              "line": 2912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_resetMultilineTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2914,
              "column": 2
            },
            "end": {
              "line": 2925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_createMultilineTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2927,
              "column": 2
            },
            "end": {
              "line": 3001,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            },
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "reDrawElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 83,
          "column": 10
        },
        "end": {
          "line": 110,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshair-data",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generating-crosshair-data",
          "description": "Bool indicating if interaction space is currently generating data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshair-pixel-search",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "axes",
          "description": "An optional dev set array to specify which dimensions to plot",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "description": "An array of dimensions which the chart uses.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "series-key",
          "description": "A string specifying which key to use as the series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "different-dataset",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "description": "The amount +/- around the datapoint",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layers-to-mask",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "draw-with-local-crosshair-data",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "parallel-coordinates",
          "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2837,
              "column": 4
            },
            "end": {
              "line": 2840,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "radial-line",
          "description": "A dev set boolean specifying if the line is using radial(polar) data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2845,
              "column": 4
            },
            "end": {
              "line": 2848,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightLineShared"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "crosshair-data-changed",
          "description": "Fired when the `crosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "generating-crosshair-data-changed",
          "description": "Fired when the `generatingCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "draw-with-local-crosshair-data-changed",
          "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-highlight-line"
    },
    {
      "description": "### Usage\n\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data=\"{{chartData}}\"\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      domain-changed=\"{{domainChanged}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scatter-canvas\n      svg=\"[[svg]]\"\n      series-id=\"mySeries\"\n      complete-series-config=\"[[seriesConfig]]\"\n      chart-data=\"[[chartData]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-scatter-canvas>",
      "summary": "",
      "path": "px-vis-scatter-canvas.html",
      "properties": [
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "lineRadiusLimit",
          "type": "number",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "type": "Object",
          "description": "A holder object for the line generator",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "serieToRedrawOnTop",
          "type": "Array",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2362,
              "column": 4
            },
            "end": {
              "line": 2365,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "markerMapping",
          "type": "Object",
          "description": "Maps dev input marker string to d3 symbols.\n\nTo add additional, custom icons, provide a draw function wrapped in an object and draw your shape using canvas drawing methods. See 'bar' or 'x' as examples",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1750,
              "column": 4
            },
            "end": {
              "line": 1803,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerSymbol",
          "type": "string",
          "description": "The symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\nThis property will be read from the completeSeriesConfig\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1822,
              "column": 4
            },
            "end": {
              "line": 1824,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerScale",
          "type": "number",
          "description": "Scales the size of the scatter marker\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1829,
              "column": 4
            },
            "end": {
              "line": 1831,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerSize",
          "type": "number",
          "description": "the size of the markers\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1836,
              "column": 4
            },
            "end": {
              "line": 1838,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerFillOpacity",
          "type": "number",
          "description": "The opacity of the fill (inside) of the marker\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1843,
              "column": 4
            },
            "end": {
              "line": 1845,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerStrokeOpacity",
          "type": "number",
          "description": "The opacity of the stroke (outside) of the marker\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1850,
              "column": 4
            },
            "end": {
              "line": 1852,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "mutedOpacity",
          "type": "number",
          "description": "the opacity value of the fill to be used when muting a serie (stroke is not drawn on mute)\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1857,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "rendererType",
          "type": "string",
          "description": "Type of renderer this drawing element should be using. Determines on what\ncondition the element is going to be drawn\n- chartData\n- filteredChartData\n- highlightData",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3136,
              "column": 4
            },
            "end": {
              "line": 3139,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"chartData\"",
          "inheritedFrom": "PxVisBehavior.rendererType"
        },
        {
          "name": "clipPath",
          "type": "boolean",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "seriesNumber",
          "type": "number",
          "description": "The index of the series, used for calculating its color.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data. Used for non-timeseries charts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\""
        },
        {
          "name": "_currentDrawingOptions",
          "type": "Object",
          "description": "Options currently in use for drawing scatter: opacity, symbol, drawing function, etc.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_defineRadialLine",
          "description": "Defines a multi-scale d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1281,
              "column": 2
            },
            "end": {
              "line": 1368,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            },
            {
              "name": "multiLine"
            },
            {
              "name": "counterClockwise"
            },
            {
              "name": "useDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 142,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "initializeDrawingSession",
          "description": "Defines the appropriate line and symbol generators,\nand updates drawing variables: opacity, colors, etc.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 4
            },
            "end": {
              "line": 155,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_initiateDrawingOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 191,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawClipPath",
          "description": "Draws a clip path for the canvas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 220,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderOneBatch",
          "description": "Renders one batch of scatter data (can be one batch during progressive rendering\nor all data during render at once).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 267,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "stop"
            }
          ]
        },
        {
          "name": "_getTransform",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 302,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_isSerieMuted",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 57,
          "column": 10
        },
        "end": {
          "line": 311,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "line-radius-limit",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "description": "A holder object for the line generator",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "serie-to-redraw-on-top",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "marker-mapping",
          "description": "Maps dev input marker string to d3 symbols.\n\nTo add additional, custom icons, provide a draw function wrapped in an object and draw your shape using canvas drawing methods. See 'bar' or 'x' as examples",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1750,
              "column": 4
            },
            "end": {
              "line": 1803,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-symbol",
          "description": "The symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\nThis property will be read from the completeSeriesConfig\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1822,
              "column": 4
            },
            "end": {
              "line": 1824,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-scale",
          "description": "Scales the size of the scatter marker\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1829,
              "column": 4
            },
            "end": {
              "line": 1831,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-size",
          "description": "the size of the markers\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1836,
              "column": 4
            },
            "end": {
              "line": 1838,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-fill-opacity",
          "description": "The opacity of the fill (inside) of the marker\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1843,
              "column": 4
            },
            "end": {
              "line": 1845,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-stroke-opacity",
          "description": "The opacity of the stroke (outside) of the marker\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1850,
              "column": 4
            },
            "end": {
              "line": 1852,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "muted-opacity",
          "description": "the opacity value of the fill to be used when muting a serie (stroke is not drawn on mute)\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1857,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "renderer-type",
          "description": "Type of renderer this drawing element should be using. Determines on what\ncondition the element is going to be drawn\n- chartData\n- filteredChartData\n- highlightData",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3136,
              "column": 4
            },
            "end": {
              "line": 3139,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.rendererType"
        },
        {
          "name": "clip-path",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "series-number",
          "description": "The index of the series, used for calculating its color.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 98,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "radial",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 106,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data. Used for non-timeseries charts.",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-scatter-canvas"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-interaction-space\n        ...\n        generating-crosshair-data=\"{{generatingCrosshairData}}\"\n        crosshair-data=\"{{crosshairData}}\">\n    </px-vis-interaction-space>\n\n    <px-vis-highlight-point-canvas\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        domain-changed=\"[[domainChanged]]\"\n        time-data=\"[[key]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        chart-data=\"[[chartData]]\"\n        generating-crosshair-data=\"[[generatingCrosshairData]]\"\n        crosshair-data=\"[[crosshairData]]\">\n    </px-vis-highlight-point-canvas>",
      "summary": "",
      "path": "px-vis-highlight-point-canvas.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshairData",
          "type": "Object",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generatingCrosshairData",
          "type": "string",
          "description": "Bool indicating if interaction space is currently generating data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshairPixelSearch",
          "type": "number",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "clipPath",
          "type": "boolean",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "seriesKeys",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_mutedCompleteSeriesConfig",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 507,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_nonMutedSeriesKeys",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 508,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "differentDataset",
          "type": "boolean",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "type": "number",
          "description": "The amount +/- around the datapoint",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\"",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layersToMask",
          "type": "Array",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "drawWithLocalCrosshairData",
          "type": "boolean",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "_highlightData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 101,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_computeNonMutedSeriesKeys",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 514,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeMutedCompleteSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 531,
              "column": 2
            },
            "end": {
              "line": 553,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "hardMute"
            },
            {
              "name": "mutedSeries"
            }
          ],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_resetTooltipData",
          "description": "Helper function called on mouseout\nresets tooltipData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2522,
              "column": 2
            },
            "end": {
              "line": 2552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_createTooltipDataStub",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2554,
              "column": 2
            },
            "end": {
              "line": 2567,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "timestamp"
            },
            {
              "name": "showTooltip"
            }
          ],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_calcDataset",
          "description": "Determines if we should do a regular binary search or a fuzzy binary search",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2625,
              "column": 2
            },
            "end": {
              "line": 2656,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_generateSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2659,
              "column": 2
            },
            "end": {
              "line": 2695,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_setTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2697,
              "column": 2
            },
            "end": {
              "line": 2710,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_muteDataSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2728,
              "column": 2
            },
            "end": {
              "line": 2744,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightCanvasShared"
        },
        {
          "name": "_addTransition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2746,
              "column": 2
            },
            "end": {
              "line": 2758,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightCanvasShared"
        },
        {
          "name": "_requestCanvasCreation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2760,
              "column": 2
            },
            "end": {
              "line": 2768,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightCanvasShared"
        },
        {
          "name": "_computeChartData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "seriesId"
            },
            {
              "name": "config"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 71,
          "column": 10
        },
        "end": {
          "line": 168,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshair-data",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generating-crosshair-data",
          "description": "Bool indicating if interaction space is currently generating data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshair-pixel-search",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "clip-path",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "series-keys",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 105,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "different-dataset",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "description": "The amount +/- around the datapoint",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layers-to-mask",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "draw-with-local-crosshair-data",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "radial",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude)",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "crosshair-data-changed",
          "description": "Fired when the `crosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "generating-crosshair-data-changed",
          "description": "Fired when the `generatingCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "draw-with-local-crosshair-data-changed",
          "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-highlight-point-canvas"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-interaction-space\n        ...\n        generating-crosshair-data=\"{{generatingCrosshairData}}\"\n        crosshair-data=\"{{crosshairData}}\">\n    </px-vis-interaction-space>\n\n    <px-vis-highlight-point\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        domain-changed=\"[[domainChanged]]\"\n        time-data=\"[[key]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        chart-data=\"[[chartData]]\"\n        generating-crosshair-data=\"[[generatingCrosshairData]]\"\n        crosshair-data=\"[[crosshairData]]\">\n    </px-vis-highlight-point>",
      "summary": "",
      "path": "px-vis-highlight-point.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshairData",
          "type": "Object",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generatingCrosshairData",
          "type": "string",
          "description": "Bool indicating if interaction space is currently generating data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshairPixelSearch",
          "type": "number",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "seriesKeys",
          "type": "Array",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "_mutedCompleteSeriesConfig",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 507,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_nonMutedSeriesKeys",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 508,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "differentDataset",
          "type": "boolean",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "type": "number",
          "description": "The amount +/- around the datapoint",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\"",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layersToMask",
          "type": "Array",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "drawWithLocalCrosshairData",
          "type": "boolean",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "_highlightData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_cursor",
          "type": "Object",
          "description": "Holder for the cursor drawing objects",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_circles",
          "type": "Object",
          "description": "Holder for the crosshair circle drawing objects",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 6
            },
            "end": {
              "line": 101,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Whether the scatter plot is using radial coiordinates (x=phase, y=amplitude)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeNonMutedSeriesKeys",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 514,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeMutedCompleteSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 531,
              "column": 2
            },
            "end": {
              "line": 553,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "hardMute"
            },
            {
              "name": "mutedSeries"
            }
          ],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_resetTooltipData",
          "description": "Helper function called on mouseout\nresets tooltipData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2522,
              "column": 2
            },
            "end": {
              "line": 2552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_createTooltipDataStub",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2554,
              "column": 2
            },
            "end": {
              "line": 2567,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "timestamp"
            },
            {
              "name": "showTooltip"
            }
          ],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_calcDataset",
          "description": "Determines if we should do a regular binary search or a fuzzy binary search",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2625,
              "column": 2
            },
            "end": {
              "line": 2656,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_generateSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2659,
              "column": 2
            },
            "end": {
              "line": 2695,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_setTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2697,
              "column": 2
            },
            "end": {
              "line": 2710,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataset"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "_muteDataSeries",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2787,
              "column": 2
            },
            "end": {
              "line": 2801,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehavior.highlightSvgShared"
        },
        {
          "name": "_addTransition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2803,
              "column": 2
            },
            "end": {
              "line": 2815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.highlightSvgShared"
        },
        {
          "name": "calcPixelCoordForRadial",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1690,
              "column": 2
            },
            "end": {
              "line": 1702,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "amp"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "whichVal"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.radialPixelCalc"
        },
        {
          "name": "adjustAngleForPolarChart",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1704,
              "column": 2
            },
            "end": {
              "line": 1727,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.radialPixelCalc"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws the crosshair elements and sets up listeners and callbacks on chart hover\nSets the crosshairData property which gets passed to the register.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createCircles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 235,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_addClipPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 251,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getXKey",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 4
            },
            "end": {
              "line": 256,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 52,
          "column": 10
        },
        "end": {
          "line": 257,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "crosshair-data",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generating-crosshair-data",
          "description": "Bool indicating if interaction space is currently generating data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshair-pixel-search",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "series-keys",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "different-dataset",
          "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2584,
              "column": 4
            },
            "end": {
              "line": 2587,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "fuzz",
          "description": "The amount +/- around the datapoint",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2592,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2600,
              "column": 4
            },
            "end": {
              "line": 2603,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "layers-to-mask",
          "description": "The layers where the series are drawn if you want them to mute on crosshair data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "draw-with-local-crosshair-data",
          "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2615,
              "column": 4
            },
            "end": {
              "line": 2619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "radial",
          "description": "Whether the scatter plot is using radial coiordinates (x=phase, y=amplitude)",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "crosshair-data-changed",
          "description": "Fired when the `crosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "generating-crosshair-data-changed",
          "description": "Fired when the `generatingCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "draw-with-local-crosshair-data-changed",
          "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.highlightShared"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-highlight-point"
    },
    {
      "description": "Sets the tooltipData property, which can then be used to share adjacent datapoint values with other components, such as the register.\n\n### Usage\n\n    <px-vis-interaction-space\n        svg=\"[[svg]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        chart-data=\"[[chartData]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        tooltip-data=\"{{tooltipData}}\"\n        extents-data=\"{{extentsData}}\">\n    </px-vis-interaction-space>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n:----------------|:-------------|----------\n  `--px-vis-zoom-brush-outline-color` | The stroke (border) color for the on-chart zoom/selection brush | `$grey6`\n  `--px-vis-zoom-brush-fill-color` | The fill (background) color for the on-chart zoom/selection brush | `$gray2`\n  `--px-vis-zoom-brush-fill-opacity` | The opacity for the on-chart zoom/selection brush | `0.5`\n\n  `--px-vis-lasso-outline-color` | The stroke (border) color for the on-chart lasso selection | `$grey12`\n  `--px-vis-lasso-fill-color` | The fill (background) color for the on-chart lasso selection | `none`\n  `--px-vis-lasso-fill-opacity` | The opacity for the on-chart lasso selection | `0.5`",
      "summary": "",
      "path": "px-vis-interaction-space.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "crosshairData",
          "type": "Object",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generatingCrosshairData",
          "type": "string",
          "description": "Bool indicating if interaction space is currently generating data",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshairPixelSearch",
          "type": "number",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "extentsData",
          "type": "Object",
          "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 771,
              "column": 4
            },
            "end": {
              "line": 774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "extentsAction",
          "type": "string",
          "description": "Used by the chart to interpret if extentsData is strip or zoom",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 778,
              "column": 4
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "selectionType",
          "type": "string",
          "description": "The zoom selection type:\n- xy\n- xAxis\n- yAxis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2295,
              "column": 4
            },
            "end": {
              "line": 2299,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "\"xy\"",
          "inheritedFrom": "PxVisBehavior.selectionType"
        },
        {
          "name": "seriesKeys",
          "type": "Array",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events.\nEach key represents an event, each value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{\"mousedown\":\"startZooming\",\"mouseup\":\"stopZooming\",\"mouseout\":\"resetTooltip\",\"mousemove\":\"calcTooltipData\"}"
        },
        {
          "name": "preventWebWorkerSynchronization",
          "type": "boolean",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3028,
              "column": 6
            },
            "end": {
              "line": 3031,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "wwDataSyncCounter",
          "type": "number",
          "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3052,
              "column": 4
            },
            "end": {
              "line": 3055,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
        },
        {
          "name": "_meta",
          "type": "!Polymer.IronMeta",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1880,
              "column": 4
            },
            "end": {
              "line": 1882,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_iconSize",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1884,
              "column": 4
            },
            "end": {
              "line": 1887,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "16",
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_iconScale",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1889,
              "column": 4
            },
            "end": {
              "line": 1892,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "16",
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_isLassoing",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_lassoDrawing",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_lassoGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_lassoCoords",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 30,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_lassoCrosshairData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"rawData\":[],\"timeStamps\":[]}",
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_lassoGenerator",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "resetLassoData",
          "type": "boolean",
          "description": "When switched clears all the previous selection made\n(in _lassoCrosshairData)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_resetLasso\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_rect",
          "type": "Object",
          "description": "Holder for the interaction rectangle object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_actionArea",
          "type": "Object",
          "description": "An object that contains meta data for the area drawn by the user.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "mouseRect",
          "type": "Object",
          "description": "The actual mouse svg rectangle which can be used to activate the tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data. Used for non timeseries charts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\""
        },
        {
          "name": "actionMapping",
          "type": "Object",
          "description": "Set of predefined actions that can be used out of the box.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{\"startZooming\":\"_startZooming\",\"stopZooming\":\"_finishActionBox\",\"startStriping\":\"_startStriping\",\"stopStriping\":\"_finishActionBox\",\"calcTooltipData\":\"_calcTooltipData\",\"calcCrosshairData\":\"_calcCrosshairData\",\"calcTooltipAndCrosshairData\":\"_calcTooltipAndCrosshairData\",\"resetTooltipAndCrosshairData\":\"_resetTooltipAndCrosshairData\",\"resetTooltip\":\"_resetTooltipData\",\"resetCrosshair\":\"_resetCrosshairData\",\"startPanning\":\"_startPanning\",\"stopPanning\":\"_stopPanning\",\"reportMouseCoords\":\"_reportMouseCoords\",\"startLasso\":\"_startLasso\",\"stopLasso\":\"_stopLasso\"}"
        },
        {
          "name": "_panningStartVal",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "showTooltip",
          "type": "boolean",
          "description": "If false, will pass `hidden: true` in the tooltip data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_calculatingData",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_calcTooltip",
          "type": "boolean",
          "description": "Whether tooltip data is currently being searched for.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_calcCrosshair",
          "type": "boolean",
          "description": "Whether crosshair data is currently being searched for.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 226,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "searchRadius",
          "type": "number",
          "description": "The search radius for quadtree searches. Only points inside this radius will be returned.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "chartId",
          "type": "string",
          "description": "Unique ID of the chart owning this interaction space.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 239,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "searchType",
          "type": "string",
          "description": "the crosshair search: closestPoint, pointPerSeries, allInArea, polygon",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"closestPoint\""
        },
        {
          "name": "_cursor",
          "type": "Object",
          "description": "Holder for the cursor drawing objects.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 257,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_icon",
          "type": "Object",
          "description": "Holder for the icon drawing object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_cursorGroup",
          "type": "Object",
          "description": "Holder for the drawing object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 6
            },
            "end": {
              "line": 271,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lastIcon",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 6
            },
            "end": {
              "line": 276,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"none\""
        },
        {
          "name": "_lastCursor",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"none\""
        },
        {
          "name": "iconType",
          "type": "string",
          "description": "Name of the icon type.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"none\""
        },
        {
          "name": "cursorType",
          "type": "string",
          "description": "Type of cursor drawing to add:\n - 'none' : default\n - 'crosshair' : draws vertical and horizontal line\n - 'circle' : draws circle of size radius",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 299,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"none\""
        },
        {
          "name": "useQuadtree",
          "type": "boolean",
          "description": "Boolean specifying if a quadtree should be created and used for searching.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_originalBoxCoords",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 321,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_height",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 6
            },
            "end": {
              "line": 322,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_width",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_setupRegularActions",
          "description": "Set up normal listener actions",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2432,
              "column": 2
            },
            "end": {
              "line": 2488,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d3Elem"
            },
            {
              "name": "elem"
            },
            {
              "name": "dontDoUpDown"
            }
          ],
          "inheritedFrom": "PxVisBehavior.applyActionConfig"
        },
        {
          "name": "_resetTooltipData",
          "description": "Helper function called on mouseout\nresets tooltipData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2522,
              "column": 2
            },
            "end": {
              "line": 2552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_createTooltipDataStub",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2554,
              "column": 2
            },
            "end": {
              "line": 2567,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "timestamp"
            },
            {
              "name": "showTooltip"
            }
          ],
          "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
        },
        {
          "name": "_getIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1895,
              "column": 2
            },
            "end": {
              "line": 1921,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "iconName"
            },
            {
              "name": "targetSize"
            },
            {
              "name": "defaultKey"
            },
            {
              "name": "defaultName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_calcIconScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1923,
              "column": 2
            },
            "end": {
              "line": 1925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "size"
            },
            {
              "name": "targetSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_drawCursorIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1942,
              "column": 2
            },
            "end": {
              "line": 1960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.cursorIcon"
        },
        {
          "name": "_positionCursorIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1962,
              "column": 2
            },
            "end": {
              "line": 1970,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.cursorIcon"
        },
        {
          "name": "_resetLasso",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_startLasso",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_updateLasso",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 121,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "first"
            }
          ],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_updateCoordsCartesian",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 134,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_updateCoordsRadial",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 136,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_updateCoordsTS",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 166,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_constrainOnWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 176,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xVal"
            }
          ],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "_stopLasso",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 178,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "attached",
          "description": "When attached, re-fire set properties for precipitation pattern.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 351,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws the tooltip elements and sets up listeners and callbacks on chart hover.\nSets the tooltipData property, which gets passed to the register.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 410,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_startStriping",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_startZooming",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawCursorGroup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 428,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawCursor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 481,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateRadius",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 4
            },
            "end": {
              "line": 495,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 497,
              "column": 4
            },
            "end": {
              "line": 501,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_updateCursor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 4
            },
            "end": {
              "line": 520,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hideCursor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 525,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setupActions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 4
            },
            "end": {
              "line": 535,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetTooltipDataLegacy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 537,
              "column": 4
            },
            "end": {
              "line": 545,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetTooltipAndCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 547,
              "column": 4
            },
            "end": {
              "line": 550,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 4
            },
            "end": {
              "line": 563,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTooltipAndCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 565,
              "column": 4
            },
            "end": {
              "line": 570,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 572,
              "column": 4
            },
            "end": {
              "line": 577,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 579,
              "column": 4
            },
            "end": {
              "line": 584,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcData",
          "description": "Helper function called on mousemove.\nCalculates the mouse position and associated x & y values,\nthen sets the d3 elements and sets tooltipData for consumption elsewhere.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 593,
              "column": 4
            },
            "end": {
              "line": 610,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcDataFinished",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 612,
              "column": 4
            },
            "end": {
              "line": 660,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataObj"
            }
          ]
        },
        {
          "name": "_getDataForAllSeries",
          "description": "Searches through all data series, then compiles and returns the tooltip data object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 665,
              "column": 4
            },
            "end": {
              "line": 700,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_searchOnWebWorker",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 702,
              "column": 4
            },
            "end": {
              "line": 726,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "dataObj"
            }
          ]
        },
        {
          "name": "_returnTooltipDataStub",
          "description": "Returns the starter dataObj which data will be added to.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 733,
              "column": 4
            },
            "end": {
              "line": 735,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "x1"
            }
          ]
        },
        {
          "name": "_calcSerieData",
          "description": "Returns the tooltipData values for a single series.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 742,
              "column": 4
            },
            "end": {
              "line": 793,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataObj"
            },
            {
              "name": "searchTimeStamp"
            },
            {
              "name": "closestTimestamp"
            },
            {
              "name": "x1"
            },
            {
              "name": "k"
            },
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_searchTimeData",
          "description": "Gets the data for timeseries type datasets.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 800,
              "column": 4
            },
            "end": {
              "line": 874,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x1"
            },
            {
              "name": "k"
            },
            {
              "name": "xKey"
            },
            {
              "name": "yKey"
            },
            {
              "name": "dataObj"
            }
          ]
        },
        {
          "name": "_searchContinuousData",
          "description": "Iterates through all the data and returns the closest datapoints\nfor all non-timeseries, non-ordinal data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 882,
              "column": 4
            },
            "end": {
              "line": 986,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "searchTimeStamp"
            },
            {
              "name": "closestTimestamp"
            },
            {
              "name": "mousePos"
            },
            {
              "name": "xKey"
            },
            {
              "name": "yKey"
            },
            {
              "name": "axisKey"
            },
            {
              "name": "dataObj"
            }
          ]
        },
        {
          "name": "_getOrdinalValue",
          "description": "Tries to find the ordinal value for the mouse position on the X (xAxis=true)\nor Y (xAxis=false) axis. If searching on X axis, mousePos must be the X value;\nif searching on the Y axis, mousePos must be the Y value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 995,
              "column": 4
            },
            "end": {
              "line": 1029,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxis"
            },
            {
              "name": "mousePos"
            },
            {
              "name": "axisKey"
            }
          ]
        },
        {
          "name": "_getOrdinalRange",
          "description": "Gets the range of all ordinal values between from and to (both being values of the axis).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1036,
              "column": 4
            },
            "end": {
              "line": 1051,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxis"
            },
            {
              "name": "from"
            },
            {
              "name": "to"
            }
          ]
        },
        {
          "name": "_getClosestValue",
          "description": "Gets the closest value on the X (xAxis=true) or Y axis (xAxis=false)\nfor a specific ordinal value defined on the other axis.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1081,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxis"
            },
            {
              "name": "value"
            },
            {
              "name": "data"
            },
            {
              "name": "xKey"
            },
            {
              "name": "yKey"
            },
            {
              "name": "ordValue"
            }
          ]
        },
        {
          "name": "_mouseUpOutsideSvg",
          "description": "Helper function called on document.mouseup.\nAssumes the user wanted to 'close' the action box, and calls _finishActionBox.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1088,
              "column": 4
            },
            "end": {
              "line": 1090,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_startPanning",
          "description": "Initiate Panning action",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1094,
              "column": 4
            },
            "end": {
              "line": 1116,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_initializePanningRadial",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1118,
              "column": 4
            },
            "end": {
              "line": 1121,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_initializePanning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1123,
              "column": 4
            },
            "end": {
              "line": 1138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_updatePanning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1140,
              "column": 4
            },
            "end": {
              "line": 1152,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updatePanningCoordsRadial",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1154,
              "column": 4
            },
            "end": {
              "line": 1161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_updatePanningCoords",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1163,
              "column": 4
            },
            "end": {
              "line": 1213,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_adjustOrdinalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1215,
              "column": 4
            },
            "end": {
              "line": 1230,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axis"
            },
            {
              "name": "mousePos"
            },
            {
              "name": "initialMousePos"
            }
          ]
        },
        {
          "name": "_stopPanning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1231,
              "column": 4
            },
            "end": {
              "line": 1241,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawActionBox",
          "description": "Helper function called on mousedown.action.\nDraws a rectangle on the chart.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1248,
              "column": 4
            },
            "end": {
              "line": 1291,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateActionBox",
          "description": "Helper function called on mousedown.action.\nUpdates the size of the action area rectangle.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1298,
              "column": 4
            },
            "end": {
              "line": 1361,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_finishActionBox",
          "description": "Helper function called on mouseup.action.\nGets the size of the action area rectangle, sets the extents, and removes it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1369,
              "column": 4
            },
            "end": {
              "line": 1426,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_reportMouseCoords",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1428,
              "column": 4
            },
            "end": {
              "line": 1432,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createQuadtreeData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1434,
              "column": 4
            },
            "end": {
              "line": 1460,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createBaseDataObjForWebWorker",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1462,
              "column": 4
            },
            "end": {
              "line": 1500,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": "TODO implement a dev setting to choose between only showing data at that x, snapping to nearest data, or interpolating value at x"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 10
        },
        "end": {
          "line": 1502,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "crosshair-data",
          "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 712,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "generating-crosshair-data",
          "description": "Bool indicating if interaction space is currently generating data",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 725,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "crosshair-pixel-search",
          "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 731,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "name": "extents-data",
          "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 771,
              "column": 4
            },
            "end": {
              "line": 774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "extents-action",
          "description": "Used by the chart to interpret if extentsData is strip or zoom",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 778,
              "column": 4
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "selection-type",
          "description": "The zoom selection type:\n- xy\n- xAxis\n- yAxis",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2295,
              "column": 4
            },
            "end": {
              "line": 2299,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.selectionType"
        },
        {
          "name": "series-keys",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events.\nEach key represents an event, each value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "prevent-web-worker-synchronization",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3028,
              "column": 6
            },
            "end": {
              "line": 3031,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "ww-data-sync-counter",
          "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3052,
              "column": 4
            },
            "end": {
              "line": 3055,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
        },
        {
          "name": "reset-lasso-data",
          "description": "When switched clears all the previous selection made\n(in _lassoCrosshairData)",
          "sourceRange": {
            "file": "px-vis-behavior-interaction.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorInteraction.lasso"
        },
        {
          "name": "mouse-rect",
          "description": "The actual mouse svg rectangle which can be used to activate the tooltip.",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data. Used for non timeseries charts.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "action-mapping",
          "description": "Set of predefined actions that can be used out of the box.",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "show-tooltip",
          "description": "If false, will pass `hidden: true` in the tooltip data.",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "radial",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "search-radius",
          "description": "The search radius for quadtree searches. Only points inside this radius will be returned.",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "chart-id",
          "description": "Unique ID of the chart owning this interaction space.",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 239,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "search-type",
          "description": "the crosshair search: closestPoint, pointPerSeries, allInArea, polygon",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "icon-type",
          "description": "Name of the icon type.",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "cursor-type",
          "description": "Type of cursor drawing to add:\n - 'none' : default\n - 'crosshair' : draws vertical and horizontal line\n - 'circle' : draws circle of size radius",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 299,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "use-quadtree",
          "description": "Boolean specifying if a quadtree should be created and used for searching.",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "crosshair-data-changed",
          "description": "Fired when the `crosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "generating-crosshair-data-changed",
          "description": "Fired when the `generatingCrosshairData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.crosshairData"
        },
        {
          "type": "CustomEvent",
          "name": "extents-data-changed",
          "description": "Fired when the `extentsData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "type": "CustomEvent",
          "name": "extents-action-changed",
          "description": "Fired when the `extentsAction` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "type": "CustomEvent",
          "name": "selection-type-changed",
          "description": "Fired when the `selectionType` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.selectionType"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-crosshair-data-generated",
          "description": "px-vis-crosshair-data-generated",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-interaction-space-start-panning",
          "description": "px-vis-interaction-space-start-panning",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-interaction-space-stop-panning",
          "description": "px-vis-interaction-space-stop-panning",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-interaction-svg-updated",
          "description": "px-vis-interaction-svg-updated",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-tooltip-updated",
          "description": "px-vis-tooltip-updated",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "mouse-rect-changed",
          "description": "Fired when the `mouseRect` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "action-config-changed",
          "description": "Fired when the `actionConfig` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-interaction-space"
    },
    {
      "description": "### Usage",
      "summary": "",
      "path": "px-vis-markers-tooltip-content.html",
      "properties": [
        {
          "name": "__localizationCache",
          "type": "Object",
          "description": "Internal singleton cache. This is the private implementation of the\nbehaviour; don't interact with it directly.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "language",
          "type": "string",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en\""
        },
        {
          "name": "resources",
          "type": "Object",
          "description": "List of keys & values used for translating this component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 7
            },
            "end": {
              "line": 89,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"en\":{\"Event\":\"Event\",\"Timestamp\":\"Timestamp\"}}"
        },
        {
          "name": "formats",
          "type": "Object",
          "description": "Optional dictionary of user defined formats, as explained here:\nhttp://formatjs.io/guides/message-syntax/#custom-formats\n\nFor example, a valid dictionary of formats would be:\nthis.formats = {\n   number: { USD: { style: 'currency', currency: 'USD' } }\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "useKeyIfMissing",
          "type": "boolean",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "localize",
          "type": "Function",
          "description": "Translates a string to the current `language`. Any parameters to the\nstring should be passed in order, as follows:\n`localize(stringKey, param1Name, param1Value, param2Name, param2Value)`",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "bubbleEvent",
          "type": "boolean",
          "description": "If true, will bubble up the event to the parents",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "firstDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"HH:mm:ss ZZ\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "secondDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"DD MMM YYYY\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "type": "string",
          "description": "Defines a separator character between the two datetime strings.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"|\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "type": "string",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"utc\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "markerData",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "markerConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "markerTypes",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_eventType",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 6
            },
            "end": {
              "line": 112,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_value",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_additionalInfo",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "tooltipDataResult",
          "type": "Array",
          "description": "List of tooltips that can be displayed for current marker",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_multipleTooltips",
          "type": "boolean",
          "description": "Whether the tooltips we are displaying can have several values (markers)\non top of each other",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_currentTooltipIndex",
          "type": "number",
          "description": "Index of the current tooltip we are displaying (relative to tooltipDataResult)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "loadResources",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__computeLocalize",
          "description": "Returns a computed `localize` method, based on the current `language`.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 247,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "language"
            },
            {
              "name": "resources"
            },
            {
              "name": "formats"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__onRequestResponse",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 249,
              "column": 2
            },
            "end": {
              "line": 252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__onRequestError",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "__checkLocalizationCache",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 266,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "proto"
            }
          ],
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "formatTimestamp",
          "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "timezone"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "formatedDatetimeString"
          },
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "_dataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 4
            },
            "end": {
              "line": 155,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeMultipleTooltips",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_findMarkerType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_updateTooltipInfo",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_previousTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_nextTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_formatTimestampForType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 229,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_leftDisabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 4
            },
            "end": {
              "line": 233,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_rightDisabled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 48,
          "column": 10
        },
        "end": {
          "line": 238,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "language",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "resources",
          "description": "List of keys & values used for translating this component.",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 7
            },
            "end": {
              "line": 89,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "formats",
          "description": "Optional dictionary of user defined formats, as explained here:\nhttp://formatjs.io/guides/message-syntax/#custom-formats\n\nFor example, a valid dictionary of formats would be:\nthis.formats = {\n   number: { USD: { style: 'currency', currency: 'USD' } }\n}",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "use-key-if-missing",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "localize",
          "description": "Translates a string to the current `language`. Any parameters to the\nstring should be passed in order, as follows:\n`localize(stringKey, param1Name, param1Value, param2Name, param2Value)`",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "bubble-event",
          "description": "If true, will bubble up the event to the parents",
          "sourceRange": {
            "file": "bower_components/app-localize-behavior/app-localize-behavior.html",
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 171,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "name": "first-date-time-format",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "second-date-time-format",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "description": "Defines a separator character between the two datetime strings.",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "marker-data",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 67,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "marker-config",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "marker-types",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "tooltip-data-result",
          "description": "List of tooltips that can be displayed for current marker",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "app-localize-resources-error",
          "description": "app-localize-resources-error",
          "metadata": {},
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "app-localize-resources-loaded",
          "description": "app-localize-resources-loaded",
          "metadata": {},
          "inheritedFrom": "Polymer.AppLocalizeBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-markers-tooltip-content"
    },
    {
      "description": "### Usage\n\n    <px-vis-svg\n        ...\n        svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scale\n        ...\n        x=\"{{x}}\"\n        y=\"{{y}}\"\n        domain-changed=\"{{domainChanged}}\">\n    </px-vis-scale>\n    <px-vis-interaction-space\n        ...\n        generating-crosshair-data=\"{{generatingCrosshairData}}\"\n        crosshair-data=\"{{crosshairData}}\">\n    </px-vis-interaction-space>\n\n    <px-vis-markers\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        domain-changed=\"[[domainChanged]]\"\n        time-data=\"[[key]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        chart-data=\"[[chartData]]\"\n        generating-crosshair-data=\"[[generatingCrosshairData]]\"\n        crosshair-data=\"[[crosshairData]]\">\n    </px-vis-markers>",
      "summary": "",
      "path": "px-vis-markers.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "markerConfig",
          "type": "Object",
          "description": "Configuration object to define what marker should map to what icon, color, and row.\nThe object has a key being the marker name, the value being a configuration object for that marker. The configuration object has four properties:\n- `color`: A rgb color value for the fill or stroke.\n- `markerFillOpacity`: the opacity of the inside of the marker\n- `markerStrokeOpacity`: the opacity of the outside of the marker\n- `markerSymbol`: the symbol type; see below\n- `markerSize`: specifies the size of markers\n- `markerScale`: allows to scale the size of markers\n- `location`: \"top\" or \"bottom\"\n- `row`: the row number on the top or the bottom, starting at 0\n- `showTooltip`: whether a tooltip should be shown on hover\n- `firstDateTimeFormat`: used to format the date part of the timestamp in the tooltip\n- `secondDateTimeFormat`: used to format the time part of the timestamp in the tooltip\n- `separator`: symbol between date and time in the tooltip\n- `timezone`: timezone to use for the timestamp in the tooltip\n- `tooltipOrientation`: orientation of the tooltip: \"left\", \"right\", \"bottom\", \"top\"\n- `tooltipLabel`: label to be used in the tooltip for this type. If not defined the key\nof this type will be used (which should match 'label' in the markerData)\n\nThe symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'\n```\nExample: {\n  'myMarkerType':{\n      'fillColor': 'rgb(123,0,0)',\n      'markerFillOpacity': 0.5,\n      'markerSymbol': 'square',\n      'markerSize': 4,\n      'location': 'top',\n      'row': 1,\n      'priority': 10,\n      'showTooltip': true,\n      'firstDateTimeFormat': 'HH:mm:ss ZZ',\n      'secondDateTimeFormat': 'DD MMM YYYY',\n      'separator': '|',\n      'timezone': 'utc',\n      'tooltipOrientation': 'top'\n  }\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1453,
              "column": 4
            },
            "end": {
              "line": 1455,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.markers"
        },
        {
          "name": "_defaultMarkerConfig",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1456,
              "column": 4
            },
            "end": {
              "line": 1475,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"color\":\"rgb(123,123,123)\",\"markerStrokeOpacity\":0,\"markerSymbol\":\"square\",\"markerSize\":64,\"markerScale\":1,\"showTooltip\":true,\"firstDateTimeFormat\":\"HH:mm:ss ZZ\",\"secondDateTimeFormat\":\"DD MMM YYYY\",\"separator\":\"|\",\"timezone\":\"utc\",\"tooltipOrientation\":\"top\",\"priority\":0}",
          "inheritedFrom": "PxVisBehavior.markers"
        },
        {
          "name": "markerData",
          "type": "Array",
          "description": "Data representing the markers. Example:\n[\n   {\n     \"time\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"time\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"time\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"time\": 8,\n     \"label\": \"Default\"\n   }\n ]",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1497,
              "column": 4
            },
            "end": {
              "line": 1499,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.markers"
        },
        {
          "name": "_markerData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_markerConfig",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_markerTypes",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_topScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_bottomScale",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 6
            },
            "end": {
              "line": 135,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_topDomain",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "_bottomDomain",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 145,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "_canvas",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "tooltipDetectionRadius",
          "type": "number",
          "description": "how close to a point the mouse has to be before we show a tooltip",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "20"
        },
        {
          "name": "_tooltipPosition",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 6
            },
            "end": {
              "line": 162,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "resources",
          "type": "Object",
          "description": "List of keys & values used for translating this component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 7
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"en\":{\"Event\":\"Event\",\"Timestamp\":\"Timestamp\"}}"
        },
        {
          "name": "language",
          "type": "string",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en\""
        },
        {
          "name": "useKeyIfMissing",
          "type": "boolean",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_showTooltip",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_lockTooltip",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 6
            },
            "end": {
              "line": 205,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_tooltipDataResult",
          "type": "Array",
          "description": "List of tooltips that can be displayed for current marker",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_isSearchingTooltip",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_computeMarkerConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 256,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getFillOpacity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fill"
            },
            {
              "name": "stroke"
            }
          ]
        },
        {
          "name": "_computeMarkerData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_prepDataObject",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "types"
            }
          ]
        },
        {
          "name": "_requestCanvasCreation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createScales",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 326,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createScalesDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_returnDomain",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_returnMarkerData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_returnMargin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 400,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_redraw",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 4
            },
            "end": {
              "line": 419,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_mouseMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 421,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_searchTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 439,
              "column": 4
            },
            "end": {
              "line": 509,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d3Event"
            }
          ]
        },
        {
          "name": "_createTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 511,
              "column": 4
            },
            "end": {
              "line": 550,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_updateTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 4
            },
            "end": {
              "line": 595,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            },
            {
              "name": "pixelResult"
            },
            {
              "name": "dataResult"
            },
            {
              "name": "rowInfo"
            },
            {
              "name": "d3Event"
            }
          ]
        },
        {
          "name": "_findMarkerType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 598,
              "column": 4
            },
            "end": {
              "line": 610,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_mouseClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 612,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_mouseLeave",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 626,
              "column": 4
            },
            "end": {
              "line": 630,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkForTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 632,
              "column": 4
            },
            "end": {
              "line": 639,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getRowInfoForMouse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 641,
              "column": 4
            },
            "end": {
              "line": 673,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_findLabelsForRow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 675,
              "column": 4
            },
            "end": {
              "line": 688,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rowIndex"
            }
          ]
        },
        {
          "name": "_getCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 4
            },
            "end": {
              "line": 707,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 92,
          "column": 10
        },
        "end": {
          "line": 708,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "marker-config",
          "description": "Configuration object to define what marker should map to what icon, color, and row.\nThe object has a key being the marker name, the value being a configuration object for that marker. The configuration object has four properties:\n- `color`: A rgb color value for the fill or stroke.\n- `markerFillOpacity`: the opacity of the inside of the marker\n- `markerStrokeOpacity`: the opacity of the outside of the marker\n- `markerSymbol`: the symbol type; see below\n- `markerSize`: specifies the size of markers\n- `markerScale`: allows to scale the size of markers\n- `location`: \"top\" or \"bottom\"\n- `row`: the row number on the top or the bottom, starting at 0\n- `showTooltip`: whether a tooltip should be shown on hover\n- `firstDateTimeFormat`: used to format the date part of the timestamp in the tooltip\n- `secondDateTimeFormat`: used to format the time part of the timestamp in the tooltip\n- `separator`: symbol between date and time in the tooltip\n- `timezone`: timezone to use for the timestamp in the tooltip\n- `tooltipOrientation`: orientation of the tooltip: \"left\", \"right\", \"bottom\", \"top\"\n- `tooltipLabel`: label to be used in the tooltip for this type. If not defined the key\nof this type will be used (which should match 'label' in the markerData)\n\nThe symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'\n```\nExample: {\n  'myMarkerType':{\n      'fillColor': 'rgb(123,0,0)',\n      'markerFillOpacity': 0.5,\n      'markerSymbol': 'square',\n      'markerSize': 4,\n      'location': 'top',\n      'row': 1,\n      'priority': 10,\n      'showTooltip': true,\n      'firstDateTimeFormat': 'HH:mm:ss ZZ',\n      'secondDateTimeFormat': 'DD MMM YYYY',\n      'separator': '|',\n      'timezone': 'utc',\n      'tooltipOrientation': 'top'\n  }\n}\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1453,
              "column": 4
            },
            "end": {
              "line": 1455,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.markers"
        },
        {
          "name": "marker-data",
          "description": "Data representing the markers. Example:\n[\n   {\n     \"time\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"time\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"time\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"time\": 8,\n     \"label\": \"Default\"\n   }\n ]",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1497,
              "column": 4
            },
            "end": {
              "line": 1499,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.markers"
        },
        {
          "name": "tooltip-detection-radius",
          "description": "how close to a point the mouse has to be before we show a tooltip",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "resources",
          "description": "List of keys & values used for translating this component.",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 7
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "language",
          "description": "A valid IETF language tag as a string that will be\nused to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "use-key-if-missing",
          "description": "Use the key for localization if value for language is missing.\nShould always be true for Predix components.",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-markers"
    },
    {
      "description": "### Usage\n    <px-vis-axis-interaction-space\n        svg=\"[[svg]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        domain-changed=\"[[domainChanged]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        dimension=\"[[dimension]]\"\n        dimensions=\"[[dimensions]]\"\n        series-key=\"[[seriesKey]]\"\n        category-key=\"[[categoryKey]]\"\n        chart-data=\"[[chartData]]\"\n        muted-series=\"{{mutedSeries}}\"\n        radial=\"[[radial]]\"\n        center-offset=\"[[centerOffset]]\"\n        brush-to-remove=\"[[brushToRemove]]\"\n        brush-domains=\"[[brushDomains]]\"\n        drag-container-elem=\"[[dragContainerElem]]\"\n        cartesian-drag-behavior=\"[[cartesianDragBehavior]]\"\n        redraw-series=\"[[redrawSeries]]\"\n        dynamic-redraw=\"[[dynamicRedraw]]\"\n        action-config=\"[[actionConfig]]\">\n    </px-vis-axis-interaction-space>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n`--px-vis-axis-brush-outline-color` | The stroke (border) color for the brushed box on an axis\n`--px-vis-axis-brush-fill-color`  | The fill (background) color for the brushed box on an axis\n`--px-vis-axis-brush-fill-opacity`  | The opacity of the brushed box on an axis",
      "summary": "",
      "path": "px-vis-axis-interaction-space.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "combinedMutedSeries",
          "type": "Object",
          "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "centerOffset",
          "type": "number",
          "description": "Used in a radial chart to provide a hole in the center of the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1131,
              "column": 4
            },
            "end": {
              "line": 1135,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1872,
              "column": 4
            },
            "end": {
              "line": 1875,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.radial"
        },
        {
          "name": "redrawSeries",
          "type": "boolean",
          "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 848,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "redrawElems",
          "type": "Array",
          "description": "The accompanying array of series elements required to redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 852,
              "column": 4
            },
            "end": {
              "line": 855,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "dynamicRedraw",
          "type": "boolean",
          "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "axes",
          "type": "Array",
          "description": "An optional dev set array to specify which dimensions to plot",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "An array of dimensions which the chart uses.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "A string specifying which key to use as the series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "_dragging",
          "type": "Object",
          "description": "Holder for the axis currently being dragged",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorDrag.basicProps"
        },
        {
          "name": "dragBehavior",
          "type": "Object",
          "description": "A holder for the drag behavior",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"mousedown\":null,\"mouseup\":null,\"mouseout\":\"resetTooltip\",\"mousemove\":\"calcTooltipData\"}"
        },
        {
          "name": "_meta",
          "type": "!Polymer.IronMeta",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1880,
              "column": 4
            },
            "end": {
              "line": 1882,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_iconSize",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1884,
              "column": 4
            },
            "end": {
              "line": 1887,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "16",
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_iconScale",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1889,
              "column": 4
            },
            "end": {
              "line": 1892,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "16",
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 576,
              "column": 4
            },
            "end": {
              "line": 579,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"left\"",
          "inheritedFrom": "PxVisBehaviorD3.axisOrientation"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "extentsData",
          "type": "Object",
          "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 771,
              "column": 4
            },
            "end": {
              "line": 774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "extentsAction",
          "type": "string",
          "description": "Used by the chart to interpret if extentsData is strip or zoom",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 778,
              "column": 4
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "brushDomains",
          "type": "Object",
          "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3262,
              "column": 4
            },
            "end": {
              "line": 3267,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.brushDomains"
        },
        {
          "name": "dimension",
          "type": "string",
          "description": "The string identifier for the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_brushElem",
          "type": "Object",
          "description": "Holder object for the brush node",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 107,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_brushD3",
          "type": "Object",
          "description": "Holder object for the d3 selected brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_previousRange",
          "type": "Array",
          "description": "Holder for the original domain",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_brush",
          "type": "Object",
          "description": "Holder for the brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "brushToRemove",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "dragContainerElem",
          "type": "HTMLElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cartesianDragBehavior",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "specialActionsList",
          "type": "Array",
          "description": "Set of predefined actions that can be used out of the box",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 159,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"callAxisMute\",\"callAxisDrag\",\"startZooming\"]"
        },
        {
          "name": "brushActions",
          "type": "Object",
          "description": "set of actions which should display drawn brushes.\nKey is the actionConfig value\nvalue is the brushDomains key",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"callAxisMute\":\"muted\",\"startZooming\":\"zoom\"}"
        },
        {
          "name": "actionMapping",
          "type": "Object",
          "description": "set of predefined action that can be used out of the box",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{\"callAxisMute\":\"_startMute\",\"callAxisDrag\":\"_enableDrag\",\"calcTooltipData\":\"_calcTooltipData\",\"calcCrosshairData\":\"_calcCrosshairData\",\"calcTooltipAndCrosshairData\":\"_calcTooltipAndCrosshairData\",\"resetTooltipAndCrosshairData\":\"_resetTooltipAndCrosshairData\",\"resetTooltip\":\"_resetTooltipData\",\"resetCrosshair\":\"_resetCrosshairData\",\"startZooming\":\"_startZoom\",\"startPanning\":\"_startPanning\",\"stopPanning\":\"_stopPanning\"}"
        },
        {
          "name": "smallerSide",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_isDirty",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 6
            },
            "end": {
              "line": 223,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_panningLastVal",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 227,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_unselectedBrushHolder",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_position",
          "description": "helper function to calc the position of an axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorDrag.basicProps"
        },
        {
          "name": "transition",
          "description": "Defines our transition for axis snapping",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "g"
            }
          ],
          "inheritedFrom": "PxVisBehaviorDrag.basicProps"
        },
        {
          "name": "createParallelAxisDrag",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_onDragStart",
          "description": "When an axis starts being dragged",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_onDrag",
          "description": "When an axis is dragged",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_onDragEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 134,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_linearDrag",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_radialDrag",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 171,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_linearSort",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dims"
            },
            {
              "name": "d"
            },
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_radialSort",
          "description": "Sorting function for polar in a cartesian space",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dims"
            },
            {
              "name": "d"
            },
            {
              "name": "angle"
            }
          ],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "_radialOrLinear",
          "description": "Helper function to return either a rotate transform or translate transform",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 300,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.parallelAxisDrag"
        },
        {
          "name": "createCartesianDrag",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 329,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.cartesianDrag"
        },
        {
          "name": "_onCartesianDragStart",
          "description": "When an axis starts being dragged",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 340,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.cartesianDrag"
        },
        {
          "name": "_onCartesianDrag",
          "description": "When an axis is dragged",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 345,
              "column": 4
            },
            "end": {
              "line": 470,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.cartesianDrag"
        },
        {
          "name": "_onCartesianDragEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-axis-drag.html",
            "start": {
              "line": 471,
              "column": 4
            },
            "end": {
              "line": 483,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorDrag.cartesianDrag"
        },
        {
          "name": "_setupRegularActions",
          "description": "Set up normal listener actions",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2432,
              "column": 2
            },
            "end": {
              "line": 2488,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d3Elem"
            },
            {
              "name": "elem"
            },
            {
              "name": "dontDoUpDown"
            }
          ],
          "inheritedFrom": "PxVisBehavior.applyActionConfig"
        },
        {
          "name": "_getIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1895,
              "column": 2
            },
            "end": {
              "line": 1921,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "iconName"
            },
            {
              "name": "targetSize"
            },
            {
              "name": "defaultKey"
            },
            {
              "name": "defaultName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_calcIconScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1923,
              "column": 2
            },
            "end": {
              "line": 1925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "size"
            },
            {
              "name": "targetSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.icons"
        },
        {
          "name": "_drawCursorIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1942,
              "column": 2
            },
            "end": {
              "line": 1960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.cursorIcon"
        },
        {
          "name": "_positionCursorIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1962,
              "column": 2
            },
            "end": {
              "line": 1970,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mousePos"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.cursorIcon"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setDragBehavior",
          "description": "Creates the drag behavior based on whether it is a cartesian chart or a parallel/radar chart",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Creates the elements to listen to.\n\nFor simplicity, we just let d3.brush create the listener elements and control their size",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 4
            },
            "end": {
              "line": 307,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcRange",
          "description": "Calculates the range to pass to the brush, i.e. the size the brush will have",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 4
            },
            "end": {
              "line": 332,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createBrush",
          "description": "Creates the brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 361,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            }
          ]
        },
        {
          "name": "_resizeBrush",
          "description": "Resizes the brush elements",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 4
            },
            "end": {
              "line": 374,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            }
          ]
        },
        {
          "name": "_setBrushStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 376,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_translateBrush",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_styleBrushSelection",
          "description": "Adds or removes the dash style for the selection based on brushToRemove",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 417,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setupActions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 443,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setupSpecialActions",
          "description": "Set up the special d3 call function actions\nThese are d3 behaviors rather than simple mouse events",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 449,
              "column": 4
            },
            "end": {
              "line": 469,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_disableActions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 4
            },
            "end": {
              "line": 477,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_disableBrush",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 4
            },
            "end": {
              "line": 485,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_startMute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 487,
              "column": 4
            },
            "end": {
              "line": 491,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_startZoom",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 493,
              "column": 4
            },
            "end": {
              "line": 497,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_enableBrush",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 499,
              "column": 4
            },
            "end": {
              "line": 514,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_disableDrag",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_enableDrag",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 4
            },
            "end": {
              "line": 543,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_disableAllAction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 545,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_startPanning",
          "description": "Initiate Panning action",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 4
            },
            "end": {
              "line": 572,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updatePanning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 574,
              "column": 4
            },
            "end": {
              "line": 595,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_stopPanning",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 597,
              "column": 4
            },
            "end": {
              "line": 603,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getRange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 605,
              "column": 4
            },
            "end": {
              "line": 615,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetTooltipAndCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 620,
              "column": 4
            },
            "end": {
              "line": 623,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTooltipAndCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 625,
              "column": 4
            },
            "end": {
              "line": 630,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 632,
              "column": 4
            },
            "end": {
              "line": 637,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 4
            },
            "end": {
              "line": 644,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcHoverData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 4
            },
            "end": {
              "line": 655,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetTooltipData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 657,
              "column": 4
            },
            "end": {
              "line": 673,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resetCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 675,
              "column": 4
            },
            "end": {
              "line": 687,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcSerieData",
          "description": "Creates the tooltipData & crosshairData\n\nTakes the dimension (aid), the raw element, and the mouse position",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 694,
              "column": 4
            },
            "end": {
              "line": 730,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "aid"
            },
            {
              "name": "elem"
            },
            {
              "name": "mousePos"
            }
          ]
        },
        {
          "name": "_searchData",
          "description": "Determines if we want to keep some data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 736,
              "column": 4
            },
            "end": {
              "line": 765,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "aid"
            },
            {
              "name": "mouseVal"
            },
            {
              "name": "result"
            },
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_createTooltipData",
          "description": "Builds the tooltipData object from the results",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 771,
              "column": 4
            },
            "end": {
              "line": 822,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "aid"
            },
            {
              "name": "elem"
            },
            {
              "name": "mousePos"
            },
            {
              "name": "result"
            }
          ]
        },
        {
          "name": "_createCrosshairData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 824,
              "column": 4
            },
            "end": {
              "line": 830,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result"
            }
          ]
        },
        {
          "name": "brushstart",
          "description": "Stops event propagation on a brush start event",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 838,
              "column": 4
            },
            "end": {
              "line": 844,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "brushEnd",
          "description": "Final update on a brush end event",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 868,
              "column": 4
            },
            "end": {
              "line": 886,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkMinSize",
          "description": "Checks the min size of the brush and resizes if necessary",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 891,
              "column": 4
            },
            "end": {
              "line": 904,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sel"
            }
          ]
        },
        {
          "name": "_checkBrushSize",
          "description": "Checks that the brush size is valid and within the domain",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 909,
              "column": 4
            },
            "end": {
              "line": 945,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "domains"
            }
          ]
        },
        {
          "name": "_getNewBrushRange",
          "description": "On a resize or change, returns the new valid range for the brush",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 949,
              "column": 4
            },
            "end": {
              "line": 956,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d1"
            },
            {
              "name": "d2"
            }
          ]
        },
        {
          "name": "clearBrush",
          "description": "Deletes a brush and clears listeners",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 961,
              "column": 4
            },
            "end": {
              "line": 969,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "deleteAndClearBrush",
          "description": "Deletes a brush and clears listeners",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 974,
              "column": 4
            },
            "end": {
              "line": 978,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_showBrushes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 980,
              "column": 4
            },
            "end": {
              "line": 988,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_showBrushesDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 990,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_showUnselectedBrushes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1020,
              "column": 4
            },
            "end": {
              "line": 1028,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_showUnselectedBrushesDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1030,
              "column": 4
            },
            "end": {
              "line": 1067,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawCursorIconAndGroup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1069,
              "column": 4
            },
            "end": {
              "line": 1081,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateCursor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1083,
              "column": 4
            },
            "end": {
              "line": 1095,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hideCursor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1097,
              "column": 4
            },
            "end": {
              "line": 1104,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 10
        },
        "end": {
          "line": 1105,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "combined-muted-series",
          "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "center-offset",
          "description": "Used in a radial chart to provide a hole in the center of the chart",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1131,
              "column": 4
            },
            "end": {
              "line": 1135,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "name": "radial",
          "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1872,
              "column": 4
            },
            "end": {
              "line": 1875,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.radial"
        },
        {
          "name": "redraw-series",
          "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 848,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "redraw-elems",
          "description": "The accompanying array of series elements required to redraw.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 852,
              "column": 4
            },
            "end": {
              "line": 855,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "dynamic-redraw",
          "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "axes",
          "description": "An optional dev set array to specify which dimensions to plot",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "description": "An array of dimensions which the chart uses.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "series-key",
          "description": "A string specifying which key to use as the series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "drag-behavior",
          "description": "A holder for the drag behavior",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "orientation",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 576,
              "column": 4
            },
            "end": {
              "line": 579,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisOrientation"
        },
        {
          "name": "extents-data",
          "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 771,
              "column": 4
            },
            "end": {
              "line": 774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "extents-action",
          "description": "Used by the chart to interpret if extentsData is strip or zoom",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 778,
              "column": 4
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "brush-domains",
          "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3262,
              "column": 4
            },
            "end": {
              "line": 3267,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.brushDomains"
        },
        {
          "name": "dimension",
          "description": "The string identifier for the axis",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "brush-to-remove",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "drag-container-elem",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "cartesian-drag-behavior",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "special-actions-list",
          "description": "Set of predefined actions that can be used out of the box",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 159,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "brush-actions",
          "description": "set of actions which should display drawn brushes.\nKey is the actionConfig value\nvalue is the brushDomains key",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "action-mapping",
          "description": "set of predefined action that can be used out of the box",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "smaller-side",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "combined-muted-series-changed",
          "description": "Fired when the `combinedMutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "center-offset-changed",
          "description": "Fired when the `centerOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "drag-behavior-changed",
          "description": "Fired when the `dragBehavior` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorDrag.basicProps"
        },
        {
          "type": "CustomEvent",
          "name": "extents-data-changed",
          "description": "Fired when the `extentsData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "type": "CustomEvent",
          "name": "extents-action-changed",
          "description": "Fired when the `extentsAction` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.extentsData"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-axis-interaction-space"
    },
    {
      "description": "### Usage\n\n    <px-vis-interactive-axis\n        prevent-initial-drawing=\"[[preventInitialDrawing]]\"\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        dimension=\"[[dimension]]\"\n        series-key=\"[[seriesKey]]\"\n        height=\"[[height]]\"\n        width=\"[[width]]\"\n        margin=\"[[margin]]\"\n        chart-data=\"[[chartData]]\"\n        orientation=\"[[orientation]]\"\n        title=\"[[title]]\"\n        title-location='[[titleLocation]]'\n        title-type-size=\"[[titleTypeSize]]\"\n        label-type-size=\"[[labelTypeSize]]\"\n        stroke-width=\"[[strokeWidth]]\"\n        outer-tick-size=\"0\"\n        tick-values=\"[[tickValues]]\"\n        truncation-length=\"[[truncationLength]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        append-unit-in-title=\"[[appendUnitInTitle]]\"\n        unit=\"[[unit]]\"\n        prevent-series-bar=\"[[preventSeriesBar]]\"\n        domain-changed=\"[[_internalDimensionsChanged]]\"\n        selected-domain=\"[[selectedDomain]]\"\n        title-truncation\n        disable-ticks=\"[[disableTicks]]\"\n        label-position=\"[[labelPosition]]\"\n        axis-color=\"[[axisColor]]\"\n        ticks=\"[[ticks]]\"\n        label-rotation=\"[[labelRotation]]\"\n        label-translation=\"[[labelTranslation]]\"\n        series-on-axis=\"[[seriesOnAxes]]\"\n        muted-series=\"[[mutedSeries]]\"\n        drawn-tick-values=\"[[drawnTickValues]]\"\n        rebuild-on-draw=\"[[_rebuildOnDraw]]\"\n        disable-brush=\"[[disableBrush]]\"\n        drag-behavior=\"[[dragBehavior]]\"\n        rebuild-on-draw=\"[[_rebuildOnDraw]]\"\n        prevent-initial-drawing=\"[[preventInitialDrawing]]\"\n        redraw-series=\"[[redrawSeries]]\"\n        brush-domains=\"[[brushDomains]]\"\n        hide-and-show-on-hover=\"[[hideAndShowOnHover]]\">\n    </px-vis-interactive-axis>\n\n### d3 reference\nhttps://github.com/mbostock/d3/wiki/SVG-Axes\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-font-family` | The font family for all labels and text\n  `--px-vis-axis-color` | The color for the axis lines, axis ticks, and axis tick labels\n  `--px-vis-axis-title-color` | The color for the axis title\n  `--px-vis-axis-inline-title-color` | The color for the axis title\n  `--px-vis-axis-inline-type-color` | The color for the axis lines, axis ticks, and axis tick labels when using 'inline' labelPosition\n  `--px-vis-axis-inline-box-color` | The color for the tick boxes when using 'inline' labelPosition\n  `--px-vis-axis-common-tick-color`",
      "summary": "",
      "path": "px-vis-interactive-axis.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "labelTypeSize",
          "type": "number",
          "description": "Defines the base label type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The displayed title for the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelPosition",
          "type": "string",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelRotation",
          "type": "number",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelTranslation",
          "type": "Array",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "type": "Array",
          "description": "Array of the series which belong to this axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translateAmt",
          "type": "Array",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleLocation",
          "type": "Object",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleTypeSize",
          "type": "number",
          "description": "Defines the Title type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "Defines the axis stroke width",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outerTickSize",
          "type": "number",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tickValues",
          "type": "Array",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "type": "(Object|Number)",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axisColor",
          "type": "string",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawnTickValues",
          "type": "Array",
          "description": "Returned tick values from the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "axes",
          "type": "Array",
          "description": "An optional dev set array to specify which dimensions to plot",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "An array of dimensions which the chart uses.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "A string specifying which key to use as the series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "combinedMutedSeries",
          "type": "Object",
          "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "name": "redrawSeries",
          "type": "boolean",
          "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 848,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "redrawElems",
          "type": "Array",
          "description": "The accompanying array of series elements required to redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 852,
              "column": 4
            },
            "end": {
              "line": 855,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "dynamicRedraw",
          "type": "boolean",
          "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1872,
              "column": 4
            },
            "end": {
              "line": 1875,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.radial"
        },
        {
          "name": "centerOffset",
          "type": "number",
          "description": "Used in a radial chart to provide a hole in the center of the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1131,
              "column": 4
            },
            "end": {
              "line": 1135,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "name": "seriesToAxes",
          "type": "Object",
          "description": "Object linking which series belong to which axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2184,
              "column": 5
            },
            "end": {
              "line": 2186,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesToAxes"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2414,
              "column": 4
            },
            "end": {
              "line": 2416,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.actionConfigGeneric"
        },
        {
          "name": "interactionSpaceConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2501,
              "column": 4
            },
            "end": {
              "line": 2503,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.interactionSpaceConfigGeneric"
        },
        {
          "name": "brushDomains",
          "type": "Object",
          "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3262,
              "column": 4
            },
            "end": {
              "line": 3267,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.brushDomains"
        },
        {
          "name": "_interactiveGroup",
          "type": "Object",
          "description": "A dictionary of g elements for each dimension.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "dimension",
          "type": "string",
          "description": "The string identifier for the axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "appendUnitInTitle",
          "type": "boolean",
          "description": "Whether to append unit in brackets in axis title, e.g [Hz].",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 6
            },
            "end": {
              "line": 211,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "displayedValues",
          "type": "Object",
          "description": "Array representing the actual displayed titles for each axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 221,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "showTicksOnHover",
          "type": "boolean",
          "description": "Whether the axis ticks should be hidden and shown on hover, or always shown.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 6
            },
            "end": {
              "line": 229,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "disableTicks",
          "type": "boolean",
          "description": "Boolean to decide if all axes or just one axis should get ticks.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "length",
          "type": "number",
          "description": "Length of the axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 243,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "brushToRemove",
          "type": "boolean",
          "description": "Boolean controlling if brushing should retain or delete series.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 250,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_pokeTitleLocation",
          "type": "boolean",
          "description": "Force a redraw for titleLocation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "recalcTicks",
          "type": "boolean",
          "description": "Force a redraw if ticks.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "orientationFromDimensions",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "leftAxisSize",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 274,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "rightAxisSize",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "disableBrush",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "preventSeriesBar",
          "type": "boolean",
          "description": "Boolean to specify whether to draw the series bars.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "cartesianDragBehavior",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_pokeOrientation",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 6
            },
            "end": {
              "line": 297,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "axisConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 6
            },
            "end": {
              "line": 303,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "allowEmptyTitle",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_commonAxisRanAtLeastOnce",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisDoneCounter",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 6
            },
            "end": {
              "line": 314,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_rebuildOnDraw",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "hideAndShowOnHover",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_axisGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "smallerSide",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 331,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_isDirty",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 335,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 4
            },
            "end": {
              "line": 362,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 865,
              "column": 4
            },
            "end": {
              "line": 883,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 354,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnDragContainer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 4
            },
            "end": {
              "line": 370,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setDragBehavior",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_axisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_interactionSpaceConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 397,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_createGroup",
          "description": "Generates a group element for each dimension and moves it into the correct x coordinate.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 4
            },
            "end": {
              "line": 429,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTransformation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setAxisStyles",
          "description": "Sets styles and on-hover states for common axis.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 458,
              "column": 4
            },
            "end": {
              "line": 481,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "recalcTranform",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 4
            },
            "end": {
              "line": 485,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 155,
          "column": 10
        },
        "end": {
          "line": 486,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "label-type-size",
          "description": "Defines the base label type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "description": "The displayed title for the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-position",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-rotation",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-translation",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "description": "Array of the series which belong to this axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translate-amt",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-location",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-type-size",
          "description": "Defines the Title type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "stroke-width",
          "description": "Defines the axis stroke width",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outer-tick-size",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tick-values",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {},
          "type": "(Object|Number)",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axis-color",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawn-tick-values",
          "description": "Returned tick values from the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "axes",
          "description": "An optional dev set array to specify which dimensions to plot",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "description": "An array of dimensions which the chart uses.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "series-key",
          "description": "A string specifying which key to use as the series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "combined-muted-series",
          "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "name": "redraw-series",
          "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 848,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "redraw-elems",
          "description": "The accompanying array of series elements required to redraw.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 852,
              "column": 4
            },
            "end": {
              "line": 855,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "dynamic-redraw",
          "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "radial",
          "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1872,
              "column": 4
            },
            "end": {
              "line": 1875,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.radial"
        },
        {
          "name": "center-offset",
          "description": "Used in a radial chart to provide a hole in the center of the chart",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1131,
              "column": 4
            },
            "end": {
              "line": 1135,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "name": "series-to-axes",
          "description": "Object linking which series belong to which axis",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2184,
              "column": 5
            },
            "end": {
              "line": 2186,
              "column": 6
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.seriesToAxes"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2414,
              "column": 4
            },
            "end": {
              "line": 2416,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.actionConfigGeneric"
        },
        {
          "name": "interaction-space-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2501,
              "column": 4
            },
            "end": {
              "line": 2503,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.interactionSpaceConfigGeneric"
        },
        {
          "name": "brush-domains",
          "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3262,
              "column": 4
            },
            "end": {
              "line": 3267,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.brushDomains"
        },
        {
          "name": "dimension",
          "description": "The string identifier for the axis.",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "append-unit-in-title",
          "description": "Whether to append unit in brackets in axis title, e.g [Hz].",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 6
            },
            "end": {
              "line": 211,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "displayed-values",
          "description": "Array representing the actual displayed titles for each axis.",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 221,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "show-ticks-on-hover",
          "description": "Whether the axis ticks should be hidden and shown on hover, or always shown.",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 6
            },
            "end": {
              "line": 229,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "disable-ticks",
          "description": "Boolean to decide if all axes or just one axis should get ticks.",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 236,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "length",
          "description": "Length of the axis.",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 243,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "brush-to-remove",
          "description": "Boolean controlling if brushing should retain or delete series.",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 250,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "recalc-ticks",
          "description": "Force a redraw if ticks.",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "orientation-from-dimensions",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "left-axis-size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 274,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "right-axis-size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "disable-brush",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "prevent-series-bar",
          "description": "Boolean to specify whether to draw the series bars.",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "cartesian-drag-behavior",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "axis-config",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 6
            },
            "end": {
              "line": 303,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "allow-empty-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hide-and-show-on-hover",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 6
            },
            "end": {
              "line": 323,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "smaller-side",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 331,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "drawn-tick-values-changed",
          "description": "Fired when the `drawnTickValues` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "combined-muted-series-changed",
          "description": "Fired when the `combinedMutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "center-offset-changed",
          "description": "Fired when the `centerOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "type": "CustomEvent",
          "name": "displayed-values-changed",
          "description": "Fired when the `displayedValues` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-interactive-axis"
    },
    {
      "description": "### Usage\n\n    <px-vis-multi-axis\n        svg=\"[[svg]]\"\n        width=\"[[width]]\"\n        height=\"[[height]]\"\n        margin=\"[[margin]]\"\n        offset=\"[[_offset]]\"\n        length=\"[[_minDim]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        complete-series-config=\"{{completeSeriesConfig}}\"\n        series-key=\"[[seriesKey]]\"\n        chart-data=\"[[chartData]]\"\n        dimensions=\"[[dimensions]]\"\n        axes=\"[[axes]]\"\n        redraw-series=\"true\"\n        stroke-width=\"2\"\n        match-ticks=\"[[matchTicks]]\"\n        grid-ticks=\"{{gridTicks}}\"\n        grid-axis=\"{{gridAxis}}\"\n        common-axis=\"[[commonAxis]]\"\n        truncation-length=\"[[truncationLength]]\"\n        displayed-values=\"{{displayedValues}}\"\n        append-unit-in-title\n        domain-changed=\"[[domainChanged]]\"\n        axis-groups=\"{{axisGroups}}\"\n        radial\n        single-domain\n        label-position=\"inline\"\n        label-one-axis\n        axis-color=\"salmon\"\n        ticks=\"[[ticks]]\"\n        label-rotation=\"180\"\n        brush-to-remove=\"[[brushToRemove]]\"\n        center-offset=\"[[centerOffset]]\"\n        drawn-tick-values=\"{{drawnTickValues}}\"\n        title-type-size=\"15\"\n        label-type-size=\"12\">\n    </px-vis-multi-axis>\n\n### d3 reference\nhttps://github.com/mbostock/d3/wiki/SVG-Axes\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-font-family` | The font family for all labels and text\n  `--px-vis-axis-color` | The color for the axis lines, axis ticks, and axis tick labels\n  `--px-vis-axis-title-color` | The color for the axis title\n  `--px-vis-axis-inline-title-color` | The color for the axis title\n  `--px-vis-axis-inline-type-color` | The color for the axis lines, axis ticks, and axis tick labels when using 'inline' labelPosition\n  `--px-vis-axis-inline-box-color` | The color for the tick boxes when using 'inline' labelPosition",
      "summary": "",
      "path": "px-vis-multi-axis.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1951,
              "column": 4
            },
            "end": {
              "line": 1953,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "labelTypeSize",
          "type": "number",
          "description": "Defines the base label type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The displayed title for the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelPosition",
          "type": "string",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelRotation",
          "type": "number",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelTranslation",
          "type": "Array",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "type": "Array",
          "description": "Array of the series which belong to this axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translateAmt",
          "type": "Array",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleLocation",
          "type": "Object",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleTypeSize",
          "type": "number",
          "description": "Defines the Title type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "Defines the axis stroke width",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outerTickSize",
          "type": "number",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tickValues",
          "type": "Array",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "type": "(Object|Number)",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axisColor",
          "type": "string",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawnTickValues",
          "type": "Array",
          "description": "Returned tick values from the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "axes",
          "type": "Array",
          "description": "An optional dev set array to specify which dimensions to plot",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "An array of dimensions which the chart uses.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "A string specifying which key to use as the series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "redrawSeries",
          "type": "boolean",
          "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 848,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "redrawElems",
          "type": "Array",
          "description": "The accompanying array of series elements required to redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 852,
              "column": 4
            },
            "end": {
              "line": 855,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "dynamicRedraw",
          "type": "boolean",
          "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "commonAxis",
          "type": "boolean",
          "description": "A boolean specifying if all axes should share the same range",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1672,
              "column": 4
            },
            "end": {
              "line": 1675,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.commonAxis"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1872,
              "column": 4
            },
            "end": {
              "line": 1875,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.radial"
        },
        {
          "name": "centerOffset",
          "type": "number",
          "description": "Used in a radial chart to provide a hole in the center of the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1131,
              "column": 4
            },
            "end": {
              "line": 1135,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "name": "seriesToAxes",
          "type": "Object",
          "description": "Object linking which series belong to which axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2184,
              "column": 5
            },
            "end": {
              "line": 2186,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesToAxes"
        },
        {
          "name": "preventInitialDrawing",
          "type": "boolean",
          "description": "blocks initial drawings of axis until set to false",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "categoryKey",
          "type": "string",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "type": "Array",
          "description": "A dev set array defining the categories values.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2414,
              "column": 4
            },
            "end": {
              "line": 2416,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.actionConfigGeneric"
        },
        {
          "name": "interactionSpaceConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2501,
              "column": 4
            },
            "end": {
              "line": 2503,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.interactionSpaceConfigGeneric"
        },
        {
          "name": "combinedMutedSeries",
          "type": "Object",
          "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "name": "brushDomains",
          "type": "Object",
          "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3262,
              "column": 4
            },
            "end": {
              "line": 3267,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.brushDomains"
        },
        {
          "name": "matchTicks",
          "type": "boolean",
          "description": "A boolean to specify if the axis ticks should align or each have their own ranges.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "gridTicks",
          "type": "Object",
          "description": "If matchTicks, generate the ticks so they match too.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "gridAxis",
          "type": "Object",
          "description": "If matchTicks, generate the axis so it matches too.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "appendUnitInTitle",
          "type": "boolean",
          "description": "Whether to append unit in brackets in axis title, e.g [Hz].",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "displayedValues",
          "type": "Object",
          "description": "Array representing the actual displayed titles for each axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_internalDimensions",
          "type": "Array",
          "description": "Internal dimensions to defeat race condition.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 223,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_internalDimensionsChanged",
          "type": "boolean",
          "description": "Internal dimensions boolean to defeat race conditions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 6
            },
            "end": {
              "line": 230,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "singleDomain",
          "type": "boolean",
          "description": "Whether the scales are using a single scale or multi scale.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 237,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "labelOneAxis",
          "type": "boolean",
          "description": "Boolean to decide if all axes or just one axis should get ticks.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 6
            },
            "end": {
              "line": 244,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "length",
          "type": "number",
          "description": "Length of the axis.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 251,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "_heightOrLen",
          "type": "number",
          "description": "Whether to use the height or the length for axis length.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "brushToRemove",
          "type": "boolean",
          "description": "Boolean controlling if brushing should retain or delete series.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_lastDomainChanged",
          "type": "boolean",
          "description": "Boolean to decide if domainChanged changed or if something else triggered the observer.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "_pokeTitleLocation",
          "type": "boolean",
          "description": "Force a redraw for titleLocation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "recalcTicks",
          "type": "boolean",
          "description": "Force a redraw of ticks.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 286,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "orientationFromDimensions",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "leftAxisSize",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "rightAxisSize",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "disableBrush",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 6
            },
            "end": {
              "line": 303,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "preventSeriesBar",
          "type": "boolean",
          "description": "Boolean to specify whether to draw the series bars.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "cartesianDragBehavior",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 6
            },
            "end": {
              "line": 314,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_pokeOrientation",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "axisConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 6
            },
            "end": {
              "line": 324,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "allowEmptyTitle",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_commonAxisRanAtLeastOnce",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 6
            },
            "end": {
              "line": 331,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_axisDoneCounter",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 335,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_rebuildOnDraw",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 6
            },
            "end": {
              "line": 339,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_mutedSeriesPerBrush",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 6
            },
            "end": {
              "line": 343,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_displayedTitlesCounter",
          "type": "number",
          "description": "Counter for number of axis titles that have been updated.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 350,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_displayedTitlesBuilder",
          "type": "Object",
          "description": "Builder for current axis title updates.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 354,
              "column": 6
            },
            "end": {
              "line": 359,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_drawnTickValuesChangedCounter",
          "type": "number",
          "description": "Counter for number of drawn tick values that have been updated.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 6
            },
            "end": {
              "line": 366,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_normalizedTicks",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 6
            },
            "end": {
              "line": 371,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "smallerSide",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 375,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-chart.html",
            "start": {
              "line": 865,
              "column": 4
            },
            "end": {
              "line": 883,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_axisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 4
            },
            "end": {
              "line": 472,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_copyConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 474,
              "column": 4
            },
            "end": {
              "line": 482,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "k"
            },
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_axisDragged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 484,
              "column": 4
            },
            "end": {
              "line": 498,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_computeTitleLocation",
          "description": "At ready, set the margin and titleLocation objects.\nUsed for radar to rotate the title appropriately.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 506,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "titleLocation"
            }
          ]
        },
        {
          "name": "_toggleTitleLocation",
          "description": "Forces a redraw of the titleLocation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 556,
              "column": 4
            },
            "end": {
              "line": 562,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcH",
          "description": "returns length if it exists, otherwise returns height",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 568,
              "column": 4
            },
            "end": {
              "line": 577,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "length"
            }
          ]
        },
        {
          "name": "_returnY",
          "description": "Returns the appropriate scale for a dimension.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 584,
              "column": 4
            },
            "end": {
              "line": 590,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_calcDisableTicks",
          "description": "Determines whether ticks are disabled.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 597,
              "column": 4
            },
            "end": {
              "line": 608,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_computedInternalDimensions",
          "description": "Sets _internalDimensions to the value of dimensions but trigged AFTER the scale\nhas been set. Avoids an annoying race condition where dimensions triggers a\nchart refresh but the new scale has yet to be triggered.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 617,
              "column": 4
            },
            "end": {
              "line": 649,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getTitle",
          "description": "Checks if there is a title specified in the series config and returns it; otherwise returns the axis id.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 656,
              "column": 4
            },
            "end": {
              "line": 670,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "deleteAllBrushes",
          "description": "Deletes the brushes on children axes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 677,
              "column": 4
            },
            "end": {
              "line": 679,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getOrientation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 681,
              "column": 4
            },
            "end": {
              "line": 694,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisId"
            },
            {
              "name": "orientationFromDimensions"
            }
          ]
        },
        {
          "name": "_recalcGTransforms",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 696,
              "column": 4
            },
            "end": {
              "line": 707,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftSize"
            },
            {
              "name": "rightSize"
            }
          ]
        },
        {
          "name": "_returnSeriesArray",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 709,
              "column": 4
            },
            "end": {
              "line": 715,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr"
            },
            {
              "name": "axisId"
            }
          ]
        },
        {
          "name": "_toggleOrientation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 717,
              "column": 4
            },
            "end": {
              "line": 719,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getUnit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 721,
              "column": 4
            },
            "end": {
              "line": 740,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "completeSeriesConfig"
            }
          ]
        },
        {
          "name": "_drawnTickValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 742,
              "column": 4
            },
            "end": {
              "line": 760,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_applyDrawnTickValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 4
            },
            "end": {
              "line": 765,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "val"
            }
          ]
        },
        {
          "name": "_displayedTitleChanged",
          "description": "Sets the displayed value of the title including truncation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 772,
              "column": 4
            },
            "end": {
              "line": 803,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_applyDisplayedTitlesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 805,
              "column": 4
            },
            "end": {
              "line": 809,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isFirst",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 821,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ]
        },
        {
          "name": "_returnTickValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 823,
              "column": 4
            },
            "end": {
              "line": 827,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "tickValues"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 142,
          "column": 10
        },
        "end": {
          "line": 828,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1951,
              "column": 4
            },
            "end": {
              "line": 1953,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.svgDefinition"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "label-type-size",
          "description": "Defines the base label type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "description": "The displayed title for the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-position",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-rotation",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-translation",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "description": "Array of the series which belong to this axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translate-amt",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-location",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-type-size",
          "description": "Defines the Title type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "stroke-width",
          "description": "Defines the axis stroke width",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outer-tick-size",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tick-values",
          "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1024,
              "column": 4
            },
            "end": {
              "line": 1026,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "ticks",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {},
          "type": "(Object|Number)",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axis-color",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawn-tick-values",
          "description": "Returned tick values from the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "axes",
          "description": "An optional dev set array to specify which dimensions to plot",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1604,
              "column": 4
            },
            "end": {
              "line": 1606,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "dimensions",
          "description": "An array of dimensions which the chart uses.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1610,
              "column": 4
            },
            "end": {
              "line": 1612,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "series-key",
          "description": "A string specifying which key to use as the series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1617,
              "column": 4
            },
            "end": {
              "line": 1619,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.dimensions"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "redraw-series",
          "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 848,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "redraw-elems",
          "description": "The accompanying array of series elements required to redraw.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 852,
              "column": 4
            },
            "end": {
              "line": 855,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "dynamic-redraw",
          "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 859,
              "column": 4
            },
            "end": {
              "line": 862,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
        },
        {
          "name": "common-axis",
          "description": "A boolean specifying if all axes should share the same range",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1672,
              "column": 4
            },
            "end": {
              "line": 1675,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.commonAxis"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "radial",
          "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1872,
              "column": 4
            },
            "end": {
              "line": 1875,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.radial"
        },
        {
          "name": "center-offset",
          "description": "Used in a radial chart to provide a hole in the center of the chart",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1131,
              "column": 4
            },
            "end": {
              "line": 1135,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "name": "series-to-axes",
          "description": "Object linking which series belong to which axis",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2184,
              "column": 5
            },
            "end": {
              "line": 2186,
              "column": 6
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.seriesToAxes"
        },
        {
          "name": "prevent-initial-drawing",
          "description": "blocks initial drawings of axis until set to false",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2272,
              "column": 4
            },
            "end": {
              "line": 2275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
        },
        {
          "name": "category-key",
          "description": "A dev set string speciying which key to use as the category to use to color the series lines",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1639,
              "column": 4
            },
            "end": {
              "line": 1641,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "categories",
          "description": "A dev set array defining the categories values.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1646,
              "column": 4
            },
            "end": {
              "line": 1649,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.categories"
        },
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2414,
              "column": 4
            },
            "end": {
              "line": 2416,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.actionConfigGeneric"
        },
        {
          "name": "interaction-space-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2501,
              "column": 4
            },
            "end": {
              "line": 2503,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.interactionSpaceConfigGeneric"
        },
        {
          "name": "combined-muted-series",
          "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 413,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "name": "brush-domains",
          "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3262,
              "column": 4
            },
            "end": {
              "line": 3267,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.brushDomains"
        },
        {
          "name": "match-ticks",
          "description": "A boolean to specify if the axis ticks should align or each have their own ranges.",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "grid-ticks",
          "description": "If matchTicks, generate the ticks so they match too.",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "grid-axis",
          "description": "If matchTicks, generate the axis so it matches too.",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "append-unit-in-title",
          "description": "Whether to append unit in brackets in axis title, e.g [Hz].",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 6
            },
            "end": {
              "line": 210,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "displayed-values",
          "description": "Array representing the actual displayed titles for each axis.",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 6
            },
            "end": {
              "line": 217,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "single-domain",
          "description": "Whether the scales are using a single scale or multi scale.",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 6
            },
            "end": {
              "line": 237,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "label-one-axis",
          "description": "Boolean to decide if all axes or just one axis should get ticks.",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 6
            },
            "end": {
              "line": 244,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "length",
          "description": "Length of the axis.",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 251,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "brush-to-remove",
          "description": "Boolean controlling if brushing should retain or delete series.",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "recalc-ticks",
          "description": "Force a redraw of ticks.",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 286,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "orientation-from-dimensions",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "left-axis-size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "right-axis-size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 6
            },
            "end": {
              "line": 298,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "disable-brush",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 6
            },
            "end": {
              "line": 303,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "prevent-series-bar",
          "description": "Boolean to specify whether to draw the series bars.",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "cartesian-drag-behavior",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 6
            },
            "end": {
              "line": 314,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "axis-config",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 6
            },
            "end": {
              "line": 324,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "allow-empty-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 328,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "smaller-side",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 375,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "drawn-tick-values-changed",
          "description": "Fired when the `drawnTickValues` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "center-offset-changed",
          "description": "Fired when the `centerOffset` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
        },
        {
          "type": "CustomEvent",
          "name": "combined-muted-series-changed",
          "description": "Fired when the `combinedMutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.combinedMutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "grid-ticks-changed",
          "description": "Fired when the `gridTicks` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "grid-axis-changed",
          "description": "Fired when the `gridAxis` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "displayed-values-changed",
          "description": "Fired when the `displayedValues` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-multi-axis"
    },
    {
      "description": "### Usage\n\n    <px-vis-pie\n        svg=\"[[svg]]\"\n        clip-path=\"[[clipPath]]\"\n        series-id=\"[[item.name]]\"\n        series-number=\"[[index]]\"\n        chart-data=\"[[item]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        muted-series=\"[[mutedSeries]]\">\n    </px-vis-pie>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-pie-empty-color` | The color for an empty pie chart\n  `--px-vis-pie-title-color` | The color for the title name\n  `--px-vis-pie-title-font-size` | The size for the title name\n  `--px-vis-pie-title-value-color` | The color for the title data value\n  `--px-vis-pie-title-value-font-size` | The size for the title data value",
      "summary": "",
      "path": "px-vis-pie.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "empty",
          "type": "boolean",
          "description": "Whether to draw an empty pie chart when data is empty/null.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_emptyChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "seriesNumber",
          "type": "number",
          "description": "An index of the series used for calculating its color.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "innerRadius",
          "type": "number",
          "description": "Number between 0 and 1 defining how much of the inner pie should be cut.\nTypically at 0 this is a pie chart, at 0.5 a donut chart and at 1 all\nthe chart is cut (i.e. not visible).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "_innerRadiusPx",
          "type": "number",
          "description": "The actual inner radius value in pixels which will be used internally to draw the chart.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "donut",
          "type": "boolean",
          "description": "Whether the chart should be displayed as a donut rather than a pie.\nIf displayed as a donut, it will by default use 30px as the ring size.\nThis can be overridden by using the \"innerRadius\" property (between 0 and 1).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "pieGroup",
          "type": "Object",
          "description": "A holder object for the series object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "total",
          "type": "?",
          "description": "Total value of all slices.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "radius",
          "type": "number",
          "description": "Radius of the pie chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_arcs",
          "type": "Object",
          "description": "The current arc definitions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_currentRotationAngle",
          "type": "number",
          "description": "How much the pie is currently rotated in radians.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "usePercentage",
          "type": "boolean",
          "description": "Whether the values should be displayed in percent.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "preserveDataOrder",
          "type": "boolean",
          "description": "By default the pie chart slices will be ordered by value.\nSet to false to keep the data order.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 199,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 146,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the pie element.\nCalled from an observer watching for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 209,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkInitialGroupCreation",
          "description": "Checks whether the group holding all of the slices has been created,\nand creates it if necessary.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateDrawing",
          "description": "Updates drawing when adding, removing or updating data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_sliceMouseEnter",
          "description": "Function used to display a tooltip for a specific slice.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 4
            },
            "end": {
              "line": 349,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datum"
            },
            {
              "name": "index"
            },
            {
              "name": "group"
            }
          ]
        },
        {
          "name": "_mouseLeaveSlice",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datum"
            },
            {
              "name": "index"
            },
            {
              "name": "group"
            }
          ]
        },
        {
          "name": "_positionChart",
          "description": "Position the chart given the rotation angle.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 4
            },
            "end": {
              "line": 364,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "transitionTime"
            }
          ]
        },
        {
          "name": "_onSliceClick",
          "description": "Emits px-vis-pie-slice-clicked event with selected slice data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 375,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datum"
            },
            {
              "name": "index"
            },
            {
              "name": "group"
            }
          ]
        },
        {
          "name": "_centerOnSlice",
          "description": "Transforms the svg to show the slice at the top (12 o'clock).",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datum"
            },
            {
              "name": "index"
            },
            {
              "name": "group"
            }
          ]
        },
        {
          "name": "_radToDeg",
          "description": "Converts radians to degrees.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 398,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            }
          ]
        },
        {
          "name": "_getRotationAngle",
          "description": "Calculates the appropriate rotation angle for the slice to be displayed at 12 o'clock.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "slice"
            }
          ]
        },
        {
          "name": "_calcInnerRadiusPx",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 413,
              "column": 4
            },
            "end": {
              "line": 425,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_emptyChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 4
            },
            "end": {
              "line": 434,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 47,
          "column": 10
        },
        "end": {
          "line": 435,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "empty",
          "description": "Whether to draw an empty pie chart when data is empty/null.",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "series-number",
          "description": "An index of the series used for calculating its color.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "inner-radius",
          "description": "Number between 0 and 1 defining how much of the inner pie should be cut.\nTypically at 0 this is a pie chart, at 0.5 a donut chart and at 1 all\nthe chart is cut (i.e. not visible).",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "donut",
          "description": "Whether the chart should be displayed as a donut rather than a pie.\nIf displayed as a donut, it will by default use 30px as the ring size.\nThis can be overridden by using the \"innerRadius\" property (between 0 and 1).",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "pie-group",
          "description": "A holder object for the series object.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "total",
          "description": "Total value of all slices.",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {}
        },
        {
          "name": "radius",
          "description": "Radius of the pie chart.",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "use-percentage",
          "description": "Whether the values should be displayed in percent.",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "preserve-data-order",
          "description": "By default the pie chart slices will be ordered by value.\nSet to false to keep the data order.",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-pie-centered-on-slice",
          "description": "px-vis-pie-centered-on-slice",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-pie-mouse-enter-slice",
          "description": "px-vis-pie-mouse-enter-slice",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-pie-mouse-leave-slice",
          "description": "px-vis-pie-mouse-leave-slice",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-pie-slice-clicked",
          "description": "px-vis-pie-slice-clicked",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-pie"
    },
    {
      "description": "### Usage\n\n    <px-vis-radar-grid\n        svg=\"[[svg]]\"\n        x=\"[[x]]\"\n        y=\"[[y]]\"\n        axis-color=\"[[axisColor]]\"\n        tick-values=\"[[drawnTickValues]]\"\n        dimensions=\"[[dimensions]]\"\n        margin=\"[[margin]]\"\n        domain-changed=\"[[domainChanged]]\">\n    </px-vis-radar-grid>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-gridlines-color` | The color for the gridlines",
      "summary": "",
      "path": "px-vis-radar-grid.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_gridData",
          "type": "Array",
          "description": "The calculated grid data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "axisColor",
          "type": "string",
          "description": "The color for the grid lines.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"rgb(0,0,0)\""
        },
        {
          "name": "_completeSeriesConfig",
          "type": "Object",
          "description": "A configuration object for the gridlines.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_seriesKey",
          "type": "string",
          "description": "The access key for the seriesConfig.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"radarGrids\""
        },
        {
          "name": "tickValues",
          "type": "Array",
          "description": "The values obtained from the axis to place gridlines on.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "dimensions",
          "type": "Array",
          "description": "The dimensions of the chart.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "The stroke width for the grid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "createGridData",
          "description": "Draws the gridlines.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 184,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_returnInterpolation",
          "description": "Helper function to return a d3 interpolation function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 10
        },
        "end": {
          "line": 198,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "axis-color",
          "description": "The color for the grid lines.",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "tick-values",
          "description": "The values obtained from the axis to place gridlines on.",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "dimensions",
          "description": "The dimensions of the chart.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 124,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "stroke-width",
          "description": "The stroke width for the grid.",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "tick-values-changed",
          "description": "Fired when the `tickValues` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "dimensions-changed",
          "description": "Fired when the `dimensions` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-radar-grid"
    },
    {
      "description": "### Usage\n\n    <px-vis-radial-gridlines\n        svg=\"[[svg]]\"\n        axis=\"[[y]]\"\n        domain-changed=\"[[domainChanged]]\"\n        margin=\"[[margin]]\"\n        tick-values=\"[[drawnTickValues]]\">\n    </px-vis-radial-gridlines>\n\n### d3 reference\nhttps://github.com/mbostock/d3/wiki/SVG-Axes\nThe gridlines still make use of the d3.axis object, just with different settings\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-gridlines-color` | The color for the gridlines",
      "summary": "",
      "path": "px-vis-radial-gridlines.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"bottom\"",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "type": "Object",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "labelTypeSize",
          "type": "number",
          "description": "Defines the base label type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "12",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The displayed title for the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelPosition",
          "type": "string",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelRotation",
          "type": "number",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "labelTranslation",
          "type": "Array",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "type": "Array",
          "description": "Array of the series which belong to this axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translateAmt",
          "type": "Array",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleLocation",
          "type": "Object",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "titleTypeSize",
          "type": "number",
          "description": "Defines the Title type size",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "15",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "description": "Defines the axis stroke width",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outerTickSize",
          "type": "number",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tickValues",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "ticks",
          "type": "(Object|Number)",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axisColor",
          "type": "string",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawnTickValues",
          "type": "Array",
          "description": "Returned tick values from the axis",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3156,
              "column": 4
            },
            "end": {
              "line": 3158,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3159,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_radialGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lineGroup",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 10
            },
            "end": {
              "line": 74,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3165,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "drawElement",
          "description": "Draws the gridlines. Called by observer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 146,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 42,
          "column": 12
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "orientation",
          "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 621,
              "column": 4
            },
            "end": {
              "line": 624,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "axis",
          "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 609,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axis"
        },
        {
          "name": "label-type-size",
          "description": "Defines the base label type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 888,
              "column": 4
            },
            "end": {
              "line": 891,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
        },
        {
          "name": "title",
          "description": "The displayed title for the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-position",
          "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 930,
              "column": 4
            },
            "end": {
              "line": 933,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-rotation",
          "description": "Defines how the label should be rotated. Number is the degree of rotation",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 941,
              "column": 4
            },
            "end": {
              "line": 944,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "label-translation",
          "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 952,
              "column": 4
            },
            "end": {
              "line": 955,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "series",
          "description": "Array of the series which belong to this axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 962,
              "column": 4
            },
            "end": {
              "line": 965,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "translate-amt",
          "description": "An x,y amount to move the axis to allow for labels and titles",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 972,
              "column": 4
            },
            "end": {
              "line": 975,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-location",
          "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 988,
              "column": 4
            },
            "end": {
              "line": 991,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "title-type-size",
          "description": "Defines the Title type size",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 997,
              "column": 4
            },
            "end": {
              "line": 1000,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "stroke-width",
          "description": "Defines the axis stroke width",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1006,
              "column": 4
            },
            "end": {
              "line": 1009,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "outer-tick-size",
          "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1015,
              "column": 4
            },
            "end": {
              "line": 1018,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "tick-values",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "ticks",
          "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1044,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {},
          "type": "(Object|Number)",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "axis-color",
          "description": "Defines the color for axis lines, ticks, labels, and title",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1051,
              "column": 4
            },
            "end": {
              "line": 1054,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "drawn-tick-values",
          "description": "Returned tick values from the axis",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1059,
              "column": 4
            },
            "end": {
              "line": 1062,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "drawn-tick-values-changed",
          "description": "Fired when the `drawnTickValues` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axisConfig"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-radial-gridlines"
    },
    {
      "description": "Interpreter components act as a converter, translating data points into their corresponding pixel coordinate.\n\nTo do this, the interpreter needs to understand:\n   1. the type of data (xScale, yScale)\n   2. the size of the drawing area (width, height, margin)\n   3. the extents of the data and domain (chartData, selectedDomain)\n\nIt then returns the interpreter functions for `x` and `y`\nand arrays for the current domain those `x` and `y` functions are using.\n\n### Usage\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data={{chartData}}\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      domainChanged=\"{{domainChanged}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n\n### d3 Reference\nhttps://github.com/d3/d3/wiki/Scales\n\nhttps://github.com/d3/d3/wiki/API-Reference#d3scale-scales",
      "summary": "",
      "path": "px-vis-scale.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1148,
              "column": 4
            },
            "end": {
              "line": 1151,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 543,
              "column": 4
            },
            "end": {
              "line": 547,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "name": "preventWebWorkerSynchronization",
          "type": "boolean",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3028,
              "column": 6
            },
            "end": {
              "line": 3031,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "_extents",
          "type": "Array",
          "description": "Holder for chart extents from the seriesConfig object",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[[],[]]",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataHasChanged",
          "type": "number",
          "description": "Boolean to detect if the chart data has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calculatingDomain",
          "type": "boolean",
          "description": "Boolean to indicate if we are currently calculating the domain",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_defaultScaleValue",
          "type": "Object",
          "description": "default extents to use if none are specified\n\n0 for y axis for best practice",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"x\":[null],\"y\":[null]}",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "disableDynamicUpdate",
          "type": "boolean",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_runOnce",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chartId",
          "type": "string",
          "description": "Internal unique ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorScale.scale"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_recreateScales",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 88,
              "column": 2
            },
            "end": {
              "line": 105,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setXScale",
          "description": "Sets the x scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 112,
              "column": 2
            },
            "end": {
              "line": 117,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetXScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setYScale",
          "description": "Sets the y scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 140,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 146,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMultiYScale",
          "description": "Sets a multi y scale",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetMultiYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 209,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setScale",
          "description": "Helper function to set the x and y based on scale type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 247,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "range"
            },
            {
              "name": "currentAxis"
            },
            {
              "name": "isMultiAxis"
            },
            {
              "name": "key"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setDomain",
          "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 256,
              "column": 3
            },
            "end": {
              "line": 313,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 353,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extents"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_determineExtents",
          "description": "Calculates the extents based on chartExtents, dataExtents, and the data.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 359,
              "column": 2
            },
            "end": {
              "line": 441,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkForExtents",
          "description": "Looks at chartExtents and dataExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 447,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "chartExtents"
            },
            {
              "name": "dataExtents"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkChartExtents",
          "description": "Looks at chartExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 496,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkDataExtents",
          "description": "Looks at dataExtents for extents values per axis; resolves chartExtents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 502,
              "column": 2
            },
            "end": {
              "line": 519,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dExts"
            },
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            },
            {
              "name": "bool"
            },
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findMinMax",
          "description": "Find the min and max values or ordinal values in data, for X and/or Y axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 526,
              "column": 2
            },
            "end": {
              "line": 552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "doX"
            },
            {
              "name": "doY"
            },
            {
              "name": "ordX"
            },
            {
              "name": "ordY"
            },
            {
              "name": "timeX"
            },
            {
              "name": "result"
            },
            {
              "name": "keys"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_getDataExtents",
          "description": "Goes through the data and extracts min and max values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 558,
              "column": 2
            },
            "end": {
              "line": 572,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "keysArr"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findTimeMM",
          "description": "Finds time based Max and Min",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 578,
              "column": 2
            },
            "end": {
              "line": 585,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result"
            },
            {
              "name": "d"
            },
            {
              "name": "l"
            },
            {
              "name": "x"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMin",
          "description": "Compares existing min and new data for min",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 591,
              "column": 2
            },
            "end": {
              "line": 595,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMax",
          "description": "Compares existing max and new data for max",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 601,
              "column": 2
            },
            "end": {
              "line": 605,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_processDataValues",
          "description": "Goes through the values from the data and calcs the extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 611,
              "column": 2
            },
            "end": {
              "line": 627,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "r"
            },
            {
              "name": "d"
            },
            {
              "name": "axis"
            },
            {
              "name": "key"
            },
            {
              "name": "i"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            },
            {
              "name": "v0"
            },
            {
              "name": "v1"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkInSeriesConfig",
          "description": "Loop through each series and see if it has mins and maxes in seriesConfig",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 634,
              "column": 0
            },
            "end": {
              "line": 646,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyChartExtents",
          "description": "Apply chart extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 652,
              "column": 0
            },
            "end": {
              "line": 673,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_searchForExtents",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 679,
              "column": 0
            },
            "end": {
              "line": 695,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "seriesToSearch"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcSeriesToSearch",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 701,
              "column": 0
            },
            "end": {
              "line": 713,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            },
            {
              "name": "seriesToSearch"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcMultiAxisExtents",
          "description": "calculates chart extents for multi axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 719,
              "column": 0
            },
            "end": {
              "line": 763,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_updateDomain",
          "description": "When the domain gets set via a user interaction, set the scale function to use the new domain\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 772,
              "column": 2
            },
            "end": {
              "line": 797,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedDomain"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 798,
              "column": 2
            },
            "end": {
              "line": 803,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setAxisScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 805,
              "column": 2
            },
            "end": {
              "line": 843,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftDims"
            },
            {
              "name": "rightDims"
            },
            {
              "name": "leftAxisSize"
            },
            {
              "name": "rightAxisSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getPixelFromData",
          "description": "Gets pixel values for data values relating to a series (series is the id\nused in seriesConfig). data is an array: [xValue, yValue]\nif margin is specified it will use thos to adjust the pixel values\ninstead of the normal `margin` property\nreturns an object with the result and whether that result is out of\nbounds for the current domain",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 853,
              "column": 2
            },
            "end": {
              "line": 871,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "series"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getDataFromPixel",
          "description": "Gets data values for pixel values relating to a series (series is the id\nused in seriesConfig). pixelVal is an array: [xValue, yValue]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 879,
              "column": 2
            },
            "end": {
              "line": 887,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pixelVal"
            },
            {
              "name": "series"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_pixelRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 892,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 46,
          "column": 10
        },
        "end": {
          "line": 62,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 650,
              "column": 4
            },
            "end": {
              "line": 656,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1148,
              "column": 4
            },
            "end": {
              "line": 1151,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1184,
              "column": 4
            },
            "end": {
              "line": 1187,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 543,
              "column": 4
            },
            "end": {
              "line": 547,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "name": "prevent-web-worker-synchronization",
          "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3028,
              "column": 6
            },
            "end": {
              "line": 3031,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "disable-dynamic-update",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chart-id",
          "description": "Internal unique ID",
          "sourceRange": {
            "file": "px-vis-behavior-scale.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "domain-changed-changed",
          "description": "Fired when the `domainChanged` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-scale"
    },
    {
      "description": "### Usage\n\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data=\"{{chartData}}\"\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      domain-changed=\"{{domainChanged}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-scatter\n      svg=\"[[svg]]\"\n      series-id=\"mySeries\"\n      complete-series-config=\"[[seriesConfig]]\"\n      chart-data=\"[[chartData]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-scatter>",
      "summary": "",
      "path": "px-vis-scatter.html",
      "properties": [
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "interpolationFunction",
          "type": "Function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_basicInterpolators",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1175,
              "column": 4
            },
            "end": {
              "line": 1192,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "lineRadiusLimit",
          "type": "number",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "type": "Object",
          "description": "A holder object for the line generator",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "counterClockwise",
          "type": "boolean",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "useDegrees",
          "type": "boolean",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "serieToRedrawOnTop",
          "type": "Array",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "_isAttached",
          "type": "boolean",
          "description": "Boolean tracking if we are attached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2362,
              "column": 4
            },
            "end": {
              "line": 2365,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.isAttached"
        },
        {
          "name": "markerMapping",
          "type": "Object",
          "description": "Maps dev input marker string to d3 symbols.\n\nTo add additional, custom icons, provide a draw function wrapped in an object and draw your shape using canvas drawing methods. See 'bar' or 'x' as examples",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1750,
              "column": 4
            },
            "end": {
              "line": 1803,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerSymbol",
          "type": "string",
          "description": "The symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\nThis property will be read from the completeSeriesConfig\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1822,
              "column": 4
            },
            "end": {
              "line": 1824,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerScale",
          "type": "number",
          "description": "Scales the size of the scatter marker\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1829,
              "column": 4
            },
            "end": {
              "line": 1831,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerSize",
          "type": "number",
          "description": "the size of the markers\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1836,
              "column": 4
            },
            "end": {
              "line": 1838,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerFillOpacity",
          "type": "number",
          "description": "The opacity of the fill (inside) of the marker\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1843,
              "column": 4
            },
            "end": {
              "line": 1845,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "markerStrokeOpacity",
          "type": "number",
          "description": "The opacity of the stroke (outside) of the marker\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1850,
              "column": 4
            },
            "end": {
              "line": 1852,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "mutedOpacity",
          "type": "number",
          "description": "the opacity value of the fill to be used when muting a serie (stroke is not drawn on mute)\nThis property will be read from the completeSeriesConfig",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1857,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "seriesNumber",
          "type": "number",
          "description": "The index of the series, used for calculating its color.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "scatterGroup",
          "type": "Object",
          "description": "A holder object for the series group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "scatterDots",
          "type": "Object",
          "description": "A holder object for the series objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "scatterBuilder",
          "type": "Object",
          "description": "A holder object for the series builder.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "radial",
          "type": "boolean",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "timeData",
          "type": "string",
          "description": "Name of the variable holding the time stamp in the data. Used for non-timeseries charts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"Timestamp\""
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time to use for drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 4
            },
            "end": {
              "line": 179,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_checkInterpolation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1195,
              "column": 2
            },
            "end": {
              "line": 1215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "_defineRadialLine",
          "description": "Defines a multi-scale d3 line generator and its attrs",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1281,
              "column": 2
            },
            "end": {
              "line": 1368,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toCanvas"
            },
            {
              "name": "multiLine"
            },
            {
              "name": "counterClockwise"
            },
            {
              "name": "useDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "_getPixelCoordForRadialData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1708,
              "column": 2
            },
            "end": {
              "line": 1722,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataX"
            },
            {
              "name": "dataY"
            },
            {
              "name": "yRange"
            },
            {
              "name": "yDomain"
            },
            {
              "name": "yDomainTot"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_adjustAngleForPolarChart",
          "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1727,
              "column": 2
            },
            "end": {
              "line": 1751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "angle"
            },
            {
              "name": "toDegrees"
            }
          ],
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_drawSVGOnTop",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1669,
              "column": 2
            },
            "end": {
              "line": 1674,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "idToRedraw"
            },
            {
              "name": "selfId"
            },
            {
              "name": "d3Selection"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.serieToRedrawOnTopSVG"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the scatter element.\nCalled from an observer that watches for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 202,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawElementDebounced",
          "description": "Debounced version of the above method for drawing or updating the scatter element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addClipPath",
          "description": "Helper to call addClipPath with the element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 4
            },
            "end": {
              "line": 271,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "isIdInMuted",
          "description": "Checks mutedSeries to see if this ID is in there.\nCalled from an observer watching mutedSeries.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 288,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applyTransform",
          "description": "Applies the necessary translate and scale to the scatterDots.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_colorScatter",
          "description": "Adds full color to the scatters.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 334,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawOnTop",
          "description": "Redraw this series on top if needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 345,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "serieToRedrawOnTop"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 10
        },
        "end": {
          "line": 354,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "interpolation-function",
          "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1171,
              "column": 4
            },
            "end": {
              "line": 1173,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
        },
        {
          "name": "line-radius-limit",
          "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1272,
              "column": 4
            },
            "end": {
              "line": 1274,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "line",
          "description": "A holder object for the line generator",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1261,
              "column": 4
            },
            "end": {
              "line": 1263,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "counter-clockwise",
          "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1696,
              "column": 4
            },
            "end": {
              "line": 1699,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "use-degrees",
          "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1703,
              "column": 4
            },
            "end": {
              "line": 1706,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.polarData"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "serie-to-redraw-on-top",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "marker-mapping",
          "description": "Maps dev input marker string to d3 symbols.\n\nTo add additional, custom icons, provide a draw function wrapped in an object and draw your shape using canvas drawing methods. See 'bar' or 'x' as examples",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1750,
              "column": 4
            },
            "end": {
              "line": 1803,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-symbol",
          "description": "The symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\nThis property will be read from the completeSeriesConfig\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1822,
              "column": 4
            },
            "end": {
              "line": 1824,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-scale",
          "description": "Scales the size of the scatter marker\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1829,
              "column": 4
            },
            "end": {
              "line": 1831,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-size",
          "description": "the size of the markers\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1836,
              "column": 4
            },
            "end": {
              "line": 1838,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-fill-opacity",
          "description": "The opacity of the fill (inside) of the marker\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1843,
              "column": 4
            },
            "end": {
              "line": 1845,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "marker-stroke-opacity",
          "description": "The opacity of the stroke (outside) of the marker\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1850,
              "column": 4
            },
            "end": {
              "line": 1852,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "muted-opacity",
          "description": "the opacity value of the fill to be used when muting a serie (stroke is not drawn on mute)\nThis property will be read from the completeSeriesConfig",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 1857,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorD3.scatterMarkers"
        },
        {
          "name": "series-number",
          "description": "The index of the series, used for calculating its color.",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "scatter-group",
          "description": "A holder object for the series group.",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "scatter-dots",
          "description": "A holder object for the series objects.",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 116,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "scatter-builder",
          "description": "A holder object for the series builder.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "radial",
          "description": "Whether the scatter plot is using radial coordinates (x=phase, y=amplitude).",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "time-data",
          "description": "Name of the variable holding the time stamp in the data. Used for non-timeseries charts.",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for drawing.",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-scatter-rendering-ended",
          "description": "px-vis-scatter-rendering-ended",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-scatter"
    },
    {
      "description": "### Usage\n\n    <px-vis-scale\n      x-axis-type=\"time\"\n      y-axis-type=\"linear\"\n      complete-series-config=\"[[seriesConfig]]\"\n      data-extents=\"[[dataExtents]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      chart-data=\"{{chartData}}\"\n      x=\"{{x}}\"\n      y=\"{{y}}\"\n      domain-changed=\"{{domainChanged}}\"\n      selected-domain=\"[[selectedDomain]]\">\n    </px-vis-scale>\n    <px-vis-svg\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      svg=\"{{svg}}\">\n    </px-vis-svg>\n    <px-vis-striping\n      svg=\"[[svg]]\"\n      series-id=\"mySeries\"\n      complete-series-config=\"[[seriesConfig]]\"\n      chart-data=\"[[chartData]]\"\n      width=\"[[width]]\"\n      height=\"[[height]]\"\n      margin=\"[[margin]]\"\n      x=\"[[x]]\"\n      y=\"[[y]]\"\n      domain-changed=\"[[domainChanged]]\">\n    </px-vis-striping>",
      "summary": "",
      "path": "px-vis-striping.html",
      "properties": [
        {
          "name": "canvasContext",
          "type": "Object",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayers",
          "type": "Object",
          "description": "An array of the generated layers",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvasLayersConfig",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesId",
          "type": "string",
          "description": "A unique ID for each line series",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "_dynamicProperties",
          "type": "Array",
          "description": "A list of the dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1802,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "serieToRedrawOnTop",
          "type": "Array",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "stripeConfig",
          "type": "Object",
          "description": "Configuration file for the striping.\n\nExample:\n{\n \"stripe1\": {\n      fillColor: \"rgb(255,0,0)\",\n      fillOpacity: 0.5\n },\n \"stripe2\": {\n      fillColor: \"rgb(0, 255,0)\",\n      fillOpacity: 0.5\n      dash: [5,2]\n  }\n}\n\n`dash` option is for single timestamp entries. This will draw a dashed line instead of an area. Default dash pattern is [5,2]. To create a solid line instead, put [0]",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3088,
              "column": 4
            },
            "end": {
              "line": 3090,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.stripProperties"
        },
        {
          "name": "stripeData",
          "type": "Object",
          "description": "Data to create the striping. A list of start and end pairs for each strip type\n\nExample:\n{\n \"stripe1\": [\n   [t1, t2],\n   [t3, t4]\n],\n \"stripe2\": [\n   [t5, t6],\n   [t7, t8]\n]\n}",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3106,
              "column": 4
            },
            "end": {
              "line": 3110,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.stripProperties"
        },
        {
          "name": "stripeType",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3111,
              "column": 4
            },
            "end": {
              "line": 3113,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.stripProperties"
        },
        {
          "name": "clipPath",
          "type": "boolean",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time to use for drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 87,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_computeValue",
          "description": "Decides if it should use a default or user specified value",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1811,
              "column": 2
            },
            "end": {
              "line": 1814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configValue"
            },
            {
              "name": "def"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_processConfig",
          "description": "sets each property listed in dynamicProperies",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1820,
              "column": 2
            },
            "end": {
              "line": 1832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "seriesId"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "_watchConfigProperty",
          "description": "Cycles through properties and adds them to dynamic properties",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1838,
              "column": 2
            },
            "end": {
              "line": 1848,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "defValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dynamicConfigProperties"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 5
            },
            "end": {
              "line": 103,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_redraw",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawCanvas",
          "description": "Draws or updates the line element.\nCalled from an observer that watches for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "allowCanvasClearing"
            }
          ]
        },
        {
          "name": "_drawCanvasDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "allowCanvasClearing"
            }
          ]
        },
        {
          "name": "_initiateRendering",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderStripes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 183,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "drawClipPath",
          "description": "Draws a clip path for the canvas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawOnTop",
          "description": "Redraw this series on top if needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "serieToRedraw"
            }
          ]
        },
        {
          "name": "_requestCanvasCreation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 57,
          "column": 10
        },
        "end": {
          "line": 220,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "canvas-context",
          "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 306,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers",
          "description": "An array of the generated layers",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "canvas-layers-config",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 318,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-id",
          "description": "A unique ID for each line series",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1772,
              "column": 4
            },
            "end": {
              "line": 1774,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.seriesId"
        },
        {
          "name": "serie-to-redraw-on-top",
          "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1922,
              "column": 4
            },
            "end": {
              "line": 1924,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
        },
        {
          "name": "stripe-config",
          "description": "Configuration file for the striping.\n\nExample:\n{\n \"stripe1\": {\n      fillColor: \"rgb(255,0,0)\",\n      fillOpacity: 0.5\n },\n \"stripe2\": {\n      fillColor: \"rgb(0, 255,0)\",\n      fillOpacity: 0.5\n      dash: [5,2]\n  }\n}\n\n`dash` option is for single timestamp entries. This will draw a dashed line instead of an area. Default dash pattern is [5,2]. To create a solid line instead, put [0]",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3088,
              "column": 4
            },
            "end": {
              "line": 3090,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.stripProperties"
        },
        {
          "name": "stripe-data",
          "description": "Data to create the striping. A list of start and end pairs for each strip type\n\nExample:\n{\n \"stripe1\": [\n   [t1, t2],\n   [t3, t4]\n],\n \"stripe2\": [\n   [t5, t6],\n   [t7, t8]\n]\n}",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3106,
              "column": 4
            },
            "end": {
              "line": 3110,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.stripProperties"
        },
        {
          "name": "stripe-type",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 3111,
              "column": 4
            },
            "end": {
              "line": 3113,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.stripProperties"
        },
        {
          "name": "clip-path",
          "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 778,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.clipPathBoolean"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for drawing.",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 87,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "canvas-context-changed",
          "description": "Fired when the `canvasContext` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "canvas-layers-changed",
          "description": "Fired when the `canvasLayers` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.canvasContext"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "stripe-data-changed",
          "description": "Fired when the `stripeData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.stripProperties"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-striping"
    },
    {
      "description": "### Usage\n\nYou must have a link import for px-vis-behavior-common, e.g.\n\n    <link rel=\"import\" href=\"../px-vis/px-vis-behavior-common.html\" />\n\nand include the PxVisBehavior.thresholds behavior in the behaviors array inside your Polymer object configuration.\n\nThe following attributes are required:\n\n    <px-vis-threshold\n        svg=\"[[svg]]\"\n        width=\"[[width]]\"\n        margin\"[[margin]]\"\n        domain-changed=\"[[domainChanged]]\"\n        y=\"[[y]]\"\n        show-threshold-box=\"true\"\n        complete-series-config=\"[[CompleteSeriesConfig]]\"\n        threshold-data=\"[[thresholdData]]\">\n    </px-vis-threshold>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-threshold-color` | The default color for a threshold",
      "summary": "",
      "path": "px-vis-threshold.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2208,
              "column": 5
            },
            "end": {
              "line": 2213,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "thresholdConfig",
          "type": "Object",
          "description": "Configuration object to define what threshold should map to what color and line style.\nThe object has a key being the threshold name, the value being a configuration object for that threshold. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design. If no color is supplied, then it will match the series color or fallback to a default color.\n- `strokeWidth`: the stroke width for the line.\n- `dashPattern`: string for the dash pattern for the line in the form of stroke,gap. `5,2` would be a 5px dash with 2px gap. `5,2,1,2` would be a 5px dash, 2px gap, 1px dash, 2px gap. '5,0' would be effectively create a solid line.\n- `title`: The display title\n\n\n```\nExample: {\n  \"max\":{\n    \"color\": \"blue\",\n    \"strokeWidth\": \"2\",\n    \"dashPattern\": \"5\",\n    \"title\": \"Maximum\"\n  },\n  \"avg\":{\n    \"color\": \"green\",\n    \"strokeWidth\": \"1\",\n    \"dashPattern\": \"5,2,1,2\",\n    \"title\": \"Fleet Average\"\n  },\n  \"min\":{\n    \"title\": \"Min\"\n   }\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1546,
              "column": 4
            },
            "end": {
              "line": 1549,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "_defaultThresholdConfig",
          "type": "Object",
          "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'strokeWidth': '1',\n  'dashPattern': '5,2'\n}\n```",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1561,
              "column": 4
            },
            "end": {
              "line": 1569,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"strokeWidth\":\"1\",\"dashPattern\":\"5,2\"}",
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "thresholdData",
          "type": "Array",
          "description": "Data representing the events. Example:\n```\n[\n     { \"for\":\"y0\", \"type\":\"max\", \"value\":35.4784 },\n     { \"for\":\"y0\", \"type\":\"min\", \"value\":7.6531 },\n     { \"for\":\"y0\", \"type\":\"mean\", \"value\":15.330657585139331 },\n     { \"for\":\"y1\", \"type\":\"mean\", \"value\":75 },\n     { \"for\":\"\", \"type\":\"quartile\", \"value\":17 }\n ]\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1582,
              "column": 4
            },
            "end": {
              "line": 1584,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_measurementCanvas",
          "type": "Object",
          "description": "The zoom selection type:\n- xy\n- xAxis\n- yAxis",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2319,
              "column": 4
            },
            "end": {
              "line": 2321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.measureText"
        },
        {
          "name": "_measurementCanvasContext",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2322,
              "column": 4
            },
            "end": {
              "line": 2324,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.measureText"
        },
        {
          "name": "_defaultDefaultColor",
          "type": "string",
          "description": "Internal copy of the default color.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"rgb(0,0,0)\""
        },
        {
          "name": "defaultColor",
          "type": "string",
          "description": "Default color of the threshold.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"rgb(0,0,0)\""
        },
        {
          "name": "thresholdGroup",
          "type": "Object",
          "description": "Holder object for the event svg \"g\" element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "thresholdLine",
          "type": "Object",
          "description": "Holder object for the event line elements.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "thresholdRect",
          "type": "Object",
          "description": "Holder object for the event rectangle elements.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "displayTitle",
          "type": "boolean",
          "description": "Whether to show the title on the threshold.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_animationFrameDone",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_thresholdBuilder",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "drawDebounceTime",
          "type": "number",
          "description": "Debounce time to use for drawing.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "language",
          "type": "string",
          "description": "A valid IETF language key used for localization.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en\""
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2215,
              "column": 2
            },
            "end": {
              "line": 2222,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 464,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 821,
              "column": 2
            },
            "end": {
              "line": 825,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "_createMeasurementCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2327,
              "column": 2
            },
            "end": {
              "line": 2338,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "font"
            }
          ],
          "inheritedFrom": "PxVisBehavior.measureText"
        },
        {
          "name": "_measureTextOnCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2340,
              "column": 2
            },
            "end": {
              "line": 2345,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "PxVisBehavior.measureText"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcThemeOrConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "drawElement",
          "description": "Draws or updates the threshold element.\nCalled from an observer that watches for data and the necessary d3 objects.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 199,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_drawElementDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_enterLine",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_mergeLine",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 4
            },
            "end": {
              "line": 267,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_enterRect",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_mergeRect",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_enterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 296,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_mergeText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 4
            },
            "end": {
              "line": 313,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "elem"
            }
          ]
        },
        {
          "name": "_rectWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 4
            },
            "end": {
              "line": 323,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            },
            {
              "name": "d"
            },
            {
              "name": "title"
            }
          ]
        },
        {
          "name": "_setColors",
          "description": "Sets the colors.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 4
            },
            "end": {
              "line": 340,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getColors",
          "description": "Returns the color of the associated series or returns the default color.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 354,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            }
          ]
        },
        {
          "name": "_calcYPos",
          "description": "Calculates a y-position for the text and rectangle.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 366,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "i"
            },
            {
              "name": "offset"
            }
          ]
        },
        {
          "name": "_getYVal",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 4
            },
            "end": {
              "line": 389,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_calcTitle",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 411,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ]
        },
        {
          "name": "_updateColors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 413,
              "column": 4
            },
            "end": {
              "line": 420,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 51,
          "column": 10
        },
        "end": {
          "line": 421,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 456,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "threshold-config",
          "description": "Configuration object to define what threshold should map to what color and line style.\nThe object has a key being the threshold name, the value being a configuration object for that threshold. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design. If no color is supplied, then it will match the series color or fallback to a default color.\n- `strokeWidth`: the stroke width for the line.\n- `dashPattern`: string for the dash pattern for the line in the form of stroke,gap. `5,2` would be a 5px dash with 2px gap. `5,2,1,2` would be a 5px dash, 2px gap, 1px dash, 2px gap. '5,0' would be effectively create a solid line.\n- `title`: The display title\n\n\n```\nExample: {\n  \"max\":{\n    \"color\": \"blue\",\n    \"strokeWidth\": \"2\",\n    \"dashPattern\": \"5\",\n    \"title\": \"Maximum\"\n  },\n  \"avg\":{\n    \"color\": \"green\",\n    \"strokeWidth\": \"1\",\n    \"dashPattern\": \"5,2,1,2\",\n    \"title\": \"Fleet Average\"\n  },\n  \"min\":{\n    \"title\": \"Min\"\n   }\n}\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1546,
              "column": 4
            },
            "end": {
              "line": 1549,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "threshold-data",
          "description": "Data representing the events. Example:\n```\n[\n     { \"for\":\"y0\", \"type\":\"max\", \"value\":35.4784 },\n     { \"for\":\"y0\", \"type\":\"min\", \"value\":7.6531 },\n     { \"for\":\"y0\", \"type\":\"mean\", \"value\":15.330657585139331 },\n     { \"for\":\"y1\", \"type\":\"mean\", \"value\":75 },\n     { \"for\":\"\", \"type\":\"quartile\", \"value\":17 }\n ]\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1582,
              "column": 4
            },
            "end": {
              "line": 1584,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 517,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 803,
              "column": 4
            },
            "end": {
              "line": 806,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "px-vis-behavior-d3.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 814,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "default-color",
          "description": "Default color of the threshold.",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "threshold-group",
          "description": "Holder object for the event svg \"g\" element.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "threshold-line",
          "description": "Holder object for the event line elements.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "threshold-rect",
          "description": "Holder object for the event rectangle elements.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "display-title",
          "description": "Whether to show the title on the threshold.",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 6
            },
            "end": {
              "line": 127,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "draw-debounce-time",
          "description": "Debounce time to use for drawing.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 6
            },
            "end": {
              "line": 143,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "language",
          "description": "A valid IETF language key used for localization.",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 150,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-threshold"
    },
    {
      "description": "### Usage\n\n    <px-vis-toolbar\n      config=\"[[config]]\"\n      horizontal-alignment=\"left\">\n    </px-vis-toolbar>\n\nExample of a custom `config` object:\n\n    {\n      \"customzoom\": {\n        // label used for the tooltip of this button:\n        \"tooltipLabel\": \"zoom\",\n        // px-icon-set icon used for this button:\n        \"icon\": \"px-vis:zoom\",\n        \"onClick\": \"function() {this.set(\\\"_internalShowTooltip\\\", false);}\",\n        // context to be used in `onClick`:\n        \"onClickContext': \"toolbar\",\n        // if a button is part of a button group then it becomes selected when clicked\n        // and all other buttons in the same group become deselected:\n        \"buttonGroup\": 1,\n        // force this button to be selected at start\n        // (including applying its actionConfig and subConfig):\n        \"selected\": true,\n        // this config will be propagated to px-vis-interaction-space:\n        \"actionConfig\": {\n          // key = an event, value = either a predefined action from `actionMapping` in interaction-space:\n          \"mousedown\": \"startZooming\",\n          \"mouseup\": \"stopZooming\",\n          // or a function, where `this` will be bound to the chart:\n          \"mousemove\": \"function() { console.log(\\\"Mouse moved on the chart!\\\");}\"\n          // or null, which ensures previously registered actions will be removed:\n          \"mouseout\": \"null\",\n        },\n        // subConfig allows you to define a second row of buttons\n        // which will be displayed after clicking the main button:\n        \"subConfig\": {\n          \"x\": {\n            // you can use a title instead of/in addition to the icon:\n            \"title\": \"X\",\n            \"tooltipLabel\": \"Zoom on X axis only\",\n            // an event will be fired when clicking on this button:\n            \"eventName\": \"my-custom-click\",\n            \"selectable\": true,\n            \"selected\": true,\n            // this function will be run when clicking the button\n            // `this` will be bound to the chart unless `onClickContext` is defined\n            // if defined in HTML, needs to be a string - if JS, can be a function:\n            \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"xAxis\\\");}\"\n          },\n          \"y\": {\n            \"title\": \"Y\",\n            \"tooltipLabel\": \"Zoom on Y axis only\",\n            \"selectable\": true,\n            \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"yAxis\\\");}\"\n          },\n          \"xy\": {\n            \"title\": \"XY\",\n            \"tooltipLabel\": \"Zoom on X and Y axis\",\n            \"selectable\": true,\n            \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"xy\\\");}\"\n          },\n          \"zoomIn\": {\n            \"icon\": \"fa-plus\",\n            \"tooltipLabel\": \"zoom in\",\n            // these events are vis specific events and\n            // are automatically caught by the chart and handled:\n            \"eventName\": \"px-vis-toolbar-zoom-in\"\n          },\n          \"zoomOut\": {\n            \"icon\": \"fa-minus\",\n            \"tooltipLabel\": \"zoom out\",\n            \"eventName\": \"px-vis-toolbar-zoom-out\"\n          },\n          \"undoZoom\": {\n            \"icon\": \"fa-undo\",\n            \"tooltipLabel\": \"undo zoom\",\n            \"eventName\": \"px-vis-toolbar-undo-zoom\"\n          },\n          \"resetZoom\": {\n            \"icon\": \"px-vis:full-screen\",\n            \"tooltipLabel\": \"reset zoom to initial value\",\n            \"eventName\": \"px-vis-toolbar-reset-zoom\"\n          }\n        }\n      },\n      //default \"out of the box\" panning button:\n      \"pan\": true,\n      //default \"out of the box\" tooltip button:\n      \"tooltip\": true",
      "summary": "",
      "path": "px-vis-toolbar.html",
      "properties": [
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 617,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{\"mousedown\":\"startZooming\",\"mouseup\":\"stopZooming\",\"mouseout\":\"resetTooltip\",\"mousemove\":\"calcTooltipData\"}"
        },
        {
          "name": "withinChart",
          "type": "boolean",
          "description": "Whether the toolbar is within a chart. Drives where the secondary toolbar is displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "chartMargin",
          "type": "Object",
          "description": "The chart margins. Used to position the secondary toolbar if withinChart is true.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_defaultActionsMapping",
          "type": "Object",
          "description": "Config for default actions: tooltip/pan/zoom.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 558,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "currentSubConfig",
          "type": "Object",
          "description": "Current sub-configuration. Can be the result of the config or passed in from another toolbar.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 562,
              "column": 6
            },
            "end": {
              "line": 565,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_internalConfig",
          "type": "Object",
          "description": "Current config used to build the toolbar.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 569,
              "column": 6
            },
            "end": {
              "line": 571,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "horizontalAlignment",
          "type": "string",
          "description": "Horizontal alignment of the toolbar. Should be 'left' or 'right'.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 6
            },
            "end": {
              "line": 578,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "subToolbarAlignment",
          "type": "string",
          "description": "Alignment of the sub toolbar. Accepted values:\n- horizontal\n- vertical\n- above (when in a chart, the sub toolbar will be displayed\nabove the chart rather than on top of it)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 586,
              "column": 6
            },
            "end": {
              "line": 589,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"horizontal\""
        },
        {
          "name": "config",
          "type": "Object",
          "description": "Configuration object for the toolbar. This object drives what buttons are available on\nthe toolbar and what they do. Three actions can be used out of the box by passing them\nas keys in this config: 'zoom', 'pan' and 'tooltip'.\nAny other kind of actions and buttons can be defined through this object. See above for example.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 597,
              "column": 6
            },
            "end": {
              "line": 599,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clearAllActions",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 625,
              "column": 4
            },
            "end": {
              "line": 639,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_extendConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 641,
              "column": 4
            },
            "end": {
              "line": 651,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "defaultConfig"
            },
            {
              "name": "customConfig"
            }
          ]
        },
        {
          "name": "_configChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 653,
              "column": 4
            },
            "end": {
              "line": 693,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_clickItem",
          "description": "Called when clicking an item of the main toolbar.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 697,
              "column": 4
            },
            "end": {
              "line": 759,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_tryProcessSubConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 761,
              "column": 4
            },
            "end": {
              "line": 782,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_tryApplySelectedSub",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 784,
              "column": 4
            },
            "end": {
              "line": 794,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_clickSubItem",
          "description": "Called when clicking an item of the secondary toolbar.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 799,
              "column": 4
            },
            "end": {
              "line": 817,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_processItem",
          "description": "Processes an item click: fire event if needed and set action config appropriately",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 822,
              "column": 4
            },
            "end": {
              "line": 844,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_returnFn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 846,
              "column": 4
            },
            "end": {
              "line": 852,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fn"
            }
          ]
        },
        {
          "name": "_setupContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 854,
              "column": 4
            },
            "end": {
              "line": 867,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            },
            {
              "name": "fn"
            }
          ]
        },
        {
          "name": "_setMouseCursor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 869,
              "column": 4
            },
            "end": {
              "line": 888,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            },
            {
              "name": "resetIcon"
            }
          ]
        },
        {
          "name": "_getIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 890,
              "column": 4
            },
            "end": {
              "line": 892,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_getSelectedClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 893,
              "column": 4
            },
            "end": {
              "line": 895,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ]
        },
        {
          "name": "_hasTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 896,
              "column": 4
            },
            "end": {
              "line": 902,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_alignRow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 903,
              "column": 4
            },
            "end": {
              "line": 911,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "row"
            }
          ]
        },
        {
          "name": "_positionMainRow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 912,
              "column": 4
            },
            "end": {
              "line": 918,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartMargin"
            },
            {
              "name": "horizontalAlignement"
            }
          ]
        },
        {
          "name": "_positionSubRow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 919,
              "column": 4
            },
            "end": {
              "line": 932,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "withinChart"
            },
            {
              "name": "chartMargin"
            },
            {
              "name": "horizontalAlignement"
            }
          ]
        },
        {
          "name": "_getSubRowClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 933,
              "column": 4
            },
            "end": {
              "line": 943,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "subToolbarAlignment"
            }
          ]
        },
        {
          "name": "_isWithinChart",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 944,
              "column": 4
            },
            "end": {
              "line": 950,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "withinChart"
            }
          ]
        },
        {
          "name": "_getRowDirection",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 951,
              "column": 4
            },
            "end": {
              "line": 961,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "horizontalAlignment"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 163,
          "column": 10
        },
        "end": {
          "line": 962,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "sourceRange": {
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 617,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "within-chart",
          "description": "Whether the toolbar is within a chart. Drives where the secondary toolbar is displayed.",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 194,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "chart-margin",
          "description": "The chart margins. Used to position the secondary toolbar if withinChart is true.",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "current-sub-config",
          "description": "Current sub-configuration. Can be the result of the config or passed in from another toolbar.",
          "sourceRange": {
            "start": {
              "line": 562,
              "column": 6
            },
            "end": {
              "line": 565,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "horizontal-alignment",
          "description": "Horizontal alignment of the toolbar. Should be 'left' or 'right'.",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 6
            },
            "end": {
              "line": 578,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "sub-toolbar-alignment",
          "description": "Alignment of the sub toolbar. Accepted values:\n- horizontal\n- vertical\n- above (when in a chart, the sub toolbar will be displayed\nabove the chart rather than on top of it)",
          "sourceRange": {
            "start": {
              "line": 586,
              "column": 6
            },
            "end": {
              "line": 589,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "config",
          "description": "Configuration object for the toolbar. This object drives what buttons are available on\nthe toolbar and what they do. Three actions can be used out of the box by passing them\nas keys in this config: 'zoom', 'pan' and 'tooltip'.\nAny other kind of actions and buttons can be defined through this object. See above for example.",
          "sourceRange": {
            "start": {
              "line": 597,
              "column": 6
            },
            "end": {
              "line": 599,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "action-config-changed",
          "description": "Fired when the `actionConfig` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-vis-toolbar-secondary-toggled",
          "description": "px-vis-toolbar-secondary-toggled",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "current-sub-config-changed",
          "description": "Fired when the `currentSubConfig` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-toolbar"
    },
    {
      "description": "### Usage\n\n    <px-vis-dynamic-menu\n      dynamic-menu-config=\"[[dynamicMenuConfig]]\">\n    </px-vis-dynamic-menu>",
      "summary": "",
      "path": "px-vis-dynamic-menu.html",
      "properties": [
        {
          "name": "animationConfig",
          "type": "Object",
          "description": "Animation config for the fadein/fadeout animations. Configure the \"timing\"\nobject of both animations if needed (delay, duration, ease).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "entryAnimation",
          "type": "string",
          "description": "Convenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_entryAnimationChanged\""
            }
          },
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "exitAnimation",
          "type": "string",
          "description": "Convenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_exitAnimationChanged\""
            }
          },
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "dynamicMenuConfig",
          "type": "Array",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "_shown",
          "type": "boolean",
          "description": "Whether the menu is currently shown.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_opened",
          "type": "boolean",
          "description": "Whether the menu is currently opened.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "displayClass",
          "type": "string",
          "description": "Class to use when showing the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"inline-block\""
        },
        {
          "name": "additionalDetail",
          "type": "Object",
          "description": "Data to be passed back out when running an item's action or firing the associated event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 6
            },
            "end": {
              "line": 96,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_entryAnimationChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "_exitAnimationChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "_copyProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config1"
            },
            {
              "name": "config2"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "_cloneConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "_getAnimationConfigRecursive",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 128,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "map"
            },
            {
              "name": "allConfigs"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "getAnimationConfig",
          "description": "An element implementing `Polymer.NeonAnimationRunnerBehavior` calls this method to configure\nan animation with an optional type. Elements implementing `Polymer.NeonAnimatableBehavior`\nshould define the property `animationConfig`, which is either a configuration object\nor a map of animation type to array of configuration objects.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "_configureAnimations",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animation-runner-behavior.html",
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "configs"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimationRunnerBehavior"
        },
        {
          "name": "_shouldComplete",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animation-runner-behavior.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "activeEntries"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimationRunnerBehavior"
        },
        {
          "name": "_complete",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animation-runner-behavior.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 73,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "activeEntries"
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimationRunnerBehavior"
        },
        {
          "name": "playAnimation",
          "description": "Plays an animation with an optional `type`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animation-runner-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string="
            },
            {
              "name": "cookie",
              "type": "!Object="
            }
          ],
          "inheritedFrom": "Polymer.NeonAnimationRunnerBehavior"
        },
        {
          "name": "cancelAnimation",
          "description": "Cancels the currently running animations.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animation-runner-behavior.html",
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.NeonAnimationRunnerBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "fadeIn",
          "description": "Call this to fade in the menu icon. Doesn't apply if no menu config is defined.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "fadeOut",
          "description": "Call this to fade out the menu icon. Doesn't apply if no menu config is defined.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onNeonAnimationFinish",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_buttonClicked",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_clickItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 215,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 10
        },
        "end": {
          "line": 216,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "animation-config",
          "description": "Animation config for the fadein/fadeout animations. Configure the \"timing\"\nobject of both animations if needed (delay, duration, ease).",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 6
            },
            "end": {
              "line": 123,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "entry-animation",
          "description": "Convenience property for setting an 'entry' animation. Do not set `animationConfig.entry`\nmanually if using this. The animated node is set to `this` if using this property.",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "exit-animation",
          "description": "Convenience property for setting an 'exit' animation. Do not set `animationConfig.exit`\nmanually if using this. The animated node is set to `this` if using this property.",
          "sourceRange": {
            "file": "bower_components/neon-animation/neon-animatable-behavior.html",
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.NeonAnimatableBehavior"
        },
        {
          "name": "dynamic-menu-config",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "display-class",
          "description": "Class to use when showing the element.",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "additional-detail",
          "description": "Data to be passed back out when running an item's action or firing the associated event.",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 6
            },
            "end": {
              "line": 96,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-dynamic-menu"
    },
    {
      "description": "### Usage\n\n    <px-vis-register-item\n        item=\"[[item]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        type=\"[[type]]\"\n        x-axis-type=\"[[xAxisType]]\"\n        y-axis-type=\"[[yAxisType]]\">\n    </px-vis-register-item>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-register-series-marker-width` | The width (thickness) of the series marker\n  `--px-vis-register-series-name` | The color of the data series name\n  `--px-vis-register-data-value` | The color of the data series value\n  `--px-vis-register-box` | The color of the box around the register when a scrollbar is present\n  |\n  |\n  |\n  `--px-tooltip-background-color` | The color of the tooltip\n  `--px-tooltip-text-color` | The color of the tooltip text\n  `--px-tooltip-light-background-color` | The color of the light version tooltip\n  `--px-tooltip-light-text-color` | The color of the light version tooltip text\n  `--px-tooltip-light-border-color`| The color of the light version tooltip border",
      "summary": "",
      "path": "px-vis-register-item.html",
      "properties": [
        {
          "name": "truncationLength",
          "type": "number",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "numberFormatCulture",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en-US\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatIsCurrency",
          "type": "boolean",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatCurrency",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"$0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatDefault",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormat",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatUnformat",
          "type": "string",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatZero",
          "type": "string",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "dynamicMenuConfig",
          "type": "Array",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "A holder for a line of the register",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_wrapperClass",
          "type": "string",
          "description": "Which flex classes get applied to make it side or top",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_configName",
          "type": "string",
          "description": "The name of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "nameKey",
          "type": "string",
          "description": "The key holdiong the name of the item in the config",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"name\"",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_truncatedName",
          "type": "string",
          "description": "the truncated name for the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_didTruncate",
          "type": "boolean",
          "description": "Whether truncation ran or not",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_baseClasses",
          "type": "string",
          "description": "Base classes for register item based on its type (vertical/horizontal)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Defines if the register should be horizontal or vertical. Options are:\n - `vertical`\n - `horizontal`",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "\"vertical\"",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_mouseEnterHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_mouseLeaveHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_hasDynamicMenu",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_itemMutedToStart",
          "type": "string",
          "description": "Decides if the item should be muted",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 414,
              "column": 4
            },
            "end": {
              "line": 417,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_itemColor",
          "type": "string",
          "description": "calcates the color of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 421,
              "column": 4
            },
            "end": {
              "line": 424,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_dashPattern",
          "type": "string",
          "description": "calculates the dash pattern of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 428,
              "column": 4
            },
            "end": {
              "line": 431,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "preventMuting",
          "type": "boolean",
          "description": "Prevents the mute on click behavior",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 438,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "disableClick",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.disableClick"
        },
        {
          "name": "_xUnit",
          "type": "string",
          "description": "The units for the x value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_yUnit",
          "type": "string",
          "description": "The units for the y value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 6
            },
            "end": {
              "line": 159,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_itemX",
          "type": "number",
          "description": "Calculates the value for x.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": false
            }
          }
        },
        {
          "name": "_slash",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_itemY",
          "type": "number",
          "description": "Calculates the value of y.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": false
            }
          }
        },
        {
          "name": "_ttStyle",
          "type": "string",
          "description": "Used to style the px-number-formatter to match the register styling.\nShould be 'light' or 'dark'.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_truncateName",
          "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": ", {Integer} len"
            },
            {
              "name": "len"
            }
          ],
          "return": {
            "type": "String",
            "desc": "truncatedString"
          },
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "_getSeriesWrapperClass",
          "description": "returns the correct classes for the series based on type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 305,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "hozAlign"
            },
            {
              "name": "_hasScrollBar"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_getSeriesWrapperClassReverse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 307,
              "column": 2
            },
            "end": {
              "line": 315,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_isOfType",
          "description": "tests if an item is of a type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 320,
              "column": 2
            },
            "end": {
              "line": 322,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toTest"
            },
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 139,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getWrapperClass",
          "description": "Returns the correct flex type based on the register type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeConfigName",
          "description": "Returns the name of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeTruncatedName",
          "description": "returns the truncated name of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_configName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeDidTruncate",
          "description": "decide if series name was truncated. If so, add a tooltip showing full name",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            },
            {
              "name": "len"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getConfigName",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 230,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeBaseClasses",
          "description": "helper function to set initial classes",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 235,
              "column": 2
            },
            "end": {
              "line": 242,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getDynamicMenuClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 243,
              "column": 2
            },
            "end": {
              "line": 252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_menuConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "muteUnmuteSeries",
          "description": "Method to mute or umute",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 576,
              "column": 2
            },
            "end": {
              "line": 595,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "series"
            },
            {
              "name": "fromRegister"
            }
          ],
          "inheritedFrom": "PxVisBehavior.muteUnmuteSeries"
        },
        {
          "name": "_computeItemMutedToStart",
          "description": "returns if the series should be muted to start",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 444,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_computeItemColor",
          "description": "Function which takes an index and returns the appropriate dataVisColor\n\n`i` is a series index number\n\n`rgb(r,g,b)` return the appropriate rgb values based in the series index",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 469,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "rgb"
          },
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_computeItemDashPattern",
          "description": "Function which takes an index and returns the appropriate dash pattern\n\n`e.g. pattern = \"5,2\"` return the appropriate svg stroke-dasharray value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 479,
              "column": 2
            },
            "end": {
              "line": 487,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "pattern"
          },
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_mutedToStart",
          "description": "helper function to set initial classes\n\nAdds or removes muted class to those series in the register",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 502,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_seriesClicked",
          "description": "Event function which is fired when a series is clicked.\n\nAdds series to mutedSeries property or toggles that key's boolean.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 512,
              "column": 2
            },
            "end": {
              "line": 530,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_toggleSeries",
          "description": "observer function which is fired when the mutedSeries property is changed.\n\nAdds or removes muted class to those series in the register.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 539,
              "column": 2
            },
            "end": {
              "line": 547,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "_xFormatterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 4
            },
            "end": {
              "line": 195,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_yFormatterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 199,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_xSpanChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 203,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_ySpanChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 264,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "completeSeriesConfig"
            }
          ]
        },
        {
          "name": "_disableClickFunc",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disableClick"
            }
          ]
        },
        {
          "name": "_calcDashPattern",
          "description": "Returns a striped pattern that can be used by background:linear-gradient(...) to represent a dashed vertical line.\n\nex:  'to bottom, red 0px, red 5px, transparent 5px, transparent 10px, [repeat]'",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 4
            },
            "end": {
              "line": 309,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "color"
            },
            {
              "name": "pattern"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 132,
          "column": 10
        },
        "end": {
          "line": 310,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "truncation-length",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "number-format-culture",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-is-currency",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-currency",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-default",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-unformat",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-zero",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "dynamic-menu-config",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "item",
          "description": "A holder for a line of the register",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "name-key",
          "description": "The key holdiong the name of the item in the config",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "type",
          "description": "Defines if the register should be horizontal or vertical. Options are:\n - `vertical`\n - `horizontal`",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "prevent-muting",
          "description": "Prevents the mute on click behavior",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 438,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRegister.generalItem"
        },
        {
          "name": "disable-click",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRegister.disableClick"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "type-changed",
          "description": "Fired when the `type` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-register-item"
    },
    {
      "description": "### Usage\n\n    <px-vis-register-item-pie\n        item=\"[[item]]\"\n        item-index=\"[[index]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        chart-data=\"[[chartData]]\"\n        type=\"[[type]]\"\n        x-axis-type=\"[[xAxisType]]\"\n        y-axis-type=\"[[yAxisType]]\"\n        use-percentage=\"[[usePercentage]]\">\n    </px-vis-register-item-pie>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-register-series-name` | The color of the data series name\n  `--px-vis-register-data-value` | The color of the data series value\n  `--px-vis-register-box` | The color of the box around the register when a scrollbar is present\n  |\n  |\n  |\n  `--px-tooltip-background-color` | The color of the tooltip\n  `--px-tooltip-text-color` | The color of the tooltip text\n  `--px-tooltip-light-background-color` | The color of the light version tooltip\n  `--px-tooltip-light-text-color` | The color of the light version tooltip text\n  `--px-tooltip-light-border-color`| The color of the light version tooltip border",
      "summary": "",
      "path": "px-vis-register-item-pie.html",
      "properties": [
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "truncationLength",
          "type": "number",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "numberFormatCulture",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en-US\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatIsCurrency",
          "type": "boolean",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatCurrency",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"$0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatDefault",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormat",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatUnformat",
          "type": "string",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatZero",
          "type": "string",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "usePercentage",
          "type": "boolean",
          "description": "For pie charts whether the values should be displayed in %",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.pie"
        },
        {
          "name": "dynamicMenuConfig",
          "type": "Array",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "A holder for a line of the register",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_wrapperClass",
          "type": "string",
          "description": "Which flex classes get applied to make it side or top",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_configName",
          "type": "string",
          "description": "The name of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "nameKey",
          "type": "string",
          "description": "The key holdiong the name of the item in the config",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"name\"",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_truncatedName",
          "type": "string",
          "description": "the truncated name for the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_didTruncate",
          "type": "boolean",
          "description": "Whether truncation ran or not",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_baseClasses",
          "type": "string",
          "description": "Base classes for register item based on its type (vertical/horizontal)",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Defines if the register should be horizontal or vertical. Options are:\n - `vertical`\n - `horizontal`",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "\"vertical\"",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_mouseEnterHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_mouseLeaveHandler",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_hasDynamicMenu",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "itemIndex",
          "type": "number",
          "description": "The index passed in from the dom repeat.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_truncateName",
          "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": ", {Integer} len"
            },
            {
              "name": "len"
            }
          ],
          "return": {
            "type": "String",
            "desc": "truncatedString"
          },
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getSeriesWrapperClass",
          "description": "returns the correct classes for the series based on type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 305,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "hozAlign"
            },
            {
              "name": "_hasScrollBar"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_getSeriesWrapperClassReverse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 307,
              "column": 2
            },
            "end": {
              "line": 315,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_isOfType",
          "description": "tests if an item is of a type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 320,
              "column": 2
            },
            "end": {
              "line": 322,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toTest"
            },
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 139,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getWrapperClass",
          "description": "Returns the correct flex type based on the register type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeConfigName",
          "description": "Returns the name of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeTruncatedName",
          "description": "returns the truncated name of the item",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_configName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeDidTruncate",
          "description": "decide if series name was truncated. If so, add a tooltip showing full name",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 216,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            },
            {
              "name": "len"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getConfigName",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 221,
              "column": 2
            },
            "end": {
              "line": 230,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_computeBaseClasses",
          "description": "helper function to set initial classes",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 235,
              "column": 2
            },
            "end": {
              "line": 242,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getDynamicMenuClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 243,
              "column": 2
            },
            "end": {
              "line": 252,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_menuConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "_getColor",
          "description": "Helper function to return the correct color for a particular index.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 189,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_calcIndex",
          "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 199,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "i"
            },
            {
              "name": "l"
            }
          ],
          "inheritedFrom": "PxColorsBehavior.getSeriesColors"
        },
        {
          "name": "_returnPieVal",
          "description": "Returns the value of the pie slice.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "axis"
            },
            {
              "name": "usePercentage"
            }
          ]
        },
        {
          "name": "_getPieUnit",
          "description": "Returns the units for the pie slice.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "usePercentage"
            }
          ]
        },
        {
          "name": "_getPieBackColor",
          "description": "Returns the background color for the pie slice.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "index"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 97,
          "column": 10
        },
        "end": {
          "line": 158,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "truncation-length",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "number-format-culture",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-is-currency",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-currency",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-default",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-unformat",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-zero",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "use-percentage",
          "description": "For pie charts whether the values should be displayed in %",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRegister.pie"
        },
        {
          "name": "dynamic-menu-config",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "item",
          "description": "A holder for a line of the register",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "name-key",
          "description": "The key holdiong the name of the item in the config",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "type",
          "description": "Defines if the register should be horizontal or vertical. Options are:\n - `vertical`\n - `horizontal`",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        },
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "item-index",
          "description": "The index passed in from the dom repeat.",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "type-changed",
          "description": "Fired when the `type` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorRegister.itemShared"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-register-item-pie"
    },
    {
      "description": "### Usage\n\n    <px-vis-register-datetime\n        first-date-time=\"[[_firstDateTime]]\"\n        second-date-time=\"[[_secondDateTime]]\"\n        separator=\"[[_separator]]\"\n        x-axis-type=\"[[xAxisType]]\">\n    </px-vis-register-datetime>\n\n\n### Time, number, and name formatting\nFormatting for the timestamps, the data values, and the series names can be controlled via a series of properties.\nPlease see the properties for configuration details.",
      "summary": "",
      "path": "px-vis-register-datetime.html",
      "properties": [
        {
          "name": "_firstDateTime",
          "type": "string",
          "description": "Holder for the formated first datetime string",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.datetime"
        },
        {
          "name": "_secondDateTime",
          "type": "string",
          "description": "Holder for the formated second datetime string",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 380,
              "column": 4
            },
            "end": {
              "line": 383,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.datetime"
        },
        {
          "name": "_separator",
          "type": "string",
          "description": "Holder for the formated separator character",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 390,
              "column": 4
            },
            "end": {
              "line": 393,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.datetime"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "seriesKey",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_computeItemColor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "seriesKey"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 41,
          "column": 10
        },
        "end": {
          "line": 60,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "series-key",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-register-datetime"
    },
    {
      "description": "### Usage\n\n    <px-vis-register\n        height=\"50\"\n        use-percentage=\"true\"\n        width=\"[[width]]\"\n        type=\"horizontal\"\n        tooltip-data=[[tooltipData]]\n        chart-data=[[chartData]]\n        muted-series=\"[[mutedSeries]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        x-axis-type=\"time\"\n        muted-series=\"{{mutedSeries}}\">\n    </px-vis-register>\n\n\n### Sending Data to the Register\ntooltipData is in the form:\n\n```\n    {\n        \"time\": \"2015-03-25T20:34:47.085Z\",\n        \"series\":[{\n            \"name\":\"seriesId1\",\n            \"coord\":[xCoord1, yCoord1],  //in pixel space\n            \"value\":{\n                \"x\":xVal1,             //in data space\n                \"seriesId1\":yVal1    //in data space\n            }\n        },{\n            \"name\":\"seriesId2\",\n            \"coord\":[xCoord2, yCoord2],  //in pixel space\n            \"value\":{\n                \"x\":xVal2,             //in data space\n                \"seriesId2\":yVal2    //in data space\n            },\n        }],\n        \"mouse\":[ mouseX, mouseY ],   //in pixel space\n        \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n        \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n    }\n```\n\n When not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. Ex:\n\n```\n    {\n        \"time\": null,\n        \"series\":[{\n            \"name\":\"seriesId1\",\n            \"value\": null\n        },{\n            \"name\":\"seriesName1\",\n            \"value\": null\n        }],\n        \"mouse\": null,\n        \"xArr\": null,\n        \"yArr\": null\n    }\n```\n\n### Reporting Data from the Register\nThe component returns an object via mutedSeries which the chart can take and react to:\n\n    {\n        'seriesId1':true,\n        'seriesId2':false,\n    }\n\n### Time, number, and name formatting\nFormatting for the timestamps, the data values, and the series names can be controlled via a series of properties. Please see the properties for configuration details.\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-register-series-marker-width` | The width (thickness) of the series marker\n  `--px-vis-register-series-name` | The color of the data series name\n  `--px-vis-register-data-value` | The color of the data series value\n  `--px-vis-register-box` | The color of the box around the register when a scrollbar is present\n  |\n  |\n  |\n  `--px-tooltip-background-color` | The color of the tooltip\n  `--px-tooltip-text-color` | The color of the tooltip text\n  `--px-tooltip-light-background-color` | The color of the light version tooltip\n  `--px-tooltip-light-text-color` | The color of the light version tooltip text\n  `--px-tooltip-light-border-color`| The color of the light version tooltip border",
      "summary": "",
      "path": "px-vis-register.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "truncationLength",
          "type": "number",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "numberFormatCulture",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en-US\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatIsCurrency",
          "type": "boolean",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatCurrency",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"$0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatDefault",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormat",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatUnformat",
          "type": "string",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatZero",
          "type": "string",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "firstDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"HH:mm:ss ZZ\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "secondDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"DD MMM YYYY\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "type": "string",
          "description": "Defines a separator character between the two datetime strings.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"|\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "type": "string",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"utc\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "usePercentage",
          "type": "boolean",
          "description": "For pie charts whether the values should be displayed in %",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.pie"
        },
        {
          "name": "_firstDateTime",
          "type": "string",
          "description": "Holder for the formated first datetime string",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.datetime"
        },
        {
          "name": "_secondDateTime",
          "type": "string",
          "description": "Holder for the formated second datetime string",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 380,
              "column": 4
            },
            "end": {
              "line": 383,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.datetime"
        },
        {
          "name": "_separator",
          "type": "string",
          "description": "Holder for the formated separator character",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 390,
              "column": 4
            },
            "end": {
              "line": 393,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorRegister.datetime"
        },
        {
          "name": "forceDateTimeDisplay",
          "type": "boolean",
          "description": "Forces the use of the timestamp at the top",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1897,
              "column": 4
            },
            "end": {
              "line": 1900,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.forceDateTimeDisplay"
        },
        {
          "name": "groupings",
          "type": "number",
          "description": "A holder for a line of the register",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorRegister.groupings"
        },
        {
          "name": "dynamicMenuConfig",
          "type": "Array",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "disableClick",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorRegister.disableClick"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Defines if the register should be `horizontal` or `vertical`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 232,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "\"vertical\""
        },
        {
          "name": "horizontalAlignment",
          "type": "string",
          "description": "If the `type` is 'horizontal', this property determines how the register\nshould align horizontally, using flex align:\n- 'left'\n- 'center'\n- 'right'\n- 'justify'\n- 'spaced'\nIf the register starts overflowing, this will be ignored so that all register\nitems are accessible via scrolling.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"left\""
        },
        {
          "name": "_hasScrollBar",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 6
            },
            "end": {
              "line": 251,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_series",
          "type": "Array",
          "description": "List of the series to add to the register.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "preventMinSize",
          "type": "boolean",
          "description": "Prevents the register from having a minimum size.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 6
            },
            "end": {
              "line": 266,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "preventMuting",
          "type": "boolean",
          "description": "Prevents the mute on-click behavior.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "chartWidth",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_itemCount",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 6
            },
            "end": {
              "line": 287,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "inertRegister",
          "type": "boolean",
          "description": "If inert, the register won't process any new data coming in. Useful when the register is hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_truncateName",
          "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": ", {Integer} len"
            },
            {
              "name": "len"
            }
          ],
          "return": {
            "type": "String",
            "desc": "truncatedString"
          },
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "formatTimestamp",
          "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "timezone"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "formatedDatetimeString"
          },
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getSeriesWrapperClass",
          "description": "returns the correct classes for the series based on type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 280,
              "column": 2
            },
            "end": {
              "line": 305,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "hozAlign"
            },
            {
              "name": "_hasScrollBar"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_getSeriesWrapperClassReverse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 307,
              "column": 2
            },
            "end": {
              "line": 315,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_isOfType",
          "description": "tests if an item is of a type",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 320,
              "column": 2
            },
            "end": {
              "line": 322,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "toTest"
            },
            {
              "name": "type"
            }
          ],
          "inheritedFrom": "PxVisBehaviorRegister.register"
        },
        {
          "name": "_formatDateTime",
          "description": "Function which takes the incoming datetime from tooltipData and formats it.\nReturns set values via setting helper properties used in the html.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 340,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeSeries",
          "description": "Returns the list of series with proper grouping.\nAlso sets _seriesKeys and _tooltipDataObj.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 370,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_displayTime",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xAxisType"
            },
            {
              "name": "forceDateTimeDisplay"
            }
          ]
        },
        {
          "name": "_getMinSizeClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "preventMinSize"
            }
          ]
        },
        {
          "name": "_returnHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 4
            },
            "end": {
              "line": 398,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_returnWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 4
            },
            "end": {
              "line": 406,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartWidth"
            },
            {
              "name": "width"
            },
            {
              "name": "margin"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_scrollBarsPresent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 4
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_scrollBarsPresentAF",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 416,
              "column": 4
            },
            "end": {
              "line": 431,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_scrollBarsPresentPie",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 4
            },
            "end": {
              "line": 439,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_scrollBarsPresentPieAF",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 4
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 195,
          "column": 10
        },
        "end": {
          "line": 461,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 6
            },
            "end": {
              "line": 282,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "truncation-length",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "number-format-culture",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-is-currency",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-currency",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-default",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-unformat",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-zero",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "first-date-time-format",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "second-date-time-format",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "description": "Defines a separator character between the two datetime strings.",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "use-percentage",
          "description": "For pie charts whether the values should be displayed in %",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRegister.pie"
        },
        {
          "name": "force-date-time-display",
          "description": "Forces the use of the timestamp at the top",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1897,
              "column": 4
            },
            "end": {
              "line": 1900,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.forceDateTimeDisplay"
        },
        {
          "name": "groupings",
          "description": "A holder for a line of the register",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRegister.groupings"
        },
        {
          "name": "dynamic-menu-config",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 2038,
              "column": 4
            },
            "end": {
              "line": 2040,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "disable-click",
          "description": "",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorRegister.disableClick"
        },
        {
          "name": "type",
          "description": "Defines if the register should be `horizontal` or `vertical`.",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 232,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "horizontal-alignment",
          "description": "If the `type` is 'horizontal', this property determines how the register\nshould align horizontally, using flex align:\n- 'left'\n- 'center'\n- 'right'\n- 'justify'\n- 'spaced'\nIf the register starts overflowing, this will be ignored so that all register\nitems are accessible via scrolling.",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "prevent-min-size",
          "description": "Prevents the register from having a minimum size.",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 6
            },
            "end": {
              "line": 266,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "prevent-muting",
          "description": "Prevents the mute on-click behavior.",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "chart-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "inert-register",
          "description": "If inert, the register won't process any new data coming in. Useful when the register is hidden.",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "type-changed",
          "description": "Fired when the `type` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-register"
    },
    {
      "description": "### Usage\n\n    <px-vis-tooltip\n        hover-target=[[mouseRect]]\n        mouse-position=\"[[mousePosition]]\"\n        width=\"250\"\n        margin=\"[[margin]]\"\n        chart-data=\"[[chartData]]\"\n        tooltip-data=\"[[tooltipData]]\"\n        complete-series-config=\"[[completeSeriesConfig]]\"\n        x-axis-type=\"time\"\n        tooltip-style=\"light\"\n        muted-series=\"[[mutedSeries]]\">\n    </px-vis-tooltip>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n:----------------|:-------------\n  `--px-vis-register-series-name` | The color of the data series name\n  `--px-vis-register-data-value` | The color of the data series value\n  `--px-vis-register-box` | The color of the box around the register when a scrollbar is present\n  |\n  |\n  |\n  `--px-tooltip-background-color` | The color of the tooltip\n  `--px-tooltip-text-color` | The color of the tooltip text\n  `--px-tooltip-light-background-color` | The color of the light version tooltip\n  `--px-tooltip-light-text-color` | The color of the light version tooltip text\n  `--px-tooltip-light-border-color`| The color of the light version tooltip border",
      "summary": "",
      "path": "px-vis-tooltip.html",
      "properties": [
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"linear\"",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "seriesKeys",
          "type": "Array",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "_mutedCompleteSeriesConfig",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 507,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_nonMutedSeriesKeys",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 508,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "truncationLength",
          "type": "number",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "numberFormatCulture",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en-US\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatIsCurrency",
          "type": "boolean",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatCurrency",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"$0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatDefault",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormat",
          "type": "string",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.00\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatUnformat",
          "type": "string",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0,0.0000\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "numberFormatZero",
          "type": "string",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"0\"",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "firstDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"HH:mm:ss ZZ\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "secondDateTimeFormat",
          "type": "string",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"DD MMM YYYY\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "type": "string",
          "description": "Defines a separator character between the two datetime strings.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"|\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "type": "string",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"utc\"",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "forceDateTimeDisplay",
          "type": "boolean",
          "description": "Forces the use of the timestamp at the top",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1897,
              "column": 4
            },
            "end": {
              "line": 1900,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.forceDateTimeDisplay"
        },
        {
          "name": "groupings",
          "type": "number",
          "description": "A holder for a line of the register",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "PxVisBehaviorRegister.groupings"
        },
        {
          "name": "hoverTarget",
          "type": "Object",
          "description": "The DOM element over which the tooltip should be shown.\nGenerally some <g> or <rect> element on the svg.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "mousePosition",
          "type": "Array",
          "description": "The x,y screen position where you want the tooltip to be displayed.\nCan be the mouse position; can also be any arbitrary screen position.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "tooltipStyle",
          "type": "string",
          "description": "Tooltip style supports two values:\n- `light` : gives the tooltip a white background\n- `dark`  : gives the tooltip a black background (default)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"dark\""
        },
        {
          "name": "orientation",
          "type": "string",
          "description": "Orientation for the tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "_groupings",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "hide",
          "type": "boolean",
          "description": "Whether to hide the tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_internalHidden",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_tooltipElem",
          "type": "HTMLElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 171,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_registerElem",
          "type": "HTMLElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 6
            },
            "end": {
              "line": 174,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_mutedTooltipData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 6
            },
            "end": {
              "line": 178,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 363,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "_computeNonMutedSeriesKeys",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 514,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_computeMutedCompleteSeriesConfig",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 531,
              "column": 2
            },
            "end": {
              "line": 553,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "completeSeriesConfig"
            },
            {
              "name": "hardMute"
            },
            {
              "name": "mutedSeries"
            }
          ],
          "inheritedFrom": "PxVisBehavior.mutedCompleteSeriesConfig"
        },
        {
          "name": "_truncateName",
          "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": ", {Integer} len"
            },
            {
              "name": "len"
            }
          ],
          "return": {
            "type": "String",
            "desc": "truncatedString"
          },
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "formatTimestamp",
          "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datetime"
            },
            {
              "name": "timezone"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "formatedDatetimeString"
          },
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 815,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 823,
              "column": 2
            },
            "end": {
              "line": 828,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 836,
              "column": 2
            },
            "end": {
              "line": 841,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 849,
              "column": 2
            },
            "end": {
              "line": 858,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 860,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 880,
              "column": 2
            },
            "end": {
              "line": 885,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 904,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 922,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 927,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 960,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 965,
              "column": 2
            },
            "end": {
              "line": 982,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 984,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1026,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1028,
              "column": 2
            },
            "end": {
              "line": 1030,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 185,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "forceShow",
          "description": "Forces the tooltip to show by calling _show on px-tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 4
            },
            "end": {
              "line": 199,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberSeriesChanged"
            }
          ]
        },
        {
          "name": "forceHide",
          "description": "Forces the tooltip to hide by calling _hide on px-tooltip.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 208,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkGroups",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeInternalHidden",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeMutedData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 288,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 95,
          "column": 10
        },
        "end": {
          "line": 289,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 662,
              "column": 4
            },
            "end": {
              "line": 665,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 670,
              "column": 4
            },
            "end": {
              "line": 674,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "x-axis-type",
          "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1058,
              "column": 4
            },
            "end": {
              "line": 1061,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "y-axis-type",
          "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1070,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.axisTypes"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 384,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 457,
              "column": 5
            },
            "end": {
              "line": 460,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "series-keys",
          "description": "Representes the keys avaiable in completeSeriesConfig.",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 486,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.seriesKeys"
        },
        {
          "name": "truncation-length",
          "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.truncating"
        },
        {
          "name": "number-format-culture",
          "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-is-currency",
          "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-currency",
          "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 257,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-default",
          "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format",
          "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-unformat",
          "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 305,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "number-format-zero",
          "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.formatting"
        },
        {
          "name": "first-date-time-format",
          "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "second-date-time-format",
          "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "separator",
          "description": "Defines a separator character between the two datetime strings.",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "timezone",
          "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
          "sourceRange": {
            "file": "px-vis-behavior-datetime.html",
            "start": {
              "line": 75,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorTime.datetime"
        },
        {
          "name": "force-date-time-display",
          "description": "Forces the use of the timestamp at the top",
          "sourceRange": {
            "file": "px-vis-behavior-common.html",
            "start": {
              "line": 1897,
              "column": 4
            },
            "end": {
              "line": 1900,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.forceDateTimeDisplay"
        },
        {
          "name": "groupings",
          "description": "A holder for a line of the register",
          "sourceRange": {
            "file": "px-vis-behavior-register.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorRegister.groupings"
        },
        {
          "name": "hover-target",
          "description": "The DOM element over which the tooltip should be shown.\nGenerally some <g> or <rect> element on the svg.",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "mouse-position",
          "description": "The x,y screen position where you want the tooltip to be displayed.\nCan be the mouse position; can also be any arbitrary screen position.",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 134,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "tooltip-style",
          "description": "Tooltip style supports two values:\n- `light` : gives the tooltip a white background\n- `dark`  : gives the tooltip a black background (default)",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "orientation",
          "description": "Orientation for the tooltip.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "hide",
          "description": "Whether to hide the tooltip.",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-tooltip"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "  Name:\n  PxColorsBehavior.dataVisColors\n\n  Description:\n  Polymer behavior that provides the dataVisColors and an order to use them\n\n  ",
          "summary": "",
          "path": "px-vis-behavior-colors.html",
          "properties": [
            {
              "name": "seriesColorList",
              "type": "Array",
              "description": "Defines an colors in order that will be used for series.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxColorsBehavior.dataVisColors",
          "attributes": [
            {
              "name": "series-color-list",
              "description": "Defines an colors in order that will be used for series.",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "  Name:\n  PxColorsBehavior.dataVisColorTheming\n\n  Description:\n  Attempts to read data vis color theme from CSS style variables or default\n  values and apply to the visualization element.\n\n  ",
          "summary": "",
          "path": "px-vis-behavior-colors.html",
          "properties": [
            {
              "name": "seriesColorList",
              "type": "Array",
              "description": "Defines an colors in order that will be used for series.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "syncCSSTheme",
              "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 60,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_debounceSyncCSSTheme",
              "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 4
                },
                "end": {
                  "line": 79,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_applyStyleVariables",
              "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 125,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_colorHexToRgb",
              "description": "Converts a hex-format color to RGB.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 136,
                  "column": 4
                },
                "end": {
                  "line": 146,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex",
                  "type": "String",
                  "description": "A color in hex format"
                }
              ],
              "return": {
                "type": "String",
                "desc": "A color in RGB format"
              }
            },
            {
              "name": "_checkIfDevSetSeriesColorOrder",
              "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 4
                },
                "end": {
                  "line": 169,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "Boolean",
                "desc": "true if dev set seriesColorOrder"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 0
            },
            "end": {
              "line": 171,
              "column": 35
            }
          },
          "privacy": "public",
          "name": "PxColorsBehavior.dataVisColorTheming",
          "attributes": [
            {
              "name": "series-color-list",
              "description": "Defines an colors in order that will be used for series.",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxColorsBehavior.getSeriesColors\n\n    Description:\n    Polymer behavior that provides the ability to retrieve the color of a serie given an index\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-colors.html",
          "properties": [
            {
              "name": "seriesColorList",
              "type": "Array",
              "description": "Defines an colors in order that will be used for series.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            }
          ],
          "methods": [
            {
              "name": "_getColor",
              "description": "Helper function to return the correct color for a particular index.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 189,
                  "column": 2
                },
                "end": {
                  "line": 194,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "_calcIndex",
              "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 199,
                  "column": 2
                },
                "end": {
                  "line": 201,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "i"
                },
                {
                  "name": "l"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 0
            },
            "end": {
              "line": 202,
              "column": 36
            }
          },
          "privacy": "public",
          "name": "PxColorsBehavior.getSeriesColors",
          "attributes": [
            {
              "name": "series-color-list",
              "description": "Defines an colors in order that will be used for series.",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.observerCheck\n\n    Description:\n    Polymer behavior that provides a function used to check if any argument\n    in an observer is undefined\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.observerCheck",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.baseSize\n\n    Description:\n    Polymer behavior that provides height and width\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 0
            },
            "end": {
              "line": 61,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.baseSize",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.margins\n\n    Description:\n    Polymer behavior that provides margin definitions\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 0
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.margins",
          "attributes": [
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.sizing\n\n    Description:\n    Polymer behavior that provides the basic sizing properties for px-vis components.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 0
            },
            "end": {
              "line": 134,
              "column": 50
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.sizing",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.truncating\n\n    Description:\n    Polymer behavior that provides the string truncation method\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "truncationLength",
              "type": "number",
              "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 163,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "10"
            }
          ],
          "methods": [
            {
              "name": "_truncateName",
              "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 179,
                  "column": 2
                },
                "end": {
                  "line": 199,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "String",
                  "description": ", {Integer} len"
                },
                {
                  "name": "len"
                }
              ],
              "return": {
                "type": "String",
                "desc": "truncatedString"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 0
            },
            "end": {
              "line": 200,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.truncating",
          "attributes": [
            {
              "name": "truncation-length",
              "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 163,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.formatting\n\n    Description:\n    Polymer behavior that provides the string and number formating options and methods. Includes name truncation and numbro-element number formating options.\n\n    Dependencies:\n    - numbro-element components\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "truncationLength",
              "type": "number",
              "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 163,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "10",
              "inheritedFrom": "PxVisBehavior.truncating"
            },
            {
              "name": "numberFormatCulture",
              "type": "string",
              "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 227,
                  "column": 4
                },
                "end": {
                  "line": 230,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"en-US\""
            },
            {
              "name": "numberFormatIsCurrency",
              "type": "boolean",
              "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 242,
                  "column": 4
                },
                "end": {
                  "line": 245,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "numberFormatCurrency",
              "type": "string",
              "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 257,
                  "column": 4
                },
                "end": {
                  "line": 260,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"$0,0.00\""
            },
            {
              "name": "numberFormatDefault",
              "type": "string",
              "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 4
                },
                "end": {
                  "line": 275,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"0,0.0000\""
            },
            {
              "name": "numberFormat",
              "type": "string",
              "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 287,
                  "column": 4
                },
                "end": {
                  "line": 290,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"0,0.00\""
            },
            {
              "name": "numberFormatUnformat",
              "type": "string",
              "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 302,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"0,0.0000\""
            },
            {
              "name": "numberFormatZero",
              "type": "string",
              "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 316,
                  "column": 4
                },
                "end": {
                  "line": 319,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"0\""
            }
          ],
          "methods": [
            {
              "name": "_truncateName",
              "description": "_truncateName takes a string and string length [optional].\nReturns a truncated string with the middle replaced by an ellipsis. The ellipsis does not count towards the total character count.\nFollows these truncation principles: http://www.gesdh.com/predix/product/principles/truncation/\nExample: LNG_BAH_HOT_EFFECTIVENESS_CORE8 --> LNG_B...CORE8\n\nLength cannot be less than 2 characters.\nDefault length is 10 characters.\n\nIf the string is less than or equal to the length or the length is invalid, returns the original string.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 179,
                  "column": 2
                },
                "end": {
                  "line": 199,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "String",
                  "description": ", {Integer} len"
                },
                {
                  "name": "len"
                }
              ],
              "return": {
                "type": "String",
                "desc": "truncatedString"
              },
              "inheritedFrom": "PxVisBehavior.truncating"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 0
            },
            "end": {
              "line": 321,
              "column": 29
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.formatting",
          "attributes": [
            {
              "name": "truncation-length",
              "description": "Defines if the label should get truncated and to how many characters.\n\nDefault length is 10 characters, not including the ellipsis which gets inserted.\n\nThe length must be at least 2.\n\nTo disable truncation, set the value to -1",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 163,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.truncating"
            },
            {
              "name": "number-format-culture",
              "description": "Defines how a display number should be formatted:\nProvide localization for currency formatting\n\nFor valid formats and features, see: http://numbrojs.com/languages.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 227,
                  "column": 4
                },
                "end": {
                  "line": 230,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "number-format-is-currency",
              "description": "Defines how a display number should be formatted:\nSpecify whether the value should be formatted as a currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 242,
                  "column": 4
                },
                "end": {
                  "line": 245,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "number-format-currency",
              "description": "Defines how a display number should be formatted:\nProvide a new default format for currency\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 257,
                  "column": 4
                },
                "end": {
                  "line": 260,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "number-format-default",
              "description": "Defines how a display number should be formatted:\nProvides a new default format\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 4
                },
                "end": {
                  "line": 275,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "number-format",
              "description": "Defines how a display number should be formatted:\nThe format used to generate the output\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 287,
                  "column": 4
                },
                "end": {
                  "line": 290,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "number-format-unformat",
              "description": "Defines how a display number should be converted back to a Number:\nA formatted String to extract a value from\n\nFor valid formats and features, see: http://numbrojs.com/format.html#unformat\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 302,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "number-format-zero",
              "description": "Defines how to display 0 values\n\nFor valid formats and features, see: http://numbrojs.com/format.html\nFor docs on the component, see: https://www.predix-ui.com/#/components/px-number-formatter/",
              "sourceRange": {
                "start": {
                  "line": 316,
                  "column": 4
                },
                "end": {
                  "line": 319,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.dataset\n\n    Description:\n    Polymer behavior that provides the data object for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 0
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.dataset",
          "attributes": [
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.completeSeriesConfig\n\n    Description:\n    Polymer behavior that provides a computed series configuration object to components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 0
            },
            "end": {
              "line": 389,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.completeSeriesConfig",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.combinedMutedSeries\n\n    Description:\n    Polymer behavior that provides the combinedMutedSeries property px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "combinedMutedSeries",
              "type": "Object",
              "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 409,
                  "column": 4
                },
                "end": {
                  "line": 413,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 0
            },
            "end": {
              "line": 415,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.combinedMutedSeries",
          "attributes": [
            {
              "name": "combined-muted-series",
              "description": "Aimed at regrouping all muted series when different behavior can mute\nseries (multi series for example: brush + navigator + categories)",
              "sourceRange": {
                "start": {
                  "line": 409,
                  "column": 4
                },
                "end": {
                  "line": 413,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "combined-muted-series-changed",
              "description": "Fired when the `combinedMutedSeries` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.mutedSeries\n\n    Description:\n    Polymer behavior that provides the mutedSeries property px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 0
            },
            "end": {
              "line": 462,
              "column": 39
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.mutedSeries",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.seriesKeys\n\n    Description:\n    Polymer behavior that provides the seriesKeys definition\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "seriesKeys",
              "type": "Array",
              "description": "Representes the keys avaiable in completeSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 481,
                  "column": 4
                },
                "end": {
                  "line": 486,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 476,
              "column": 0
            },
            "end": {
              "line": 488,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.seriesKeys",
          "attributes": [
            {
              "name": "series-keys",
              "description": "Representes the keys avaiable in completeSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 481,
                  "column": 4
                },
                "end": {
                  "line": 486,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.mutedCompleteSeriesConfig\n\n    Description:\n    Polymer behavior that provides the _mutedCompleteSeriesConfig property\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "seriesKeys",
              "type": "Array",
              "description": "Representes the keys avaiable in completeSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 481,
                  "column": 4
                },
                "end": {
                  "line": 486,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.seriesKeys"
            },
            {
              "name": "_mutedCompleteSeriesConfig",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 504,
                  "column": 4
                },
                "end": {
                  "line": 507,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_nonMutedSeriesKeys",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 508,
                  "column": 4
                },
                "end": {
                  "line": 511,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_computeNonMutedSeriesKeys",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 514,
                  "column": 2
                },
                "end": {
                  "line": 529,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeMutedCompleteSeriesConfig",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 531,
                  "column": 2
                },
                "end": {
                  "line": 553,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "completeSeriesConfig"
                },
                {
                  "name": "hardMute"
                },
                {
                  "name": "mutedSeries"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 0
            },
            "end": {
              "line": 554,
              "column": 121
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.mutedCompleteSeriesConfig",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "series-keys",
              "description": "Representes the keys avaiable in completeSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 481,
                  "column": 4
                },
                "end": {
                  "line": 486,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.seriesKeys"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.muteUnmuteSeries\n\n    Description:\n    Polymer behavior that provides the mutedSeries property and methods to mute/unmute series for px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "methods": [
            {
              "name": "muteUnmuteSeries",
              "description": "Method to mute or umute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 576,
                  "column": 2
                },
                "end": {
                  "line": 595,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                },
                {
                  "name": "fromRegister"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 569,
              "column": 0
            },
            "end": {
              "line": 596,
              "column": 30
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.muteUnmuteSeries",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.tooltipData\n\n    Description:\n    Polymer behavior that provides the tooltipData property px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "tooltipData",
              "type": "Object",
              "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 662,
                  "column": 4
                },
                "end": {
                  "line": 665,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "defaultEmptyData",
              "type": "Object",
              "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 670,
                  "column": 4
                },
                "end": {
                  "line": 674,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 610,
              "column": 0
            },
            "end": {
              "line": 676,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.tooltipData",
          "attributes": [
            {
              "name": "tooltip-data",
              "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
              "sourceRange": {
                "start": {
                  "line": 662,
                  "column": 4
                },
                "end": {
                  "line": 665,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "default-empty-data",
              "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
              "sourceRange": {
                "start": {
                  "line": 670,
                  "column": 4
                },
                "end": {
                  "line": 674,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "tooltip-data-changed",
              "description": "Fired when the `tooltipData` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "default-empty-data-changed",
              "description": "Fired when the `defaultEmptyData` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.crosshairData\n\n    Description:\n    Polymer behavior that provides the crosshairData property px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "crosshairData",
              "type": "Object",
              "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 712,
                  "column": 4
                },
                "end": {
                  "line": 715,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "generatingCrosshairData",
              "type": "string",
              "description": "Bool indicating if interaction space is currently generating data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 721,
                  "column": 4
                },
                "end": {
                  "line": 725,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "crosshairPixelSearch",
              "type": "number",
              "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 731,
                  "column": 4
                },
                "end": {
                  "line": 734,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 0
            },
            "end": {
              "line": 736,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.crosshairData",
          "attributes": [
            {
              "name": "crosshair-data",
              "description": "Data reported back by the interaction space component so charts can share a crosshair. Has two sets of data: 1) the full data retrieved at the shared key so if all charts use the same datasets, this data can just be displayed on all the charts. 2) a list of just the shared key so if they use different datasets, a search for the closest data at each point can be made. crosshairData is in the form:\n\n```\n   {\n       \"rawData\":[{\n           \"[[sharedKey]]\": [[sharedKeyVal1]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       },{\n           \"[[sharedKey]]\": [[sharedKeyVal2]],\n           \"[[key1]]\":[[val]],\n           \"[[key2]]\":[[val]]\n       }],\n       \"timeStamps\":[ timeStamp1, timeStamp2 ]\n   }\n```",
              "sourceRange": {
                "start": {
                  "line": 712,
                  "column": 4
                },
                "end": {
                  "line": 715,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "generating-crosshair-data",
              "description": "Bool indicating if interaction space is currently generating data",
              "sourceRange": {
                "start": {
                  "line": 721,
                  "column": 4
                },
                "end": {
                  "line": 725,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "crosshair-pixel-search",
              "description": "Allows the crosshair to search all datapoints within a pixel radius. If set\nto 0 will only pick up the closest point",
              "sourceRange": {
                "start": {
                  "line": 731,
                  "column": 4
                },
                "end": {
                  "line": 734,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "crosshair-data-changed",
              "description": "Fired when the `crosshairData` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "generating-crosshair-data-changed",
              "description": "Fired when the `generatingCrosshairData` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.extentsData\n\n    Description:\n    Polymer behavior that provides the extentsData property px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "extentsData",
              "type": "Object",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "extentsAction",
              "type": "string",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 750,
              "column": 0
            },
            "end": {
              "line": 783,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.extentsData",
          "attributes": [
            {
              "name": "extents-data",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "sourceRange": {
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "extents-action",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "sourceRange": {
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "extents-data-changed",
              "description": "Fired when the `extentsData` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "extents-action-changed",
              "description": "Fired when the `extentsAction` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.commonMethods\n\n    Description:\n    Polymer behavior that provides the commonMethods properties px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [],
          "methods": [
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              }
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              }
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              }
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              }
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ]
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              }
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              }
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ]
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ]
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ]
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ]
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ]
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ]
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ]
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ]
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 797,
              "column": 0
            },
            "end": {
              "line": 1031,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.commonMethods",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.axisTypes\n\n    Description:\n    Polymer behavior that provides 2 properties defining the type of axis of a\n    px-vis components.\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "xAxisType",
              "type": "string",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\""
            },
            {
              "name": "yAxisType",
              "type": "string",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1046,
              "column": 0
            },
            "end": {
              "line": 1075,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.axisTypes",
          "attributes": [
            {
              "name": "x-axis-type",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "y-axis-type",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.zoomSelection\n\n    Description:\n    Polymer behavior that provides 1 property defining how the selection should\n    behave when user draw a box for zooming\n\n    Dependencies:\n    -\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "selectionType",
              "type": "string",
              "description": "The shape of selection (zoom) the user can do. Can be:\n- 'xy': user can draw a rectangle freely\n- 'xAxis': user can select a range within the X axis, the Y axis always\n  being entirely selected\n- 'yAxis': user can select a range within the Y axis, the X axis always\n  being entirely selected",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1101,
                  "column": 4
                },
                "end": {
                  "line": 1104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"xy\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1090,
              "column": 0
            },
            "end": {
              "line": 1106,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.zoomSelection",
          "attributes": [
            {
              "name": "selection-type",
              "description": "The shape of selection (zoom) the user can do. Can be:\n- 'xy': user can draw a rectangle freely\n- 'xAxis': user can select a range within the X axis, the Y axis always\n  being entirely selected\n- 'yAxis': user can select a range within the Y axis, the X axis always\n  being entirely selected",
              "sourceRange": {
                "start": {
                  "line": 1101,
                  "column": 4
                },
                "end": {
                  "line": 1104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.chartExtents\n\n    Description:\n    Polymer behavior that provides a chartExtents object to components.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "chartExtents",
              "type": "Object",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1118,
              "column": 0
            },
            "end": {
              "line": 1153,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.chartExtents",
          "attributes": [
            {
              "name": "chart-extents",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "chart-extents-changed",
              "description": "Fired when the `chartExtents` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.dataExtents\n\n    Description:\n    Polymer behavior that provides a dataExtents object to components.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "dataExtents",
              "type": "Object",
              "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1184,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1165,
              "column": 0
            },
            "end": {
              "line": 1189,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.dataExtents",
          "attributes": [
            {
              "name": "data-extents",
              "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "start": {
                  "line": 1184,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "data-extents-changed",
              "description": "Fired when the `dataExtents` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.amplitudeExtents\n\n    Description:\n    Polymer behavior that provides a amplitudeExtents object to components.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "amplitudeExtents",
              "type": "Array",
              "description": "Polar's equivalant to chartExtents. Adjusts the max to the given value and takes the min of the min value given and the data's min val: Math.min(amplitudeExtents[0], chartDataMin)\n\nPolar coords must start at the minimum value or else the angle is irrelevant. It also cannot be less than 0.\n\n```\n [minNumber, maxNumber]\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1212,
                  "column": 4
                },
                "end": {
                  "line": 1215,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1201,
              "column": 0
            },
            "end": {
              "line": 1217,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.amplitudeExtents",
          "attributes": [
            {
              "name": "amplitude-extents",
              "description": "Polar's equivalant to chartExtents. Adjusts the max to the given value and takes the min of the min value given and the data's min val: Math.min(amplitudeExtents[0], chartDataMin)\n\nPolar coords must start at the minimum value or else the angle is irrelevant. It also cannot be less than 0.\n\n```\n [minNumber, maxNumber]\n```",
              "sourceRange": {
                "start": {
                  "line": 1212,
                  "column": 4
                },
                "end": {
                  "line": 1215,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.events\n\n    Description:\n    Polymer behavior that provides config and data to manage \"events\" (px-vis-event) on the chart\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "eventConfig",
              "type": "Object",
              "description": "Configuration object to define what event should map to what icon and color.\nThe object has a key being the event name, the value being a configuration object for that event. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design\n- `icon`: the reference to the icon; for 'px' it is an icon set and an icon name; for an image, it is a path\n- `type`: 'px', or 'image'.\n- `offset`: a 2 element array with the number of pixels to offset the icon. offset[0] is along the x-axis; offset[1] is along the y-axis; necessary for some icons to adjust their values to achieve a better alignment over the event line.\n- `size`: a size in pixels for images.\n- `enableTooltip` enable/disable tooltip on the event, useful when using a lot of events\n- `firstDateTimeFormat`: moment.js format string for the first part of the timestamp if the x Axis is time based\n- `separator`: the separator character between the two datetime strings\n- `secondDateTimeFormat`: moment.js format string for the second part of the timestamp if the x Axis is time based\n- `tooltipOrientation`: orientation of the tooltip\n- `timezone`: the moment.js timezone to be used for the timestamp\n```\nFormat: {\n  \"Event-Name-A\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"a px icon\",\n    \"type\": \"px\",\n    \"offset\":[0,0],\n    'enableTooltip': true\n  },\n  \"Event-Name-C\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"path-to-an-img\",\n    \"type\": \"image\",\n    \"offset\":[0,0]\n  },\n}\n```\n\n```\nExample: {\n  \"Recalibrate\":{\n    \"color\": \"rgb(0,0,255)\",\n    \"icon\": \"px-vis:mov\",\n    \"type\": \"px\",\n    \"offset\":[-3,0]\n  },\n  \"Fan stop\":{\n    \"icon\": \"Dancing_banana.gif\",\n    \"type\": \"image\",\n    \"offset\":[-2,-20],\n    \"size\":\"25\"\n   }\n}\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1283,
                  "column": 4
                },
                "end": {
                  "line": 1285,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "defaultEventConfig",
              "type": "Object",
              "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'color': 'grey7', //or theme var\n  'icon': 'px-vis:mov',\n  'type': 'px',\n  'offset': 0,\n  'lineColor': 'grey9',\n  'lineWeght': 1,\n  'enableTooltip': true\n  'firstDateTimeFormat': 'HH:mm:ss ZZ',\n  'secondDateTimeFormat': 'DD MMM YYYY',\n  'separator': '|',\n  'timezone': 'utc',\n  'tooltipOrientation': 'left'\n}\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1309,
                  "column": 4
                },
                "end": {
                  "line": 1311,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_defaultDefaultEventConfig",
              "type": "Object",
              "description": "Default defaultEventConfig\n\n```\nDefault: {\n  'color': 'rgb(0,0,0)',\n  'icon': 'px-utl:information',\n  'type': 'px',\n  'offset': 0,\n  'size': 16,\n  'lineColor': 'rgb(0,0,0)',\n  'lineWeight': 1,\n  'enableTooltip': true,\n  'firstDateTimeFormat': 'HH:mm:ss ZZ',\n  'secondDateTimeFormat': 'DD MMM YYYY',\n  'separator': '|',\n  'timezone': 'utc',\n  'tooltipOrientation': 'left'\n}\n```",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1334,
                  "column": 4
                },
                "end": {
                  "line": 1353,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"color\":\"rgb(0,0,0)\",\"icon\":\"px-utl:information\",\"type\":\"px\",\"offset\":[0,0],\"size\":16,\"lineColor\":\"rgb(0,0,0)\",\"lineWeight\":1,\"enableTooltip\":true,\"firstDateTimeFormat\":\"HH:mm:ss ZZ\",\"secondDateTimeFormat\":\"DD MMM YYYY\",\"separator\":\"|\",\"timezone\":\"utc\",\"tooltipOrientation\":\"left\"}"
            },
            {
              "name": "eventData",
              "type": "Array",
              "description": "Data representing the events. Example:\n[\n   {\n     \"id\": \"123\",\n     \"x\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"id\": \"456\",\n     \"x\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"id\": \"789\",\n     \"x\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"id\": \"333\",\n     \"x\": 8,\n     \"label\": \"Default\"\n   }\n ]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1380,
                  "column": 4
                },
                "end": {
                  "line": 1382,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1229,
              "column": 0
            },
            "end": {
              "line": 1384,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.events",
          "attributes": [
            {
              "name": "event-config",
              "description": "Configuration object to define what event should map to what icon and color.\nThe object has a key being the event name, the value being a configuration object for that event. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design\n- `icon`: the reference to the icon; for 'px' it is an icon set and an icon name; for an image, it is a path\n- `type`: 'px', or 'image'.\n- `offset`: a 2 element array with the number of pixels to offset the icon. offset[0] is along the x-axis; offset[1] is along the y-axis; necessary for some icons to adjust their values to achieve a better alignment over the event line.\n- `size`: a size in pixels for images.\n- `enableTooltip` enable/disable tooltip on the event, useful when using a lot of events\n- `firstDateTimeFormat`: moment.js format string for the first part of the timestamp if the x Axis is time based\n- `separator`: the separator character between the two datetime strings\n- `secondDateTimeFormat`: moment.js format string for the second part of the timestamp if the x Axis is time based\n- `tooltipOrientation`: orientation of the tooltip\n- `timezone`: the moment.js timezone to be used for the timestamp\n```\nFormat: {\n  \"Event-Name-A\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"a px icon\",\n    \"type\": \"px\",\n    \"offset\":[0,0],\n    'enableTooltip': true\n  },\n  \"Event-Name-C\":{\n    \"color\": \"a color, rgb or hex\",\n    \"icon\": \"path-to-an-img\",\n    \"type\": \"image\",\n    \"offset\":[0,0]\n  },\n}\n```\n\n```\nExample: {\n  \"Recalibrate\":{\n    \"color\": \"rgb(0,0,255)\",\n    \"icon\": \"px-vis:mov\",\n    \"type\": \"px\",\n    \"offset\":[-3,0]\n  },\n  \"Fan stop\":{\n    \"icon\": \"Dancing_banana.gif\",\n    \"type\": \"image\",\n    \"offset\":[-2,-20],\n    \"size\":\"25\"\n   }\n}\n```",
              "sourceRange": {
                "start": {
                  "line": 1283,
                  "column": 4
                },
                "end": {
                  "line": 1285,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "default-event-config",
              "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'color': 'grey7', //or theme var\n  'icon': 'px-vis:mov',\n  'type': 'px',\n  'offset': 0,\n  'lineColor': 'grey9',\n  'lineWeght': 1,\n  'enableTooltip': true\n  'firstDateTimeFormat': 'HH:mm:ss ZZ',\n  'secondDateTimeFormat': 'DD MMM YYYY',\n  'separator': '|',\n  'timezone': 'utc',\n  'tooltipOrientation': 'left'\n}\n```",
              "sourceRange": {
                "start": {
                  "line": 1309,
                  "column": 4
                },
                "end": {
                  "line": 1311,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "event-data",
              "description": "Data representing the events. Example:\n[\n   {\n     \"id\": \"123\",\n     \"x\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"id\": \"456\",\n     \"x\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"id\": \"789\",\n     \"x\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"id\": \"333\",\n     \"x\": 8,\n     \"label\": \"Default\"\n   }\n ]",
              "sourceRange": {
                "start": {
                  "line": 1380,
                  "column": 4
                },
                "end": {
                  "line": 1382,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.markers\n\n    Description:\n    Polymer behavior that provides config and data to manage \"markers\" on the chart\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "markerConfig",
              "type": "Object",
              "description": "Configuration object to define what marker should map to what icon, color, and row.\nThe object has a key being the marker name, the value being a configuration object for that marker. The configuration object has four properties:\n- `color`: A rgb color value for the fill or stroke.\n- `markerFillOpacity`: the opacity of the inside of the marker\n- `markerStrokeOpacity`: the opacity of the outside of the marker\n- `markerSymbol`: the symbol type; see below\n- `markerSize`: specifies the size of markers\n- `markerScale`: allows to scale the size of markers\n- `location`: \"top\" or \"bottom\"\n- `row`: the row number on the top or the bottom, starting at 0\n- `showTooltip`: whether a tooltip should be shown on hover\n- `firstDateTimeFormat`: used to format the date part of the timestamp in the tooltip\n- `secondDateTimeFormat`: used to format the time part of the timestamp in the tooltip\n- `separator`: symbol between date and time in the tooltip\n- `timezone`: timezone to use for the timestamp in the tooltip\n- `tooltipOrientation`: orientation of the tooltip: \"left\", \"right\", \"bottom\", \"top\"\n- `tooltipLabel`: label to be used in the tooltip for this type. If not defined the key\nof this type will be used (which should match 'label' in the markerData)\n\nThe symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'\n```\nExample: {\n  'myMarkerType':{\n      'fillColor': 'rgb(123,0,0)',\n      'markerFillOpacity': 0.5,\n      'markerSymbol': 'square',\n      'markerSize': 4,\n      'location': 'top',\n      'row': 1,\n      'priority': 10,\n      'showTooltip': true,\n      'firstDateTimeFormat': 'HH:mm:ss ZZ',\n      'secondDateTimeFormat': 'DD MMM YYYY',\n      'separator': '|',\n      'timezone': 'utc',\n      'tooltipOrientation': 'top'\n  }\n}\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1453,
                  "column": 4
                },
                "end": {
                  "line": 1455,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_defaultMarkerConfig",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1456,
                  "column": 4
                },
                "end": {
                  "line": 1475,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"color\":\"rgb(123,123,123)\",\"markerStrokeOpacity\":0,\"markerSymbol\":\"square\",\"markerSize\":64,\"markerScale\":1,\"showTooltip\":true,\"firstDateTimeFormat\":\"HH:mm:ss ZZ\",\"secondDateTimeFormat\":\"DD MMM YYYY\",\"separator\":\"|\",\"timezone\":\"utc\",\"tooltipOrientation\":\"top\",\"priority\":0}"
            },
            {
              "name": "markerData",
              "type": "Array",
              "description": "Data representing the markers. Example:\n[\n   {\n     \"time\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"time\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"time\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"time\": 8,\n     \"label\": \"Default\"\n   }\n ]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1497,
                  "column": 4
                },
                "end": {
                  "line": 1499,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1395,
              "column": 0
            },
            "end": {
              "line": 1501,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.markers",
          "attributes": [
            {
              "name": "marker-config",
              "description": "Configuration object to define what marker should map to what icon, color, and row.\nThe object has a key being the marker name, the value being a configuration object for that marker. The configuration object has four properties:\n- `color`: A rgb color value for the fill or stroke.\n- `markerFillOpacity`: the opacity of the inside of the marker\n- `markerStrokeOpacity`: the opacity of the outside of the marker\n- `markerSymbol`: the symbol type; see below\n- `markerSize`: specifies the size of markers\n- `markerScale`: allows to scale the size of markers\n- `location`: \"top\" or \"bottom\"\n- `row`: the row number on the top or the bottom, starting at 0\n- `showTooltip`: whether a tooltip should be shown on hover\n- `firstDateTimeFormat`: used to format the date part of the timestamp in the tooltip\n- `secondDateTimeFormat`: used to format the time part of the timestamp in the tooltip\n- `separator`: symbol between date and time in the tooltip\n- `timezone`: timezone to use for the timestamp in the tooltip\n- `tooltipOrientation`: orientation of the tooltip: \"left\", \"right\", \"bottom\", \"top\"\n- `tooltipLabel`: label to be used in the tooltip for this type. If not defined the key\nof this type will be used (which should match 'label' in the markerData)\n\nThe symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'\n```\nExample: {\n  'myMarkerType':{\n      'fillColor': 'rgb(123,0,0)',\n      'markerFillOpacity': 0.5,\n      'markerSymbol': 'square',\n      'markerSize': 4,\n      'location': 'top',\n      'row': 1,\n      'priority': 10,\n      'showTooltip': true,\n      'firstDateTimeFormat': 'HH:mm:ss ZZ',\n      'secondDateTimeFormat': 'DD MMM YYYY',\n      'separator': '|',\n      'timezone': 'utc',\n      'tooltipOrientation': 'top'\n  }\n}\n```",
              "sourceRange": {
                "start": {
                  "line": 1453,
                  "column": 4
                },
                "end": {
                  "line": 1455,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "marker-data",
              "description": "Data representing the markers. Example:\n[\n   {\n     \"time\": 2,\n     \"label\": \"Recalibrate\"\n   },\n   {\n     \"time\": 3,\n     \"label\": \"Fan start\"\n   },\n   {\n     \"time\": 4,\n     \"label\": \"Fan stop\"\n   },\n   {\n     \"time\": 8,\n     \"label\": \"Default\"\n   }\n ]",
              "sourceRange": {
                "start": {
                  "line": 1497,
                  "column": 4
                },
                "end": {
                  "line": 1499,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.thresholds\n\n    Description:\n    Polymer behavior that provides config and data to manage \"thresholds\" (px-vis-threshold) on the chart\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "thresholdConfig",
              "type": "Object",
              "description": "Configuration object to define what threshold should map to what color and line style.\nThe object has a key being the threshold name, the value being a configuration object for that threshold. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design. If no color is supplied, then it will match the series color or fallback to a default color.\n- `strokeWidth`: the stroke width for the line.\n- `dashPattern`: string for the dash pattern for the line in the form of stroke,gap. `5,2` would be a 5px dash with 2px gap. `5,2,1,2` would be a 5px dash, 2px gap, 1px dash, 2px gap. '5,0' would be effectively create a solid line.\n- `title`: The display title\n\n\n```\nExample: {\n  \"max\":{\n    \"color\": \"blue\",\n    \"strokeWidth\": \"2\",\n    \"dashPattern\": \"5\",\n    \"title\": \"Maximum\"\n  },\n  \"avg\":{\n    \"color\": \"green\",\n    \"strokeWidth\": \"1\",\n    \"dashPattern\": \"5,2,1,2\",\n    \"title\": \"Fleet Average\"\n  },\n  \"min\":{\n    \"title\": \"Min\"\n   }\n}\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1546,
                  "column": 4
                },
                "end": {
                  "line": 1549,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "_defaultThresholdConfig",
              "type": "Object",
              "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'strokeWidth': '1',\n  'dashPattern': '5,2'\n}\n```",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1561,
                  "column": 4
                },
                "end": {
                  "line": 1569,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"strokeWidth\":\"1\",\"dashPattern\":\"5,2\"}"
            },
            {
              "name": "thresholdData",
              "type": "Array",
              "description": "Data representing the events. Example:\n```\n[\n     { \"for\":\"y0\", \"type\":\"max\", \"value\":35.4784 },\n     { \"for\":\"y0\", \"type\":\"min\", \"value\":7.6531 },\n     { \"for\":\"y0\", \"type\":\"mean\", \"value\":15.330657585139331 },\n     { \"for\":\"y1\", \"type\":\"mean\", \"value\":75 },\n     { \"for\":\"\", \"type\":\"quartile\", \"value\":17 }\n ]\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1582,
                  "column": 4
                },
                "end": {
                  "line": 1584,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1514,
              "column": 0
            },
            "end": {
              "line": 1586,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.thresholds",
          "attributes": [
            {
              "name": "threshold-config",
              "description": "Configuration object to define what threshold should map to what color and line style.\nThe object has a key being the threshold name, the value being a configuration object for that threshold. The configuration object has four properties:\n- `color`: A valid color name found in the px-colors-design. If no color is supplied, then it will match the series color or fallback to a default color.\n- `strokeWidth`: the stroke width for the line.\n- `dashPattern`: string for the dash pattern for the line in the form of stroke,gap. `5,2` would be a 5px dash with 2px gap. `5,2,1,2` would be a 5px dash, 2px gap, 1px dash, 2px gap. '5,0' would be effectively create a solid line.\n- `title`: The display title\n\n\n```\nExample: {\n  \"max\":{\n    \"color\": \"blue\",\n    \"strokeWidth\": \"2\",\n    \"dashPattern\": \"5\",\n    \"title\": \"Maximum\"\n  },\n  \"avg\":{\n    \"color\": \"green\",\n    \"strokeWidth\": \"1\",\n    \"dashPattern\": \"5,2,1,2\",\n    \"title\": \"Fleet Average\"\n  },\n  \"min\":{\n    \"title\": \"Min\"\n   }\n}\n```",
              "sourceRange": {
                "start": {
                  "line": 1546,
                  "column": 4
                },
                "end": {
                  "line": 1549,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "threshold-data",
              "description": "Data representing the events. Example:\n```\n[\n     { \"for\":\"y0\", \"type\":\"max\", \"value\":35.4784 },\n     { \"for\":\"y0\", \"type\":\"min\", \"value\":7.6531 },\n     { \"for\":\"y0\", \"type\":\"mean\", \"value\":15.330657585139331 },\n     { \"for\":\"y1\", \"type\":\"mean\", \"value\":75 },\n     { \"for\":\"\", \"type\":\"quartile\", \"value\":17 }\n ]\n```",
              "sourceRange": {
                "start": {
                  "line": 1582,
                  "column": 4
                },
                "end": {
                  "line": 1584,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.dimensions\n\n    Description:\n    Polymer behavior that provides dimension behaviors\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1598,
              "column": 0
            },
            "end": {
              "line": 1621,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.dimensions",
          "attributes": [
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "     Name:\n    PxVisBehavior.categories\n\n    Description:\n    Polymer behavior that provides categories definitions which can be used to color the series lines by category\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "categoryKey",
              "type": "string",
              "description": "A dev set string speciying which key to use as the category to use to color the series lines",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1639,
                  "column": 4
                },
                "end": {
                  "line": 1641,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "categories",
              "type": "Array",
              "description": "A dev set array defining the categories values.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1646,
                  "column": 4
                },
                "end": {
                  "line": 1649,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1633,
              "column": 0
            },
            "end": {
              "line": 1651,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.categories",
          "attributes": [
            {
              "name": "category-key",
              "description": "A dev set string speciying which key to use as the category to use to color the series lines",
              "sourceRange": {
                "start": {
                  "line": 1639,
                  "column": 4
                },
                "end": {
                  "line": 1641,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "categories",
              "description": "A dev set array defining the categories values.",
              "sourceRange": {
                "start": {
                  "line": 1646,
                  "column": 4
                },
                "end": {
                  "line": 1649,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.commonAxis\n\n    Description:\n    Polymer behavior that provides a boolean to specify a common axis for a chart.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "commonAxis",
              "type": "boolean",
              "description": "A boolean specifying if all axes should share the same range",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1672,
                  "column": 4
                },
                "end": {
                  "line": 1675,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1666,
              "column": 0
            },
            "end": {
              "line": 1677,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.commonAxis",
          "attributes": [
            {
              "name": "common-axis",
              "description": "A boolean specifying if all axes should share the same range",
              "sourceRange": {
                "start": {
                  "line": 1672,
                  "column": 4
                },
                "end": {
                  "line": 1675,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.polarData\n\n    Description:\n    Polymer behavior that provides properties used when working with polar data\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ]
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1691,
              "column": 0
            },
            "end": {
              "line": 1752,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.polarData",
          "attributes": [
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.seriesId\n\n    Description:\n    Polymer behavior that provides seriesId property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "seriesId",
              "type": "string",
              "description": "A unique ID for each line series",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1772,
                  "column": 4
                },
                "end": {
                  "line": 1774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1766,
              "column": 0
            },
            "end": {
              "line": 1776,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.seriesId",
          "attributes": [
            {
              "name": "series-id",
              "description": "A unique ID for each line series",
              "sourceRange": {
                "start": {
                  "line": 1772,
                  "column": 4
                },
                "end": {
                  "line": 1774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.dynamicConfigProperties\n\n    Description:\n    Polymer behavior that allows the dynamic creation of properties that will be\n    searched for in the completeSeriesConfig\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "seriesId",
              "type": "string",
              "description": "A unique ID for each line series",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1772,
                  "column": 4
                },
                "end": {
                  "line": 1774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.seriesId"
            },
            {
              "name": "_dynamicProperties",
              "type": "Array",
              "description": "A list of the dynamic properties",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1797,
                  "column": 4
                },
                "end": {
                  "line": 1802,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_computeValue",
              "description": "Decides if it should use a default or user specified value",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1811,
                  "column": 2
                },
                "end": {
                  "line": 1814,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "configValue"
                },
                {
                  "name": "def"
                }
              ]
            },
            {
              "name": "_processConfig",
              "description": "sets each property listed in dynamicProperies",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1820,
                  "column": 2
                },
                "end": {
                  "line": 1832,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "completeSeriesConfig"
                },
                {
                  "name": "seriesId"
                }
              ]
            },
            {
              "name": "_watchConfigProperty",
              "description": "Cycles through properties and adds them to dynamic properties",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1838,
                  "column": 2
                },
                "end": {
                  "line": 1848,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "defValue"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1791,
              "column": 0
            },
            "end": {
              "line": 1850,
              "column": 91
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.dynamicConfigProperties",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "series-id",
              "description": "A unique ID for each line series",
              "sourceRange": {
                "start": {
                  "line": 1772,
                  "column": 4
                },
                "end": {
                  "line": 1774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.seriesId"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.radial\n\n    Description:\n    Polymer behavior that provides the radial definition\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "radial",
              "type": "boolean",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1866,
              "column": 0
            },
            "end": {
              "line": 1877,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.radial",
          "attributes": [
            {
              "name": "radial",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "sourceRange": {
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.forceDateTimeDisplay\n\n    Description:\n    Polymer behavior that provides the forceDateTimeDisplay definition\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "forceDateTimeDisplay",
              "type": "boolean",
              "description": "Forces the use of the timestamp at the top",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1897,
                  "column": 4
                },
                "end": {
                  "line": 1900,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1892,
              "column": 0
            },
            "end": {
              "line": 1902,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.forceDateTimeDisplay",
          "attributes": [
            {
              "name": "force-date-time-display",
              "description": "Forces the use of the timestamp at the top",
              "sourceRange": {
                "start": {
                  "line": 1897,
                  "column": 4
                },
                "end": {
                  "line": 1900,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.serieToRedrawOnTop\n\n    Description:\n    Polymer behavior that provides the serieToRedrawOnTop definition\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "serieToRedrawOnTop",
              "type": "Array",
              "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1922,
                  "column": 4
                },
                "end": {
                  "line": 1924,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1916,
              "column": 0
            },
            "end": {
              "line": 1926,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.serieToRedrawOnTop",
          "attributes": [
            {
              "name": "serie-to-redraw-on-top",
              "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
              "sourceRange": {
                "start": {
                  "line": 1922,
                  "column": 4
                },
                "end": {
                  "line": 1924,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.svgDefinition\n\n    Description:\n    Polymer behavior that provides the svg property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "svg",
              "type": "Object",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1951,
                  "column": 4
                },
                "end": {
                  "line": 1953,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1940,
              "column": 0
            },
            "end": {
              "line": 1955,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.svgDefinition",
          "attributes": [
            {
              "name": "svg",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.\n\nFUTURE: when Polymer supports SVG, this only need be set on the SVG element.",
              "sourceRange": {
                "start": {
                  "line": 1951,
                  "column": 4
                },
                "end": {
                  "line": 1953,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.dynamicMenuConfig\n\n    Description:\n    Polymer behavior that provides the dynamicMenuConfig property\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "dynamicMenuConfig",
              "type": "Array",
              "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2038,
                  "column": 4
                },
                "end": {
                  "line": 2040,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1997,
              "column": 0
            },
            "end": {
              "line": 2042,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.dynamicMenuConfig",
          "attributes": [
            {
              "name": "dynamic-menu-config",
              "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
              "sourceRange": {
                "start": {
                  "line": 2038,
                  "column": 4
                },
                "end": {
                  "line": 2040,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.actionConfig\n\n    Description:\n    Polymer behavior that provides the actionConfig property\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "actionConfig",
              "type": "Object",
              "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2061,
                  "column": 4
                },
                "end": {
                  "line": 2064,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2053,
              "column": 0
            },
            "end": {
              "line": 2066,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.actionConfig",
          "attributes": [
            {
              "name": "action-config",
              "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
              "sourceRange": {
                "start": {
                  "line": 2061,
                  "column": 4
                },
                "end": {
                  "line": 2064,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "action-config-changed",
              "description": "Fired when the `actionConfig` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.toolbarConfig\n\n    Description:\n    Polymer behavior that provides the toolbarConfig property\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "toolbarConfig",
              "type": "Object",
              "description": "Configuration object for the toolbar. This object drives what buttons are available on\nthe toolbar and what they do. Three actions can be used out of the box by passing them\nas keys in this config: 'zoom', 'pan' and 'tooltip'. Any other kind of actions and\nbuttons can be defined through this object.\nExample of a custom config:\n```\n{\n  \"customzoom\": {\n    \"tooltipLabel\": \"zoom\",          //label used for the tooltip for this button\n    \"icon\": \"px-vis:zoom-toolbar\",   //icon to use for this button\n    \"buttonGroup\": 1,                //if a button is part of a button group then it\nbecomes blue when clicked and all other buttons with the same button group in the\nsame row become deselected (not blue)\n    \"selected\": true,                //force this button to be selected at start\n    \"actionConfig\": {                 //this config will be propagated to\npx-vis-interaction-space\n      \"mousedown\": \"startZooming\",   //key is an event, value is either a\npredefined action defined in `actionMapping` in px-vis-interaction-space or a\nfunction which context is bound to the chart\n        \"mouseup\": \"stopZooming\",\n        \"mouseout\": \"null\",          //by specifying null it ensures previous\nactions registered against this event will be removed\n        \"mousemove\": \"function() { console.log(\\\"Mouse moved on the chart!\\\");}\"\n      },\n      \"subConfig\": {                 //subConfig allows you to defined a second row\nof buttons which will be displayed when clicking the main button\n        \"x\": {\n          \"title\": \"X\",              //you can use a title instead of/in addition to\nthe icon\n          \"tooltipLabel\": \"Zoom on X axis only\",\n          \"eventName\": \"my-custom-click\", //an event will be fired when clicking on\nthis button\n          \"selectable\": true,\n          \"selected\": true,\n          \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"xAxis\\\");}\" //this\nfunction will be run when clicking the button. The chart will be the context of this\nfunction. If defined in HTML this needs to be a string, but if defined in javascript\nthis can be a function\n        },\n        \"y\": {\n          \"title\": \"Y\",\n          \"tooltipLabel\": \"Zoom on Y axis only\",\n          \"selectable\": true,\n          \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"yAxis\\\");}\"\n        },\n        \"xy\": {\n          \"title\": \"XY\",\n          \"tooltipLabel\": \"Zoom on X and Y axis\",\n          \"selectable\": true,\n          \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"xy\\\");}\"\n        },\n        \"zoomIn\": {\n          \"icon\": \"px-vis:zoom-in\",\n          \"tooltipLabel\": \"zoom in\",\n          \"eventName\": \"px-vis-toolbar-zoom-in\" //those events are vis specific\nevents and are automatically caught by the chart to do something\n        },\n        \"zoomOut\": {\n          \"icon\": \"px-vis:zoom-out\",\n          \"tooltipLabel\": \"zoom out\",\n          \"eventName\": \"px-vis-toolbar-zoom-out\"\n        },\n        \"undoZoom\": {\n          \"icon\": \"px-vis:zoom-out-one-level\",\n          \"tooltipLabel\": \"undo zoom\",\n          \"eventName\": \"px-vis-toolbar-undo-zoom\"\n        },\n        \"resetZoom\": {\n          \"icon\": \"px-vis:full-screen\",\n          \"tooltipLabel\": \"reset zoom to inital value\",\n          \"eventName\": \"px-vis-toolbar-reset-zoom\"\n        }\n      }\n    },\n    \"pan\": true,           //default \"out of the box\" panning button\n    \"tooltip\": true        //default \"out of the box\" tooltip button\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2158,
                  "column": 6
                },
                "end": {
                  "line": 2163,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"zoom\":true,\"pan\":true,\"tooltip\":true}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2077,
              "column": 0
            },
            "end": {
              "line": 2165,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.toolbarConfig",
          "attributes": [
            {
              "name": "toolbar-config",
              "description": "Configuration object for the toolbar. This object drives what buttons are available on\nthe toolbar and what they do. Three actions can be used out of the box by passing them\nas keys in this config: 'zoom', 'pan' and 'tooltip'. Any other kind of actions and\nbuttons can be defined through this object.\nExample of a custom config:\n```\n{\n  \"customzoom\": {\n    \"tooltipLabel\": \"zoom\",          //label used for the tooltip for this button\n    \"icon\": \"px-vis:zoom-toolbar\",   //icon to use for this button\n    \"buttonGroup\": 1,                //if a button is part of a button group then it\nbecomes blue when clicked and all other buttons with the same button group in the\nsame row become deselected (not blue)\n    \"selected\": true,                //force this button to be selected at start\n    \"actionConfig\": {                 //this config will be propagated to\npx-vis-interaction-space\n      \"mousedown\": \"startZooming\",   //key is an event, value is either a\npredefined action defined in `actionMapping` in px-vis-interaction-space or a\nfunction which context is bound to the chart\n        \"mouseup\": \"stopZooming\",\n        \"mouseout\": \"null\",          //by specifying null it ensures previous\nactions registered against this event will be removed\n        \"mousemove\": \"function() { console.log(\\\"Mouse moved on the chart!\\\");}\"\n      },\n      \"subConfig\": {                 //subConfig allows you to defined a second row\nof buttons which will be displayed when clicking the main button\n        \"x\": {\n          \"title\": \"X\",              //you can use a title instead of/in addition to\nthe icon\n          \"tooltipLabel\": \"Zoom on X axis only\",\n          \"eventName\": \"my-custom-click\", //an event will be fired when clicking on\nthis button\n          \"selectable\": true,\n          \"selected\": true,\n          \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"xAxis\\\");}\" //this\nfunction will be run when clicking the button. The chart will be the context of this\nfunction. If defined in HTML this needs to be a string, but if defined in javascript\nthis can be a function\n        },\n        \"y\": {\n          \"title\": \"Y\",\n          \"tooltipLabel\": \"Zoom on Y axis only\",\n          \"selectable\": true,\n          \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"yAxis\\\");}\"\n        },\n        \"xy\": {\n          \"title\": \"XY\",\n          \"tooltipLabel\": \"Zoom on X and Y axis\",\n          \"selectable\": true,\n          \"onClick\": \"function() { this.set(\\\"selectionType\\\", \\\"xy\\\");}\"\n        },\n        \"zoomIn\": {\n          \"icon\": \"px-vis:zoom-in\",\n          \"tooltipLabel\": \"zoom in\",\n          \"eventName\": \"px-vis-toolbar-zoom-in\" //those events are vis specific\nevents and are automatically caught by the chart to do something\n        },\n        \"zoomOut\": {\n          \"icon\": \"px-vis:zoom-out\",\n          \"tooltipLabel\": \"zoom out\",\n          \"eventName\": \"px-vis-toolbar-zoom-out\"\n        },\n        \"undoZoom\": {\n          \"icon\": \"px-vis:zoom-out-one-level\",\n          \"tooltipLabel\": \"undo zoom\",\n          \"eventName\": \"px-vis-toolbar-undo-zoom\"\n        },\n        \"resetZoom\": {\n          \"icon\": \"px-vis:full-screen\",\n          \"tooltipLabel\": \"reset zoom to inital value\",\n          \"eventName\": \"px-vis-toolbar-reset-zoom\"\n        }\n      }\n    },\n    \"pan\": true,           //default \"out of the box\" panning button\n    \"tooltip\": true        //default \"out of the box\" tooltip button\n```",
              "sourceRange": {
                "start": {
                  "line": 2158,
                  "column": 6
                },
                "end": {
                  "line": 2163,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.seriesToAxes\n\n    Description:\n    Polymer behavior that provides the seriesToAxes property\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "seriesToAxes",
              "type": "Object",
              "description": "Object linking which series belong to which axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2184,
                  "column": 5
                },
                "end": {
                  "line": 2186,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2179,
              "column": 0
            },
            "end": {
              "line": 2188,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.seriesToAxes",
          "attributes": [
            {
              "name": "series-to-axes",
              "description": "Object linking which series belong to which axis",
              "sourceRange": {
                "start": {
                  "line": 2184,
                  "column": 5
                },
                "end": {
                  "line": 2186,
                  "column": 6
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.uniqueIds\n\n    Description:\n    Polymer behavior that provides ability to clean d3/native objects on detached\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "_uniqueIdsUsed",
              "type": "Array",
              "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2208,
                  "column": 5
                },
                "end": {
                  "line": 2213,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2215,
                  "column": 2
                },
                "end": {
                  "line": 2222,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "generateRandomID",
              "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2231,
                  "column": 2
                },
                "end": {
                  "line": 2251,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseStr"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2202,
              "column": 0
            },
            "end": {
              "line": 2252,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.uniqueIds",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.preventInitialDrawing\n\n    Description:\n    Polymer behavior that provides the preventInitialDrawing property,\n    used to block an element from drawing until set to false\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "preventInitialDrawing",
              "type": "boolean",
              "description": "blocks initial drawings of axis until set to false",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2272,
                  "column": 4
                },
                "end": {
                  "line": 2275,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2267,
              "column": 0
            },
            "end": {
              "line": 2277,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.preventInitialDrawing",
          "attributes": [
            {
              "name": "prevent-initial-drawing",
              "description": "blocks initial drawings of axis until set to false",
              "sourceRange": {
                "start": {
                  "line": 2272,
                  "column": 4
                },
                "end": {
                  "line": 2275,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.selectionType\n\n    Description:\n    Behavior providing the selectionType property\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "selectionType",
              "type": "string",
              "description": "The zoom selection type:\n- xy\n- xAxis\n- yAxis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2295,
                  "column": 4
                },
                "end": {
                  "line": 2299,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "\"xy\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2287,
              "column": 0
            },
            "end": {
              "line": 2301,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.selectionType",
          "attributes": [
            {
              "name": "selection-type",
              "description": "The zoom selection type:\n- xy\n- xAxis\n- yAxis",
              "sourceRange": {
                "start": {
                  "line": 2295,
                  "column": 4
                },
                "end": {
                  "line": 2299,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "selection-type-changed",
              "description": "Fired when the `selectionType` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.measureText\n\n    Description:\n    Behavior providing the ability to measure text\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "_measurementCanvas",
              "type": "Object",
              "description": "The zoom selection type:\n- xy\n- xAxis\n- yAxis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2319,
                  "column": 4
                },
                "end": {
                  "line": 2321,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_measurementCanvasContext",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2322,
                  "column": 4
                },
                "end": {
                  "line": 2324,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_createMeasurementCanvas",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2327,
                  "column": 2
                },
                "end": {
                  "line": 2338,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                },
                {
                  "name": "font"
                }
              ]
            },
            {
              "name": "_measureTextOnCanvas",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2340,
                  "column": 2
                },
                "end": {
                  "line": 2345,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2311,
              "column": 0
            },
            "end": {
              "line": 2347,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.measureText",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.isAttached\n\n    Description:\n    Behavior providing the ability to track if the component is attached to the document\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "_isAttached",
              "type": "boolean",
              "description": "Boolean tracking if we are attached",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2362,
                  "column": 4
                },
                "end": {
                  "line": 2365,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2368,
                  "column": 2
                },
                "end": {
                  "line": 2370,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2372,
                  "column": 2
                },
                "end": {
                  "line": 2374,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2357,
              "column": 0
            },
            "end": {
              "line": 2375,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.isAttached",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.waitForAnimationFrame\n\n    Description:\n    Behavior providing the _animationFrameDone property and sets to true\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "_animationFrameDone",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2386,
                  "column": 4
                },
                "end": {
                  "line": 2389,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2392,
                  "column": 2
                },
                "end": {
                  "line": 2396,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2384,
              "column": 0
            },
            "end": {
              "line": 2397,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.waitForAnimationFrame",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.actionConfigGeneric\n\n    Description:\n    Behavior providing the actionConfig property\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "actionConfig",
              "type": "Object",
              "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2414,
                  "column": 4
                },
                "end": {
                  "line": 2416,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2406,
              "column": 0
            },
            "end": {
              "line": 2418,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.actionConfigGeneric",
          "attributes": [
            {
              "name": "action-config",
              "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
              "sourceRange": {
                "start": {
                  "line": 2414,
                  "column": 4
                },
                "end": {
                  "line": 2416,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.applyActionConfig\n\n    Description:\n    Intended for the interaction spaces, method to apply the actionConfig to the listener elem\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "actionConfig",
              "type": "Object",
              "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2414,
                  "column": 4
                },
                "end": {
                  "line": 2416,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.actionConfigGeneric"
            }
          ],
          "methods": [
            {
              "name": "_setupRegularActions",
              "description": "Set up normal listener actions",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2432,
                  "column": 2
                },
                "end": {
                  "line": 2488,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d3Elem"
                },
                {
                  "name": "elem"
                },
                {
                  "name": "dontDoUpDown"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2427,
              "column": 0
            },
            "end": {
              "line": 2489,
              "column": 38
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.applyActionConfig",
          "attributes": [
            {
              "name": "action-config",
              "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found in px-vis-interaction-space `actionMapping`\n- a function which context will be bound to the chart. The function argument will be the mouse position on the chart",
              "sourceRange": {
                "start": {
                  "line": 2414,
                  "column": 4
                },
                "end": {
                  "line": 2416,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.actionConfigGeneric"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.interactionSpaceConfigGeneric\n\n    Description:\n    Behavior providing the interactionSpaceConfig property\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "interactionSpaceConfig",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2501,
                  "column": 4
                },
                "end": {
                  "line": 2503,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2499,
              "column": 0
            },
            "end": {
              "line": 2505,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.interactionSpaceConfigGeneric",
          "attributes": [
            {
              "name": "interaction-space-config",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 2501,
                  "column": 4
                },
                "end": {
                  "line": 2503,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.interactionSpaceShared\n\n    Description:\n    Behavior providing shared methods and props for interaction space\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_resetTooltipData",
              "description": "Helper function called on mouseout\nresets tooltipData",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2522,
                  "column": 2
                },
                "end": {
                  "line": 2552,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_createTooltipDataStub",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2554,
                  "column": 2
                },
                "end": {
                  "line": 2567,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                },
                {
                  "name": "timestamp"
                },
                {
                  "name": "showTooltip"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2515,
              "column": 0
            },
            "end": {
              "line": 2568,
              "column": 57
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.interactionSpaceShared",
          "attributes": [
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.highlightShared\n\n    Description:\n    Behavior providing shared methods and props for highligh compoennts\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "differentDataset",
              "type": "boolean",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "fuzz",
              "type": "number",
              "description": "The amount +/- around the datapoint",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "timeData",
              "type": "string",
              "description": "Name of the variable holding the time stamp in the data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"Timestamp\""
            },
            {
              "name": "layersToMask",
              "type": "Array",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "drawWithLocalCrosshairData",
              "type": "boolean",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_resetTooltipData",
              "description": "Helper function called on mouseout\nresets tooltipData",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2522,
                  "column": 2
                },
                "end": {
                  "line": 2552,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_createTooltipDataStub",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2554,
                  "column": 2
                },
                "end": {
                  "line": 2567,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                },
                {
                  "name": "timestamp"
                },
                {
                  "name": "showTooltip"
                }
              ],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_calcDataset",
              "description": "Determines if we should do a regular binary search or a fuzzy binary search",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2625,
                  "column": 2
                },
                "end": {
                  "line": 2656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_generateSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2659,
                  "column": 2
                },
                "end": {
                  "line": 2695,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ]
            },
            {
              "name": "_setTooltipData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2697,
                  "column": 2
                },
                "end": {
                  "line": 2710,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2577,
              "column": 0
            },
            "end": {
              "line": 2711,
              "column": 41
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.highlightShared",
          "attributes": [
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "different-dataset",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "fuzz",
              "description": "The amount +/- around the datapoint",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "time-data",
              "description": "Name of the variable holding the time stamp in the data",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "layers-to-mask",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "draw-with-local-crosshair-data",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "draw-with-local-crosshair-data-changed",
              "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.highlightCanvasShared\n\n    Description:\n    Behavior providing shared methods and props for highligh components\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "differentDataset",
              "type": "boolean",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "fuzz",
              "type": "number",
              "description": "The amount +/- around the datapoint",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "timeData",
              "type": "string",
              "description": "Name of the variable holding the time stamp in the data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"Timestamp\"",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "layersToMask",
              "type": "Array",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "drawWithLocalCrosshairData",
              "type": "boolean",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_resetTooltipData",
              "description": "Helper function called on mouseout\nresets tooltipData",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2522,
                  "column": 2
                },
                "end": {
                  "line": 2552,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_createTooltipDataStub",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2554,
                  "column": 2
                },
                "end": {
                  "line": 2567,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                },
                {
                  "name": "timestamp"
                },
                {
                  "name": "showTooltip"
                }
              ],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_calcDataset",
              "description": "Determines if we should do a regular binary search or a fuzzy binary search",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2625,
                  "column": 2
                },
                "end": {
                  "line": 2656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_generateSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2659,
                  "column": 2
                },
                "end": {
                  "line": 2695,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_setTooltipData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2697,
                  "column": 2
                },
                "end": {
                  "line": 2710,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_muteDataSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2728,
                  "column": 2
                },
                "end": {
                  "line": 2744,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_addTransition",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2746,
                  "column": 2
                },
                "end": {
                  "line": 2758,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_requestCanvasCreation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2760,
                  "column": 2
                },
                "end": {
                  "line": 2768,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2720,
              "column": 0
            },
            "end": {
              "line": 2770,
              "column": 63
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.highlightCanvasShared",
          "attributes": [
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "different-dataset",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "fuzz",
              "description": "The amount +/- around the datapoint",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "time-data",
              "description": "Name of the variable holding the time stamp in the data",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "layers-to-mask",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "draw-with-local-crosshair-data",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "draw-with-local-crosshair-data-changed",
              "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.highlightSvgShared\n\n    Description:\n    Behavior providing shared methods and props for highligh compoennts\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "differentDataset",
              "type": "boolean",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "fuzz",
              "type": "number",
              "description": "The amount +/- around the datapoint",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "timeData",
              "type": "string",
              "description": "Name of the variable holding the time stamp in the data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"Timestamp\"",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "layersToMask",
              "type": "Array",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "drawWithLocalCrosshairData",
              "type": "boolean",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_resetTooltipData",
              "description": "Helper function called on mouseout\nresets tooltipData",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2522,
                  "column": 2
                },
                "end": {
                  "line": 2552,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_createTooltipDataStub",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2554,
                  "column": 2
                },
                "end": {
                  "line": 2567,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                },
                {
                  "name": "timestamp"
                },
                {
                  "name": "showTooltip"
                }
              ],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_calcDataset",
              "description": "Determines if we should do a regular binary search or a fuzzy binary search",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2625,
                  "column": 2
                },
                "end": {
                  "line": 2656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_generateSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2659,
                  "column": 2
                },
                "end": {
                  "line": 2695,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_setTooltipData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2697,
                  "column": 2
                },
                "end": {
                  "line": 2710,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_muteDataSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2787,
                  "column": 2
                },
                "end": {
                  "line": 2801,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "_addTransition",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2803,
                  "column": 2
                },
                "end": {
                  "line": 2815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2780,
              "column": 0
            },
            "end": {
              "line": 2817,
              "column": 63
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.highlightSvgShared",
          "attributes": [
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "different-dataset",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "fuzz",
              "description": "The amount +/- around the datapoint",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "time-data",
              "description": "Name of the variable holding the time stamp in the data",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "layers-to-mask",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "draw-with-local-crosshair-data",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "draw-with-local-crosshair-data-changed",
              "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    PxVisBehavior.highlightLineShared\n\n    Description:\n    Behavior providing shared methods and props for highlight line compoennts\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "differentDataset",
              "type": "boolean",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "fuzz",
              "type": "number",
              "description": "The amount +/- around the datapoint",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "timeData",
              "type": "string",
              "description": "Name of the variable holding the time stamp in the data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"Timestamp\"",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "layersToMask",
              "type": "Array",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "drawWithLocalCrosshairData",
              "type": "boolean",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "_highlightData",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2828,
                  "column": 4
                },
                "end": {
                  "line": 2831,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "parallelCoordinates",
              "type": "boolean",
              "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2837,
                  "column": 4
                },
                "end": {
                  "line": 2840,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "radialLine",
              "type": "boolean",
              "description": "A dev set boolean specifying if the line is using radial(polar) data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2845,
                  "column": 4
                },
                "end": {
                  "line": 2848,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_resetTooltipData",
              "description": "Helper function called on mouseout\nresets tooltipData",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2522,
                  "column": 2
                },
                "end": {
                  "line": 2552,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_createTooltipDataStub",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2554,
                  "column": 2
                },
                "end": {
                  "line": 2567,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                },
                {
                  "name": "timestamp"
                },
                {
                  "name": "showTooltip"
                }
              ],
              "inheritedFrom": "PxVisBehavior.interactionSpaceShared"
            },
            {
              "name": "_calcDataset",
              "description": "Determines if we should do a regular binary search or a fuzzy binary search",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2625,
                  "column": 2
                },
                "end": {
                  "line": 2656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_generateSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2659,
                  "column": 2
                },
                "end": {
                  "line": 2695,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_setTooltipData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2697,
                  "column": 2
                },
                "end": {
                  "line": 2710,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ],
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "_computeChartData",
              "description": "Draws the crosshair elements and sets up listeners and callbacks on chart hover\nSets the crosshairData property which gets passed to the register.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2857,
                  "column": 2
                },
                "end": {
                  "line": 2895,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_setTooltipDataMultiLine",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2898,
                  "column": 2
                },
                "end": {
                  "line": 2912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                }
              ]
            },
            {
              "name": "_resetMultilineTooltipData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2914,
                  "column": 2
                },
                "end": {
                  "line": 2925,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_createMultilineTooltipData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2927,
                  "column": 2
                },
                "end": {
                  "line": 3001,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataset"
                },
                {
                  "name": "svg"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2826,
              "column": 0
            },
            "end": {
              "line": 3002,
              "column": 86
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.highlightLineShared",
          "attributes": [
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "different-dataset",
              "description": "Boolean indicating if the dataset on this chart is different than the one on the crosshairData's origin chart.\n\nNOTE: The chartData passed into the chart MUST be sorted by the timeData for differentDataset to work. This component will not work with unsorted data.",
              "sourceRange": {
                "start": {
                  "line": 2584,
                  "column": 4
                },
                "end": {
                  "line": 2587,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "fuzz",
              "description": "The amount +/- around the datapoint",
              "sourceRange": {
                "start": {
                  "line": 2592,
                  "column": 4
                },
                "end": {
                  "line": 2595,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "time-data",
              "description": "Name of the variable holding the time stamp in the data",
              "sourceRange": {
                "start": {
                  "line": 2600,
                  "column": 4
                },
                "end": {
                  "line": 2603,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "layers-to-mask",
              "description": "The layers where the series are drawn if you want them to mute on crosshair data",
              "sourceRange": {
                "start": {
                  "line": 2608,
                  "column": 4
                },
                "end": {
                  "line": 2610,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "draw-with-local-crosshair-data",
              "description": "By default, a highlighter will not react to crosshairData if generatingCrosshairData is true. This boolean forces it to draw the crosshairData regardless of the value of generatingCrosshairData",
              "sourceRange": {
                "start": {
                  "line": 2615,
                  "column": 4
                },
                "end": {
                  "line": 2619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.highlightShared"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "parallel-coordinates",
              "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
              "sourceRange": {
                "start": {
                  "line": 2837,
                  "column": 4
                },
                "end": {
                  "line": 2840,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "radial-line",
              "description": "A dev set boolean specifying if the line is using radial(polar) data",
              "sourceRange": {
                "start": {
                  "line": 2845,
                  "column": 4
                },
                "end": {
                  "line": 2848,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "draw-with-local-crosshair-data-changed",
              "description": "Fired when the `drawWithLocalCrosshairData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.highlightShared"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.preventWebWorkerSynchronization\n\n    Description:\n    Polymer behavior that provides the preventWebWorkerSynchronization property\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "preventWebWorkerSynchronization",
              "type": "boolean",
              "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3028,
                  "column": 6
                },
                "end": {
                  "line": 3031,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3013,
              "column": 0
            },
            "end": {
              "line": 3033,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.preventWebWorkerSynchronization",
          "attributes": [
            {
              "name": "prevent-web-worker-synchronization",
              "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
              "sourceRange": {
                "start": {
                  "line": 3028,
                  "column": 6
                },
                "end": {
                  "line": 3031,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.wwDataSyncCounter\n\n    Description:\n    Polymer behavior that provides the wwDataSyncCounter property\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "wwDataSyncCounter",
              "type": "number",
              "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3052,
                  "column": 4
                },
                "end": {
                  "line": 3055,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3044,
              "column": 0
            },
            "end": {
              "line": 3057,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.wwDataSyncCounter",
          "attributes": [
            {
              "name": "ww-data-sync-counter",
              "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
              "sourceRange": {
                "start": {
                  "line": 3052,
                  "column": 4
                },
                "end": {
                  "line": 3055,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.stripProperties\n\n    Description:\n    Polymer behavior that provides the stripProperties property\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "stripeConfig",
              "type": "Object",
              "description": "Configuration file for the striping.\n\nExample:\n{\n \"stripe1\": {\n      fillColor: \"rgb(255,0,0)\",\n      fillOpacity: 0.5\n },\n \"stripe2\": {\n      fillColor: \"rgb(0, 255,0)\",\n      fillOpacity: 0.5\n      dash: [5,2]\n  }\n}\n\n`dash` option is for single timestamp entries. This will draw a dashed line instead of an area. Default dash pattern is [5,2]. To create a solid line instead, put [0]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3088,
                  "column": 4
                },
                "end": {
                  "line": 3090,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "stripeData",
              "type": "Object",
              "description": "Data to create the striping. A list of start and end pairs for each strip type\n\nExample:\n{\n \"stripe1\": [\n   [t1, t2],\n   [t3, t4]\n],\n \"stripe2\": [\n   [t5, t6],\n   [t7, t8]\n]\n}",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3106,
                  "column": 4
                },
                "end": {
                  "line": 3110,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "stripeType",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3111,
                  "column": 4
                },
                "end": {
                  "line": 3113,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3068,
              "column": 0
            },
            "end": {
              "line": 3115,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.stripProperties",
          "attributes": [
            {
              "name": "stripe-config",
              "description": "Configuration file for the striping.\n\nExample:\n{\n \"stripe1\": {\n      fillColor: \"rgb(255,0,0)\",\n      fillOpacity: 0.5\n },\n \"stripe2\": {\n      fillColor: \"rgb(0, 255,0)\",\n      fillOpacity: 0.5\n      dash: [5,2]\n  }\n}\n\n`dash` option is for single timestamp entries. This will draw a dashed line instead of an area. Default dash pattern is [5,2]. To create a solid line instead, put [0]",
              "sourceRange": {
                "start": {
                  "line": 3088,
                  "column": 4
                },
                "end": {
                  "line": 3090,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "stripe-data",
              "description": "Data to create the striping. A list of start and end pairs for each strip type\n\nExample:\n{\n \"stripe1\": [\n   [t1, t2],\n   [t3, t4]\n],\n \"stripe2\": [\n   [t5, t6],\n   [t7, t8]\n]\n}",
              "sourceRange": {
                "start": {
                  "line": 3106,
                  "column": 4
                },
                "end": {
                  "line": 3110,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "stripe-type",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 3111,
                  "column": 4
                },
                "end": {
                  "line": 3113,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "stripe-data-changed",
              "description": "Fired when the `stripeData` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.rendererType\n\n    Description:\n    Polymer behavior that provides a rendererType property to components.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "rendererType",
              "type": "string",
              "description": "Type of renderer this drawing element should be using. Determines on what\ncondition the element is going to be drawn\n- chartData\n- filteredChartData\n- highlightData",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3136,
                  "column": 4
                },
                "end": {
                  "line": 3139,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"chartData\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3127,
              "column": 0
            },
            "end": {
              "line": 3141,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.rendererType",
          "attributes": [
            {
              "name": "renderer-type",
              "description": "Type of renderer this drawing element should be using. Determines on what\ncondition the element is going to be drawn\n- chartData\n- filteredChartData\n- highlightData",
              "sourceRange": {
                "start": {
                  "line": 3136,
                  "column": 4
                },
                "end": {
                  "line": 3139,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.updateStylesOverride\n\n    Description:\n    Polymer behavior that overrides updateStyles so we can trigger a redraw.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "_updateStyles",
              "type": "Function",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 3156,
                  "column": 4
                },
                "end": {
                  "line": 3158,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_stylesUpdated",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 3159,
                  "column": 4
                },
                "end": {
                  "line": 3162,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            }
          ],
          "methods": [
            {
              "name": "created",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 3165,
                  "column": 2
                },
                "end": {
                  "line": 3179,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3154,
              "column": 0
            },
            "end": {
              "line": 3180,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.updateStylesOverride",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.timeDomain\n\n    Description:\n    Polymer behavior that providse the timeDomain property.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "timeDomain",
              "type": "Object",
              "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3199,
                  "column": 4
                },
                "end": {
                  "line": 3204,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3193,
              "column": 0
            },
            "end": {
              "line": 3206,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.timeDomain",
          "attributes": [
            {
              "name": "time-domain",
              "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
              "sourceRange": {
                "start": {
                  "line": 3199,
                  "column": 4
                },
                "end": {
                  "line": 3204,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.axesDomain\n\n    Description:\n    Polymer behavior that providse the axesDomain property.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "axesDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3226,
                  "column": 4
                },
                "end": {
                  "line": 3231,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3218,
              "column": 0
            },
            "end": {
              "line": 3233,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.axesDomain",
          "attributes": [
            {
              "name": "axes-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "start": {
                  "line": 3226,
                  "column": 4
                },
                "end": {
                  "line": 3231,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.brushDomains\n\n    Description:\n    Polymer behavior that providse the brushDomains property.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "brushDomains",
              "type": "Object",
              "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3262,
                  "column": 4
                },
                "end": {
                  "line": 3267,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3245,
              "column": 0
            },
            "end": {
              "line": 3269,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.brushDomains",
          "attributes": [
            {
              "name": "brush-domains",
              "description": "Holder for all domains from brushes\n\nChart expects a set of brushDomains by type\n{\n   type1: {\n     axis1: [min, max],\n     axis2: [min, max]\n   },\n   type2: {\n     axis1: [min, max],\n     axis2: [min, max]\n   }\n}",
              "sourceRange": {
                "start": {
                  "line": 3262,
                  "column": 4
                },
                "end": {
                  "line": 3267,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.annotationData\n\n    Description:\n    Polymer behavior that providse the annotationData property.\n\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-common.html",
          "properties": [
            {
              "name": "annotationData",
              "type": "Array",
              "description": "The annotation data: x and y values + the series which scale should be used.\nData is an arbitrary object you want to store for use when showing the\nannotation\n\n[{\n x: 1325897523,\n y: 15.7,\n series: y0,\n data: {\n\n },\n...\n}\n]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3299,
                  "column": 4
                },
                "end": {
                  "line": 3304,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3281,
              "column": 0
            },
            "end": {
              "line": 3306,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.annotationData",
          "attributes": [
            {
              "name": "annotation-data",
              "description": "The annotation data: x and y values + the series which scale should be used.\nData is an arbitrary object you want to store for use when showing the\nannotation\n\n[{\n x: 1325897523,\n y: 15.7,\n series: y0,\n data: {\n\n },\n...\n}\n]",
              "sourceRange": {
                "start": {
                  "line": 3299,
                  "column": 4
                },
                "end": {
                  "line": 3304,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.svg\n\n    Description:\n    Polymer behavior that provides the svg property and core methods for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "svg",
              "type": "Object",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "_uniqueIdsUsed",
              "type": "Array",
              "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2208,
                  "column": 5
                },
                "end": {
                  "line": 2213,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "pxSvgElem",
              "type": "Object",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2215,
                  "column": 2
                },
                "end": {
                  "line": 2222,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "generateRandomID",
              "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseStr"
                }
              ]
            },
            {
              "name": "cloneSVGElem",
              "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 2
                },
                "end": {
                  "line": 94,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                },
                {
                  "name": "prop"
                },
                {
                  "name": "onBottom"
                }
              ]
            },
            {
              "name": "_drawSVGOnCanvas",
              "description": "Draws the current svg into a canvas",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 2
                },
                "end": {
                  "line": 157,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "elem"
                },
                {
                  "name": "callback"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            },
            {
              "name": "_drawCanvg",
              "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 2
                },
                "end": {
                  "line": 170,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "callback"
                }
              ]
            },
            {
              "name": "_nativeDrawSvgOnCanvas",
              "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 2
                },
                "end": {
                  "line": 205,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "sucessCallback"
                },
                {
                  "name": "failureCallback"
                }
              ]
            },
            {
              "name": "_getSVGOuterHtml",
              "description": "fix for IE to get outer HTML",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 209,
                  "column": 2
                },
                "end": {
                  "line": 256,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 257,
              "column": 57
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.svg",
          "attributes": [
            {
              "name": "svg",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "px-svg-elem",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "svg-changed",
              "description": "Fired when the `svg` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "px-svg-elem-changed",
              "description": "Fired when the `pxSvgElem` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.svg\n\n    Description:\n    Polymer behavior that provides the svg properties when there are two svgs in a chart.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "pxSvgElemLower",
              "type": "Object",
              "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 277,
                  "column": 4
                },
                "end": {
                  "line": 280,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 0
            },
            "end": {
              "line": 282,
              "column": 37
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.svgLower",
          "attributes": [
            {
              "name": "px-svg-elem-lower",
              "description": "The SVG element inside the chart - not a D3 selected element. Used when there are two svgs in a chart",
              "sourceRange": {
                "start": {
                  "line": 277,
                  "column": 4
                },
                "end": {
                  "line": 280,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "px-svg-elem-lower-changed",
              "description": "Fired when the `pxSvgElemLower` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.canvasContext\n\n    Description:\n    Polymer behavior that provides the canvasContext property.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "canvasContext",
              "type": "Object",
              "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 303,
                  "column": 4
                },
                "end": {
                  "line": 306,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "canvasLayers",
              "type": "Object",
              "description": "An array of the generated layers",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 312,
                  "column": 4
                },
                "end": {
                  "line": 316,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "canvasLayersConfig",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 4
                },
                "end": {
                  "line": 321,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 0
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.canvasContext",
          "attributes": [
            {
              "name": "canvas-context",
              "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "sourceRange": {
                "start": {
                  "line": 303,
                  "column": 4
                },
                "end": {
                  "line": 306,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "canvas-layers",
              "description": "An array of the generated layers",
              "sourceRange": {
                "start": {
                  "line": 312,
                  "column": 4
                },
                "end": {
                  "line": 316,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "canvas-layers-config",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 4
                },
                "end": {
                  "line": 321,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "canvas-context-changed",
              "description": "Fired when the `canvasContext` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "canvas-layers-changed",
              "description": "Fired when the `canvasLayers` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.canvas\n\n    Description:\n    Polymer behavior that provides the canvasContext and renderToSvg properties\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "canvasContext",
              "type": "Object",
              "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 303,
                  "column": 4
                },
                "end": {
                  "line": 306,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "name": "canvasLayers",
              "type": "Object",
              "description": "An array of the generated layers",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 312,
                  "column": 4
                },
                "end": {
                  "line": 316,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "name": "canvasLayersConfig",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 4
                },
                "end": {
                  "line": 321,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "name": "_isAttached",
              "type": "boolean",
              "description": "Boolean tracking if we are attached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2362,
                  "column": 4
                },
                "end": {
                  "line": 2365,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "renderToSvg",
              "type": "boolean",
              "description": "Boolean to specify if drawings should render to svg instead of canvas",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 343,
                  "column": 4
                },
                "end": {
                  "line": 346,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2368,
                  "column": 2
                },
                "end": {
                  "line": 2370,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2372,
                  "column": 2
                },
                "end": {
                  "line": 2374,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "_renderToSvgChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 351,
                  "column": 2
                },
                "end": {
                  "line": 366,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "renderToSvg"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 0
            },
            "end": {
              "line": 367,
              "column": 88
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.canvas",
          "attributes": [
            {
              "name": "canvas-context",
              "description": "canvasContext is a holder for the instantiated canvas context to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "sourceRange": {
                "start": {
                  "line": 303,
                  "column": 4
                },
                "end": {
                  "line": 306,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "name": "canvas-layers",
              "description": "An array of the generated layers",
              "sourceRange": {
                "start": {
                  "line": 312,
                  "column": 4
                },
                "end": {
                  "line": 316,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "name": "canvas-layers-config",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 318,
                  "column": 4
                },
                "end": {
                  "line": 321,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "name": "render-to-svg",
              "description": "Boolean to specify if drawings should render to svg instead of canvas",
              "sourceRange": {
                "start": {
                  "line": 343,
                  "column": 4
                },
                "end": {
                  "line": 346,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "canvas-context-changed",
              "description": "Fired when the `canvasContext` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            },
            {
              "type": "CustomEvent",
              "name": "canvas-layers-changed",
              "description": "Fired when the `canvasLayers` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.canvasContext"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.renderToCanvas\n\n    Description:\n    Polymer behavior that provides the renderToCanvas property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "_isAttached",
              "type": "boolean",
              "description": "Boolean tracking if we are attached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2362,
                  "column": 4
                },
                "end": {
                  "line": 2365,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "renderToCanvas",
              "type": "boolean",
              "description": "Boolean to specify if drawings should render to canvas instead of svg",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 386,
                  "column": 4
                },
                "end": {
                  "line": 390,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_renderToCanvasChanged\""
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2368,
                  "column": 2
                },
                "end": {
                  "line": 2370,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2372,
                  "column": 2
                },
                "end": {
                  "line": 2374,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "_renderToCanvasChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 392,
                  "column": 2
                },
                "end": {
                  "line": 407,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "renderToCanvas"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 0
            },
            "end": {
              "line": 408,
              "column": 58
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.renderToCanvas",
          "attributes": [
            {
              "name": "render-to-canvas",
              "description": "Boolean to specify if drawings should render to canvas instead of svg",
              "sourceRange": {
                "start": {
                  "line": 386,
                  "column": 4
                },
                "end": {
                  "line": 390,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.axes\n\n    Description:\n    Polymer behavior that provides the x,y and isMultiY properties for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 0
            },
            "end": {
              "line": 490,
              "column": 32
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.axes",
          "attributes": [
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.domainUpdate\n\n    Description:\n    Polymer behavior that provides domain update property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 514,
                  "column": 4
                },
                "end": {
                  "line": 517,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "null"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 504,
              "column": 0
            },
            "end": {
              "line": 519,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.domainUpdate",
          "attributes": [
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "start": {
                  "line": 514,
                  "column": 4
                },
                "end": {
                  "line": 517,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.domainUpdateNotify\n\n    Description:\n    Polymer behavior that provides domain update property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 533,
              "column": 0
            },
            "end": {
              "line": 549,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.domainUpdateNotify",
          "attributes": [
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "domain-changed-changed",
              "description": "Fired when the `domainChanged` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.axisOrientation\n\n    Description:\n    Polymer behavior that provides the orientation property for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "orientation",
              "type": "string",
              "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 576,
                  "column": 4
                },
                "end": {
                  "line": 579,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"left\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 0
            },
            "end": {
              "line": 581,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.axisOrientation",
          "attributes": [
            {
              "name": "orientation",
              "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
              "sourceRange": {
                "start": {
                  "line": 576,
                  "column": 4
                },
                "end": {
                  "line": 579,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.axis\n\n    Description:\n    Polymer behavior that provides the axis and orientation properties for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "orientation",
              "type": "string",
              "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 621,
                  "column": 4
                },
                "end": {
                  "line": 624,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"bottom\""
            },
            {
              "name": "axis",
              "type": "Object",
              "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 607,
                  "column": 4
                },
                "end": {
                  "line": 609,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 595,
              "column": 0
            },
            "end": {
              "line": 626,
              "column": 36
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.axis",
          "attributes": [
            {
              "name": "orientation",
              "description": "Defines which side the axis should be on.\n - 'left'\n - 'right'\n - 'bottom'\n - 'top'",
              "sourceRange": {
                "start": {
                  "line": 621,
                  "column": 4
                },
                "end": {
                  "line": 624,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "axis",
              "description": "axis is a general holder for the d3 instantiated scale object\nCan pass any type of instantiated scale object, IE pass in either your x or your y depending which this axis is for.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-axis",
              "sourceRange": {
                "start": {
                  "line": 607,
                  "column": 4
                },
                "end": {
                  "line": 609,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.selectedDomain\n\n    Description:\n    Polymer behavior that provides the an object to hold user selected domains for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "selectedDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 640,
              "column": 0
            },
            "end": {
              "line": 658,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.selectedDomain",
          "attributes": [
            {
              "name": "selected-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "selected-domain-changed",
              "description": "Fired when the `selectedDomain` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.selectedTimeDomain\n\n    Description:\n    Polymer behavior that provides the ability to use px-datetime (px-rangepicker) to drive the selection\n    of a time domain in a px-vis time based chart\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "selectedDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "range",
              "type": "Object",
              "description": "Range object defining the time span\n  * Format ISO8601 strings\n```\n{\n   \"from\": \"2013-01-07T22:44:30.652Z\",\n   \"to\" : \"2013-02-04T22:44:30.652Z\"\n}\n```\n\nUpdates and is updated by SelectedDomain",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 688,
                  "column": 4
                },
                "end": {
                  "line": 691,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "_preventDomainUpdate",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 692,
                  "column": 4
                },
                "end": {
                  "line": 695,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_preventRangeUpdate",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 696,
                  "column": 4
                },
                "end": {
                  "line": 699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 704,
                  "column": 2
                },
                "end": {
                  "line": 706,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_rangeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 707,
                  "column": 2
                },
                "end": {
                  "line": 738,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "range"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 673,
              "column": 0
            },
            "end": {
              "line": 755,
              "column": 64
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.selectedTimeDomain",
          "attributes": [
            {
              "name": "selected-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "range",
              "description": "Range object defining the time span\n  * Format ISO8601 strings\n```\n{\n   \"from\": \"2013-01-07T22:44:30.652Z\",\n   \"to\" : \"2013-02-04T22:44:30.652Z\"\n}\n```\n\nUpdates and is updated by SelectedDomain",
              "sourceRange": {
                "start": {
                  "line": 688,
                  "column": 4
                },
                "end": {
                  "line": 691,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "selected-domain-changed",
              "description": "Fired when the `selectedDomain` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.clipPathBoolean\n\n    Description:\n    Polymer behavior that provides a clipPath boolean to determine\n    if clip path should be used or not.\n    !!Do not confuse with PxVisBehaviorD3.clipPath!!\n    rule fo thumbis this behavior is for canvas element and\n    PxVisBehaviorD3.clipPath for svg elements\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "clipPath",
              "type": "boolean",
              "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 778,
                  "column": 6
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 773,
              "column": 0
            },
            "end": {
              "line": 783,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.clipPathBoolean",
          "attributes": [
            {
              "name": "clip-path",
              "description": "Whether to use the clipPath to avoid drawing outside of the axes.",
              "sourceRange": {
                "start": {
                  "line": 778,
                  "column": 6
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.clipPath\n\n    Description:\n    Polymer behavior that provides the clipPath object for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "clipPath",
              "type": "string",
              "description": "Holder for a clipping path ID",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 803,
                  "column": 4
                },
                "end": {
                  "line": 806,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "seriesClipPath",
              "type": "string",
              "description": "A more restricting clip path used to limit where the series are being drawn",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 811,
                  "column": 4
                },
                "end": {
                  "line": 814,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "addClipPath",
              "description": "Add the clip-path attr to the element",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 821,
                  "column": 2
                },
                "end": {
                  "line": 825,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "elem"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 797,
              "column": 0
            },
            "end": {
              "line": 826,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.clipPath",
          "attributes": [
            {
              "name": "clip-path",
              "description": "Holder for a clipping path ID",
              "sourceRange": {
                "start": {
                  "line": 803,
                  "column": 4
                },
                "end": {
                  "line": 806,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "series-clip-path",
              "description": "A more restricting clip path used to limit where the series are being drawn",
              "sourceRange": {
                "start": {
                  "line": 811,
                  "column": 4
                },
                "end": {
                  "line": 814,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "clip-path-changed",
              "description": "Fired when the `clipPath` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "series-clip-path-changed",
              "description": "Fired when the `seriesClipPath` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.dynamicRedraw\n\n    Description:\n    Polymer behavior that provides the dynamicRedraw objects for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "redrawSeries",
              "type": "boolean",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "redrawElems",
              "type": "Array",
              "description": "The accompanying array of series elements required to redraw.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "dynamicRedraw",
              "type": "boolean",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 840,
              "column": 0
            },
            "end": {
              "line": 864,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.dynamicRedraw",
          "attributes": [
            {
              "name": "redraw-series",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "sourceRange": {
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "redraw-elems",
              "description": "The accompanying array of series elements required to redraw.",
              "sourceRange": {
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "dynamic-redraw",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "sourceRange": {
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.labelTypeSize\n\n    Description:\n    Polymer behavior that provides the labelTypeSize objects for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "labelTypeSize",
              "type": "number",
              "description": "Defines the base label type size",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 888,
                  "column": 4
                },
                "end": {
                  "line": 891,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "12"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 879,
              "column": 0
            },
            "end": {
              "line": 893,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.labelTypeSize",
          "attributes": [
            {
              "name": "label-type-size",
              "description": "Defines the base label type size",
              "sourceRange": {
                "start": {
                  "line": 888,
                  "column": 4
                },
                "end": {
                  "line": 891,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.axisConfig\n\n    Description:\n    Polymer behavior that provides the axisConfig objects for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "labelTypeSize",
              "type": "number",
              "description": "Defines the base label type size",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 888,
                  "column": 4
                },
                "end": {
                  "line": 891,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "12",
              "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
            },
            {
              "name": "title",
              "type": "string",
              "description": "The displayed title for the axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 916,
                  "column": 4
                },
                "end": {
                  "line": 919,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"\""
            },
            {
              "name": "labelPosition",
              "type": "string",
              "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 930,
                  "column": 4
                },
                "end": {
                  "line": 933,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"center\""
            },
            {
              "name": "labelRotation",
              "type": "number",
              "description": "Defines how the label should be rotated. Number is the degree of rotation",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 941,
                  "column": 4
                },
                "end": {
                  "line": 944,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "labelTranslation",
              "type": "Array",
              "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 952,
                  "column": 4
                },
                "end": {
                  "line": 955,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]"
            },
            {
              "name": "series",
              "type": "Array",
              "description": "Array of the series which belong to this axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 962,
                  "column": 4
                },
                "end": {
                  "line": 965,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "translateAmt",
              "type": "Array",
              "description": "An x,y amount to move the axis to allow for labels and titles",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 972,
                  "column": 4
                },
                "end": {
                  "line": 975,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]"
            },
            {
              "name": "titleLocation",
              "type": "Object",
              "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 988,
                  "column": 4
                },
                "end": {
                  "line": 991,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "titleTypeSize",
              "type": "number",
              "description": "Defines the Title type size",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 997,
                  "column": 4
                },
                "end": {
                  "line": 1000,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "15"
            },
            {
              "name": "strokeWidth",
              "type": "number",
              "description": "Defines the axis stroke width",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1006,
                  "column": 4
                },
                "end": {
                  "line": 1009,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "1"
            },
            {
              "name": "outerTickSize",
              "type": "number",
              "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1015,
                  "column": 4
                },
                "end": {
                  "line": 1018,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "tickValues",
              "type": "Array",
              "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1024,
                  "column": 4
                },
                "end": {
                  "line": 1026,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "ticks",
              "type": "(Object|Number)",
              "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1044,
                  "column": 4
                },
                "end": {
                  "line": 1046,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "axisColor",
              "type": "string",
              "description": "Defines the color for axis lines, ticks, labels, and title",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1051,
                  "column": 4
                },
                "end": {
                  "line": 1054,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"\""
            },
            {
              "name": "drawnTickValues",
              "type": "Array",
              "description": "Returned tick values from the axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1059,
                  "column": 4
                },
                "end": {
                  "line": 1062,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 907,
              "column": 0
            },
            "end": {
              "line": 1064,
              "column": 34
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.axisConfig",
          "attributes": [
            {
              "name": "label-type-size",
              "description": "Defines the base label type size",
              "sourceRange": {
                "start": {
                  "line": 888,
                  "column": 4
                },
                "end": {
                  "line": 891,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorD3.labelTypeSize"
            },
            {
              "name": "title",
              "description": "The displayed title for the axis",
              "sourceRange": {
                "start": {
                  "line": 916,
                  "column": 4
                },
                "end": {
                  "line": 919,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "label-position",
              "description": "Defines on which side the tick mark the label should sit.\n - 'center'\n - 'before'\n - 'after'",
              "sourceRange": {
                "start": {
                  "line": 930,
                  "column": 4
                },
                "end": {
                  "line": 933,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "label-rotation",
              "description": "Defines how the label should be rotated. Number is the degree of rotation",
              "sourceRange": {
                "start": {
                  "line": 941,
                  "column": 4
                },
                "end": {
                  "line": 944,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "label-translation",
              "description": "Defines how the label should be moved in x,y. Array is an x,y pair and coresponds to the number of pixels to move the label",
              "sourceRange": {
                "start": {
                  "line": 952,
                  "column": 4
                },
                "end": {
                  "line": 955,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "series",
              "description": "Array of the series which belong to this axis",
              "sourceRange": {
                "start": {
                  "line": 962,
                  "column": 4
                },
                "end": {
                  "line": 965,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "translate-amt",
              "description": "An x,y amount to move the axis to allow for labels and titles",
              "sourceRange": {
                "start": {
                  "line": 972,
                  "column": 4
                },
                "end": {
                  "line": 975,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "title-location",
              "description": "Optional object to specify placement of the title. If none is supplied, then it uses `orientation` to determine title location.\n\n```\n   {\n     x: Number, // a x number of pixels\n     y: Number, // a y number of pixels\n     r: Number, // a number of degrees to rotate\n     anchor: String, // middle, start, end\n   }\n```",
              "sourceRange": {
                "start": {
                  "line": 988,
                  "column": 4
                },
                "end": {
                  "line": 991,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "title-type-size",
              "description": "Defines the Title type size",
              "sourceRange": {
                "start": {
                  "line": 997,
                  "column": 4
                },
                "end": {
                  "line": 1000,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "stroke-width",
              "description": "Defines the axis stroke width",
              "sourceRange": {
                "start": {
                  "line": 1006,
                  "column": 4
                },
                "end": {
                  "line": 1009,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "outer-tick-size",
              "description": "Defines the axis outerTickSize. Default is to hide them\n\nSee: https://github.com/d3/d3-axis#axis_tickSizeOuter",
              "sourceRange": {
                "start": {
                  "line": 1015,
                  "column": 4
                },
                "end": {
                  "line": 1018,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "tick-values",
              "description": "Defines the what values the axis should use\n\nSee: https://github.com/d3/d3-axis#axis_tickValues",
              "sourceRange": {
                "start": {
                  "line": 1024,
                  "column": 4
                },
                "end": {
                  "line": 1026,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "ticks",
              "description": "Defines the tick number and format\n\nSee: https://github.com/d3/d3-axis#axis_ticks\n\nCan be either a Number or an Object\n\nObj format:\n```\n   {\n        \"interval\": Number,\n        \"format\": String or d3 object,\n   }\n```",
              "sourceRange": {
                "start": {
                  "line": 1044,
                  "column": 4
                },
                "end": {
                  "line": 1046,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "(Object|Number)"
            },
            {
              "name": "axis-color",
              "description": "Defines the color for axis lines, ticks, labels, and title",
              "sourceRange": {
                "start": {
                  "line": 1051,
                  "column": 4
                },
                "end": {
                  "line": 1054,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "drawn-tick-values",
              "description": "Returned tick values from the axis",
              "sourceRange": {
                "start": {
                  "line": 1059,
                  "column": 4
                },
                "end": {
                  "line": 1062,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "drawn-tick-values-changed",
              "description": "Fired when the `drawnTickValues` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.advAxisConfig\n\n    Description:\n    Polymer behavior that provides the advAxisConfig objects for d3 components.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1106,
              "column": 0
            },
            "end": {
              "line": 1110,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.advAxisConfig",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.radialAxisConfig\n\n    Description:\n    Polymer behavior that provides shared behaviors for radial axes elements.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "centerOffset",
              "type": "number",
              "description": "Used in a radial chart to provide a hole in the center of the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1131,
                  "column": 4
                },
                "end": {
                  "line": 1135,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "0"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1125,
              "column": 0
            },
            "end": {
              "line": 1137,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.radialAxisConfig",
          "attributes": [
            {
              "name": "center-offset",
              "description": "Used in a radial chart to provide a hole in the center of the chart",
              "sourceRange": {
                "start": {
                  "line": 1131,
                  "column": 4
                },
                "end": {
                  "line": 1135,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "center-offset-changed",
              "description": "Fired when the `centerOffset` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.interpolationFunction\n\n    Description:\n    Polymer behavior that provides definition for interpolationFunction and method to check for an interpolationFunction\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "interpolationFunction",
              "type": "Function",
              "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 4
                },
                "end": {
                  "line": 1173,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_basicInterpolators",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1175,
                  "column": 4
                },
                "end": {
                  "line": 1192,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_checkInterpolation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1195,
                  "column": 2
                },
                "end": {
                  "line": 1215,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1151,
              "column": 0
            },
            "end": {
              "line": 1216,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.interpolationFunction",
          "attributes": [
            {
              "name": "interpolation-function",
              "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 4
                },
                "end": {
                  "line": 1173,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.lineRadiusLimit\n\n    Description:\n    Polymer behavior that provides the lineRadiusLimit property\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "lineRadiusLimit",
              "type": "number",
              "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1236,
                  "column": 4
                },
                "end": {
                  "line": 1238,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1230,
              "column": 0
            },
            "end": {
              "line": 1240,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.lineRadiusLimit",
          "attributes": [
            {
              "name": "line-radius-limit",
              "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit",
              "sourceRange": {
                "start": {
                  "line": 1236,
                  "column": 4
                },
                "end": {
                  "line": 1238,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.radialLineGenerator\n\n    Description:\n    Polymer behavior that provides function to create a radial line generator\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "interpolationFunction",
              "type": "Function",
              "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 4
                },
                "end": {
                  "line": 1173,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "_basicInterpolators",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1175,
                  "column": 4
                },
                "end": {
                  "line": 1192,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "lineRadiusLimit",
              "type": "number",
              "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1272,
                  "column": 4
                },
                "end": {
                  "line": 1274,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "line",
              "type": "Object",
              "description": "A holder object for the line generator",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1261,
                  "column": 4
                },
                "end": {
                  "line": 1263,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_checkInterpolation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1195,
                  "column": 2
                },
                "end": {
                  "line": 1215,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "_defineRadialLine",
              "description": "Defines a multi-scale d3 line generator and its attrs",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1281,
                  "column": 2
                },
                "end": {
                  "line": 1368,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "toCanvas"
                },
                {
                  "name": "multiLine"
                },
                {
                  "name": "counterClockwise"
                },
                {
                  "name": "useDegrees"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1254,
              "column": 0
            },
            "end": {
              "line": 1369,
              "column": 134
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.radialLineGenerator",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "interpolation-function",
              "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 4
                },
                "end": {
                  "line": 1173,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Function",
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "line-radius-limit",
              "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
              "sourceRange": {
                "start": {
                  "line": 1272,
                  "column": 4
                },
                "end": {
                  "line": 1274,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "line",
              "description": "A holder object for the line generator",
              "sourceRange": {
                "start": {
                  "line": 1261,
                  "column": 4
                },
                "end": {
                  "line": 1263,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.lineGaps\n\n    Description:\n    Polymer behavior that provides definition for showGaps\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "showGaps",
              "type": "boolean",
              "description": "A boolean spcifying if the line should show gaps on undefined data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1390,
                  "column": 4
                },
                "end": {
                  "line": 1393,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1384,
              "column": 0
            },
            "end": {
              "line": 1395,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.lineGaps",
          "attributes": [
            {
              "name": "show-gaps",
              "description": "A boolean spcifying if the line should show gaps on undefined data.",
              "sourceRange": {
                "start": {
                  "line": 1390,
                  "column": 4
                },
                "end": {
                  "line": 1393,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.lineShared\n\n    Description:\n    Polymer behavior that provides shared behaviors for line elements.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "interpolationFunction",
              "type": "Function",
              "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 4
                },
                "end": {
                  "line": 1173,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "_basicInterpolators",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1175,
                  "column": 4
                },
                "end": {
                  "line": 1192,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "lineRadiusLimit",
              "type": "number",
              "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1272,
                  "column": 4
                },
                "end": {
                  "line": 1274,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
            },
            {
              "name": "line",
              "type": "Object",
              "description": "A holder object for the line generator",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1261,
                  "column": 4
                },
                "end": {
                  "line": 1263,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
            },
            {
              "name": "seriesId",
              "type": "string",
              "description": "A unique ID for each line series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1772,
                  "column": 4
                },
                "end": {
                  "line": 1774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.seriesId"
            },
            {
              "name": "showGaps",
              "type": "boolean",
              "description": "A boolean spcifying if the line should show gaps on undefined data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1390,
                  "column": 4
                },
                "end": {
                  "line": 1393,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.lineGaps"
            },
            {
              "name": "timeDomain",
              "type": "Object",
              "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3199,
                  "column": 4
                },
                "end": {
                  "line": 3204,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.timeDomain"
            },
            {
              "name": "parallelCoordinates",
              "type": "boolean",
              "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1415,
                  "column": 4
                },
                "end": {
                  "line": 1418,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "radialLine",
              "type": "boolean",
              "description": "A dev set boolean specifying if the line is using radial(polar) data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1423,
                  "column": 4
                },
                "end": {
                  "line": 1426,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "gradientLine",
              "type": "boolean",
              "description": "A boolean spceifying if a opacity gradient should get applied to the line",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1431,
                  "column": 4
                },
                "end": {
                  "line": 1434,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "gradientRange",
              "type": "Array",
              "description": "Calculated range values for the gradient scale",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1439,
                  "column": 4
                },
                "end": {
                  "line": 1442,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_colorArr",
              "type": "Array",
              "description": "Gets and saves the rgb so we can make an rgba to apply to the line",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1447,
                  "column": 4
                },
                "end": {
                  "line": 1450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "multiPath",
              "type": "boolean",
              "description": "A boolean spcifying if multiple paths get drawn by the line",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1456,
                  "column": 4
                },
                "end": {
                  "line": 1459,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_currentDrawingOptions",
              "type": "Object",
              "description": "Object used to store various info about current rendering state",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1463,
                  "column": 4
                },
                "end": {
                  "line": 1471,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"lastPointRenderedIndex\":null,\"currentBatchStartIndex\":0}"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_checkInterpolation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1195,
                  "column": 2
                },
                "end": {
                  "line": 1215,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "_defineRadialLine",
              "description": "Defines a multi-scale d3 line generator and its attrs",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1281,
                  "column": 2
                },
                "end": {
                  "line": 1368,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "toCanvas"
                },
                {
                  "name": "multiLine"
                },
                {
                  "name": "counterClockwise"
                },
                {
                  "name": "useDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
            },
            {
              "name": "_resetRenderingContext",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1474,
                  "column": 2
                },
                "end": {
                  "line": 1477,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeColorArr",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1479,
                  "column": 2
                },
                "end": {
                  "line": 1510,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "categories"
                },
                {
                  "name": "completeSeriesConfig"
                },
                {
                  "name": "seriesId"
                }
              ]
            },
            {
              "name": "_opacityLine",
              "description": "Returns the correct opacity to use for all lines.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1516,
                  "column": 2
                },
                "end": {
                  "line": 1521,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "_computeGradientRange",
              "description": "Computes the data range.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1527,
                  "column": 2
                },
                "end": {
                  "line": 1543,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chartData"
                },
                {
                  "name": "timeDomain"
                },
                {
                  "name": "seriesId"
                }
              ]
            },
            {
              "name": "_removeGaps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1545,
                  "column": 2
                },
                "end": {
                  "line": 1547,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "_defineSingleLine",
              "description": "Defines the d3 line generator and its attrs",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1553,
                  "column": 2
                },
                "end": {
                  "line": 1613,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "toCanvas"
                }
              ]
            },
            {
              "name": "_defineMultiLine",
              "description": "Defines a multi-scale d3 line generator and its attrs",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1619,
                  "column": 2
                },
                "end": {
                  "line": 1653,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "toCanvas"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1409,
              "column": 0
            },
            "end": {
              "line": 1654,
              "column": 183
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.lineShared",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "interpolation-function",
              "description": "A d3 function used to interpolate the series lines.\n\nCan also be a string referencing simple, built in d3 functions:\n- `\"curveBasis\"`\n- `\"curveBasisClosed\"`\n- `\"curveBasisOpen\"`\n- `\"curveLinear\"`\n- `\"curveLinearClosed\"`\n- `\"curveMonotoneX\"`\n- `\"curveMonotoneY\"`\n- `\"curveNatural\"`\n- `\"curveStep\"`\n- `\"curveStepAfter\"`\n- `\"curveStepBefore\"`\n\nSee: https://github.com/d3/d3-shape/blob/master/README.md#curves",
              "sourceRange": {
                "start": {
                  "line": 1171,
                  "column": 4
                },
                "end": {
                  "line": 1173,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Function",
              "inheritedFrom": "PxVisBehaviorD3.interpolationFunction"
            },
            {
              "name": "line-radius-limit",
              "description": "sets a minimum value for the line amplitude. Points less than the lineRadiusLimit will be set to the limit\n\nEssentially, it moves a point that is past the center into the visible axis area on the opposite side to terminating inside the clip path area, thereby also changing the angle of those connecting lines\n\nNote: radius on a radialLine is equivelent to y on a cartesean line.",
              "sourceRange": {
                "start": {
                  "line": 1272,
                  "column": 4
                },
                "end": {
                  "line": 1274,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
            },
            {
              "name": "line",
              "description": "A holder object for the line generator",
              "sourceRange": {
                "start": {
                  "line": 1261,
                  "column": 4
                },
                "end": {
                  "line": 1263,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.radialLineGenerator"
            },
            {
              "name": "series-id",
              "description": "A unique ID for each line series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1772,
                  "column": 4
                },
                "end": {
                  "line": 1774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.seriesId"
            },
            {
              "name": "show-gaps",
              "description": "A boolean spcifying if the line should show gaps on undefined data.",
              "sourceRange": {
                "start": {
                  "line": 1390,
                  "column": 4
                },
                "end": {
                  "line": 1393,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.lineGaps"
            },
            {
              "name": "time-domain",
              "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3199,
                  "column": 4
                },
                "end": {
                  "line": 3204,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.timeDomain"
            },
            {
              "name": "parallel-coordinates",
              "description": "A dev set boolean specifying if the chart is for a parallel coordinates chart",
              "sourceRange": {
                "start": {
                  "line": 1415,
                  "column": 4
                },
                "end": {
                  "line": 1418,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "radial-line",
              "description": "A dev set boolean specifying if the line is using radial(polar) data",
              "sourceRange": {
                "start": {
                  "line": 1423,
                  "column": 4
                },
                "end": {
                  "line": 1426,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "gradient-line",
              "description": "A boolean spceifying if a opacity gradient should get applied to the line",
              "sourceRange": {
                "start": {
                  "line": 1431,
                  "column": 4
                },
                "end": {
                  "line": 1434,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "gradient-range",
              "description": "Calculated range values for the gradient scale",
              "sourceRange": {
                "start": {
                  "line": 1439,
                  "column": 4
                },
                "end": {
                  "line": 1442,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "multi-path",
              "description": "A boolean spcifying if multiple paths get drawn by the line",
              "sourceRange": {
                "start": {
                  "line": 1456,
                  "column": 4
                },
                "end": {
                  "line": 1459,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.serieToRedrawOnTopSVG\n\n    Description:\n    Polymer behavior that provides the mechanism to redraw a serie on top for SVG\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "serieToRedrawOnTop",
              "type": "Array",
              "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1922,
                  "column": 4
                },
                "end": {
                  "line": 1924,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
            },
            {
              "name": "svg",
              "type": "Object",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_uniqueIdsUsed",
              "type": "Array",
              "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2208,
                  "column": 5
                },
                "end": {
                  "line": 2213,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "pxSvgElem",
              "type": "Object",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.svg"
            }
          ],
          "methods": [
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2215,
                  "column": 2
                },
                "end": {
                  "line": 2222,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "generateRandomID",
              "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseStr"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "cloneSVGElem",
              "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 2
                },
                "end": {
                  "line": 94,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                },
                {
                  "name": "prop"
                },
                {
                  "name": "onBottom"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawSVGOnCanvas",
              "description": "Draws the current svg into a canvas",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 2
                },
                "end": {
                  "line": 157,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "elem"
                },
                {
                  "name": "callback"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawCanvg",
              "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 2
                },
                "end": {
                  "line": 170,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_nativeDrawSvgOnCanvas",
              "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 2
                },
                "end": {
                  "line": 205,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "sucessCallback"
                },
                {
                  "name": "failureCallback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_getSVGOuterHtml",
              "description": "fix for IE to get outer HTML",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 209,
                  "column": 2
                },
                "end": {
                  "line": 256,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawSVGOnTop",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1669,
                  "column": 2
                },
                "end": {
                  "line": 1674,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "idToRedraw"
                },
                {
                  "name": "selfId"
                },
                {
                  "name": "d3Selection"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1668,
              "column": 0
            },
            "end": {
              "line": 1675,
              "column": 58
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.serieToRedrawOnTopSVG",
          "attributes": [
            {
              "name": "serie-to-redraw-on-top",
              "description": "Array containing a set of series to redraw on top of everything (in the order\nthey are found in this array)",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1922,
                  "column": 4
                },
                "end": {
                  "line": 1924,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.serieToRedrawOnTop"
            },
            {
              "name": "svg",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "px-svg-elem",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.svg"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "svg-changed",
              "description": "Fired when the `svg` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "type": "CustomEvent",
              "name": "px-svg-elem-changed",
              "description": "Fired when the `pxSvgElem` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.svg"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.radialPixelCalc\n\n    Description:\n    Polymer behavior that provides the mechanism to calculate pixel space vals for polar charts\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [],
          "methods": [
            {
              "name": "calcPixelCoordForRadial",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1690,
                  "column": 2
                },
                "end": {
                  "line": 1702,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "amp"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "whichVal"
                }
              ]
            },
            {
              "name": "adjustAngleForPolarChart",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1704,
                  "column": 2
                },
                "end": {
                  "line": 1727,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1689,
              "column": 0
            },
            "end": {
              "line": 1728,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.radialPixelCalc",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.scatterMarkers\n\n    Description:\n    Polymer behavior that provides the definition for scatter markers\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "markerMapping",
              "type": "Object",
              "description": "Maps dev input marker string to d3 symbols.\n\nTo add additional, custom icons, provide a draw function wrapped in an object and draw your shape using canvas drawing methods. See 'bar' or 'x' as examples",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1750,
                  "column": 4
                },
                "end": {
                  "line": 1803,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "markerSymbol",
              "type": "string",
              "description": "The symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\nThis property will be read from the completeSeriesConfig\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1822,
                  "column": 4
                },
                "end": {
                  "line": 1824,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "markerScale",
              "type": "number",
              "description": "Scales the size of the scatter marker\nThis property will be read from the completeSeriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1829,
                  "column": 4
                },
                "end": {
                  "line": 1831,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "markerSize",
              "type": "number",
              "description": "the size of the markers\nThis property will be read from the completeSeriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1836,
                  "column": 4
                },
                "end": {
                  "line": 1838,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "markerFillOpacity",
              "type": "number",
              "description": "The opacity of the fill (inside) of the marker\nThis property will be read from the completeSeriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1843,
                  "column": 4
                },
                "end": {
                  "line": 1845,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "markerStrokeOpacity",
              "type": "number",
              "description": "The opacity of the stroke (outside) of the marker\nThis property will be read from the completeSeriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1850,
                  "column": 4
                },
                "end": {
                  "line": 1852,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "mutedOpacity",
              "type": "number",
              "description": "the opacity value of the fill to be used when muting a serie (stroke is not drawn on mute)\nThis property will be read from the completeSeriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1857,
                  "column": 4
                },
                "end": {
                  "line": 1859,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1743,
              "column": 0
            },
            "end": {
              "line": 1861,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.scatterMarkers",
          "attributes": [
            {
              "name": "marker-mapping",
              "description": "Maps dev input marker string to d3 symbols.\n\nTo add additional, custom icons, provide a draw function wrapped in an object and draw your shape using canvas drawing methods. See 'bar' or 'x' as examples",
              "sourceRange": {
                "start": {
                  "line": 1750,
                  "column": 4
                },
                "end": {
                  "line": 1803,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "marker-symbol",
              "description": "The symbol used for the marker. Supported symbols:\n- 'circle'\n- 'cross'\n- 'diamond'\n- 'square'\n- 'triangle-up'\n- 'star'\n- 'wye'\nmore info at https://github.com/d3/d3-shape/blob/master/README.md#symbols\nThis property will be read from the completeSeriesConfig\n\nSome additional \"custom\" types are also available:\n- 'bar'\n- 'thin-bar'\n- 'thick-bar'\n- 'x'",
              "sourceRange": {
                "start": {
                  "line": 1822,
                  "column": 4
                },
                "end": {
                  "line": 1824,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "marker-scale",
              "description": "Scales the size of the scatter marker\nThis property will be read from the completeSeriesConfig",
              "sourceRange": {
                "start": {
                  "line": 1829,
                  "column": 4
                },
                "end": {
                  "line": 1831,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "marker-size",
              "description": "the size of the markers\nThis property will be read from the completeSeriesConfig",
              "sourceRange": {
                "start": {
                  "line": 1836,
                  "column": 4
                },
                "end": {
                  "line": 1838,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "marker-fill-opacity",
              "description": "The opacity of the fill (inside) of the marker\nThis property will be read from the completeSeriesConfig",
              "sourceRange": {
                "start": {
                  "line": 1843,
                  "column": 4
                },
                "end": {
                  "line": 1845,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "marker-stroke-opacity",
              "description": "The opacity of the stroke (outside) of the marker\nThis property will be read from the completeSeriesConfig",
              "sourceRange": {
                "start": {
                  "line": 1850,
                  "column": 4
                },
                "end": {
                  "line": 1852,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "muted-opacity",
              "description": "the opacity value of the fill to be used when muting a serie (stroke is not drawn on mute)\nThis property will be read from the completeSeriesConfig",
              "sourceRange": {
                "start": {
                  "line": 1857,
                  "column": 4
                },
                "end": {
                  "line": 1859,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.icons\n\n    Description:\n    Polymer behavior that provides the mechanism to get icons\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "_meta",
              "type": "!Polymer.IronMeta",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1880,
                  "column": 4
                },
                "end": {
                  "line": 1882,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_iconSize",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1884,
                  "column": 4
                },
                "end": {
                  "line": 1887,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "16"
            },
            {
              "name": "_iconScale",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1889,
                  "column": 4
                },
                "end": {
                  "line": 1892,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "16"
            }
          ],
          "methods": [
            {
              "name": "_getIcon",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1895,
                  "column": 2
                },
                "end": {
                  "line": 1921,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "iconName"
                },
                {
                  "name": "targetSize"
                },
                {
                  "name": "defaultKey"
                },
                {
                  "name": "defaultName"
                }
              ]
            },
            {
              "name": "_calcIconScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1923,
                  "column": 2
                },
                "end": {
                  "line": 1925,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "size"
                },
                {
                  "name": "targetSize"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1875,
              "column": 0
            },
            "end": {
              "line": 1926,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.icons",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorD3.cursorIcon\n\n    Description:\n    Polymer behavior that provides the mechanism to draw cursor icons\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-d3.html",
          "properties": [
            {
              "name": "_meta",
              "type": "!Polymer.IronMeta",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1880,
                  "column": 4
                },
                "end": {
                  "line": 1882,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorD3.icons"
            },
            {
              "name": "_iconSize",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1884,
                  "column": 4
                },
                "end": {
                  "line": 1887,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "16",
              "inheritedFrom": "PxVisBehaviorD3.icons"
            },
            {
              "name": "_iconScale",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1889,
                  "column": 4
                },
                "end": {
                  "line": 1892,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "16",
              "inheritedFrom": "PxVisBehaviorD3.icons"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIcon",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1895,
                  "column": 2
                },
                "end": {
                  "line": 1921,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "iconName"
                },
                {
                  "name": "targetSize"
                },
                {
                  "name": "defaultKey"
                },
                {
                  "name": "defaultName"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.icons"
            },
            {
              "name": "_calcIconScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1923,
                  "column": 2
                },
                "end": {
                  "line": 1925,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "size"
                },
                {
                  "name": "targetSize"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.icons"
            },
            {
              "name": "_drawCursorIcon",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1942,
                  "column": 2
                },
                "end": {
                  "line": 1960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_positionCursorIcon",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1962,
                  "column": 2
                },
                "end": {
                  "line": 1970,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1940,
              "column": 0
            },
            "end": {
              "line": 1972,
              "column": 55
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorD3.cursorIcon",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.chartCommonMethods\n\n    Description:\n    Polymer behavior that provides some general methods used accross charts\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "seriesColorList",
              "type": "Array",
              "description": "Defines an colors in order that will be used for series.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            }
          ],
          "methods": [
            {
              "name": "_getColor",
              "description": "Helper function to return the correct color for a particular index.",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 189,
                  "column": 2
                },
                "end": {
                  "line": 194,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "PxColorsBehavior.getSeriesColors"
            },
            {
              "name": "_calcIndex",
              "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 199,
                  "column": 2
                },
                "end": {
                  "line": 201,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "i"
                },
                {
                  "name": "l"
                }
              ],
              "inheritedFrom": "PxColorsBehavior.getSeriesColors"
            },
            {
              "name": "_returnAllKeys",
              "description": "Goes through an array of objects and gathers all unique keys. Returns a list of keys\n\nExpects and array of objects\n\nReturns an array of strings",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 37
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.chartCommonMethods",
          "attributes": [
            {
              "name": "series-color-list",
              "description": "Defines an colors in order that will be used for series.",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.chartCommon\n\n    Description:\n    Polymer behavior that provides the basic listeners and methods for charts built with px-vis.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "seriesColorList",
              "type": "Array",
              "description": "Defines an colors in order that will be used for series.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "xAxisType",
              "type": "string",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "yAxisType",
              "type": "string",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "seriesConfig",
              "type": "Object",
              "description": "A configuration file to associate series order, name, type, and colors.\n\nAssociation of name, type, and seriesNumber should be developer set. Color and axis are optional.\n\n```\n {\n    \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n        \"type\": \"line\",  //line or scatter or both\n        \"markerSymbol\": \"diamond\" //if using scatter different markerSymbol can be used. See \"markerSymbol\" in px-vis-scatter\n        \"markerSize\": \"64\" //if using scatter allows to change the size of markers\n        \"markerScale\": \"2\" //if using scatter allows to scale the size of markers\n        \"markerFillOpacity\": \"0.5\" //if using scatter allows to specify the opacity of the inside of the marker\n        \"markerStrokeOpacity\": \"1\" //if using scatter allows to specify the opacity of the outside of the marker\n        \"strokeWidth\": \"1\" //if using line, allows you to specify the thickness of the line\n        \"mutedOpacity\": \"0.3\" //opacity value to use when muting a serie\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"x\",  //index or key name for independent variable\n        \"y\": \"y\",  //index or key name for dependent variable\n        \"xAxisUnit\": \"Volt\" //Unit to be used for the X axis. Can be ignored if x axis is time based\n        \"yAxisUnit\": \"Oranges\" //unit to be used for the Y axis.\n        \"xMin\": 0,  // minimum x value\n        \"xMax\": 100,  //maximum x value\n        \"yMin\": 5,  //minimum y value\n        \"yMax\": 50,  //maximum y value\n        \"color\": \"rgb(0,0,0)\", //color you want the chart\n        \"interpolationFunction\": Px.d3.curveBasis, //The line interpretor you want to use. See property 'interpolationFunction'\n        \"axis\": {\n            \"id\": \"AXIS_ID\"   //a unique identifier\n            \"side\": \"left\"    //the side that you want the axis to draw on, `left` or `right`\n            \"number\": 1       //the order of the axis on each side\n         }\n    }\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 94,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "_defaultSeriesConfig",
              "type": "Object",
              "description": "A default configuration file. It fills in the missing parts of seriesConfig. Any options from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig\n\nDefault:\n\n```\n {\n    \"type\": \"line\",\n    \"x\": 'x',\n    \"axis\": {\n      \"id\": \"defaultAxis\",\n      \"side\": \"left\",\n      \"number\": 1\n  }}\n```",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 6
                },
                "end": {
                  "line": 125,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"type\":\"line\",\"x\":\"x\",\"axis\":{\"id\":\"defaultAxis\",\"side\":\"left\",\"number\":1}}"
            },
            {
              "name": "defaultSeriesConfig",
              "type": "Object",
              "description": "Overwrites to the default configuration file. The defaultSeriesConfig is used to fill in the missing parts of seriesConfig. Any option from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 135,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_updateDSC\""
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "includeAllSeries",
              "type": "boolean",
              "description": "A boolean flag on whether to include all the series in the data.\n- `false`: only series defined in the seriesConfig file will be drawn\n- `true`: All series in the dataset will be drawn. Defaults will be used for the seriesConfig. If this is used do not specify a seriesConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 6
                },
                "end": {
                  "line": 145,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_seriesKeys",
              "type": "Array",
              "description": "Representes the keys avaiable in completeSeriesConfig. It's being set\n before completeSeriesConfig is set",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 152,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "preventCompleteSeriesConfigCalc",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getColor",
              "description": "Helper function to return the correct color for a particular index.",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 189,
                  "column": 2
                },
                "end": {
                  "line": 194,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "PxColorsBehavior.getSeriesColors"
            },
            {
              "name": "_calcIndex",
              "description": "Helper function to calculate the index. When we run out of indcies, it loops back over valid indicies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 199,
                  "column": 2
                },
                "end": {
                  "line": 201,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "i"
                },
                {
                  "name": "l"
                }
              ],
              "inheritedFrom": "PxColorsBehavior.getSeriesColors"
            },
            {
              "name": "_returnAllKeys",
              "description": "Goes through an array of objects and gathers all unique keys. Returns a list of keys\n\nExpects and array of objects\n\nReturns an array of strings",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.chartCommonMethods"
            },
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "muteUnmuteSeries",
              "description": "Method to mute or umute",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 576,
                  "column": 2
                },
                "end": {
                  "line": 595,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                },
                {
                  "name": "fromRegister"
                }
              ],
              "inheritedFrom": "PxVisBehavior.muteUnmuteSeries"
            },
            {
              "name": "_calcChartExts",
              "description": "Calcs the extents of the charts",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 167,
                  "column": 4
                },
                "end": {
                  "line": 176,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mins"
                },
                {
                  "name": "maxes"
                },
                {
                  "name": "axis"
                }
              ]
            },
            {
              "name": "_setCompleteSeriesConfig",
              "description": "Creates the real series confit object based on the default settings, the dev defined series config, and the includeAllSeries flag.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 4
                },
                "end": {
                  "line": 376,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_sideRegister",
              "description": "Helper function for the register. Returns true if the side register should exist",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 382,
                  "column": 4
                },
                "end": {
                  "line": 384,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "location"
                }
              ]
            },
            {
              "name": "_topRegister",
              "description": "Helper function for the register. Returns true if the top register should exist",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 390,
                  "column": 4
                },
                "end": {
                  "line": 392,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "location"
                }
              ]
            },
            {
              "name": "_chartTypeLine",
              "description": "Helper function for the line series. Returns true if the series is a line",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 398,
                  "column": 4
                },
                "end": {
                  "line": 403,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "obj"
                }
              ]
            },
            {
              "name": "_chartTypeScatter",
              "description": "Helper function for the line series. Returns true if the series is a line",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 409,
                  "column": 4
                },
                "end": {
                  "line": 414,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "obj"
                }
              ]
            },
            {
              "name": "_returnKeys",
              "description": "returns the keys of an object",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 420,
                  "column": 4
                },
                "end": {
                  "line": 422,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ]
            },
            {
              "name": "_updateDSC",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 424,
                  "column": 4
                },
                "end": {
                  "line": 438,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dsc"
                }
              ]
            },
            {
              "name": "_returnStrokeWidth",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 440,
                  "column": 4
                },
                "end": {
                  "line": 442,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "seriesId"
                },
                {
                  "name": "config"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 444,
              "column": 226
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.chartCommon",
          "attributes": [
            {
              "name": "series-color-list",
              "description": "Defines an colors in order that will be used for series.",
              "sourceRange": {
                "file": "px-vis-behavior-colors.html",
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxColorsBehavior.dataVisColors"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "x-axis-type",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "y-axis-type",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "series-config",
              "description": "A configuration file to associate series order, name, type, and colors.\n\nAssociation of name, type, and seriesNumber should be developer set. Color and axis are optional.\n\n```\n {\n    \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n        \"type\": \"line\",  //line or scatter or both\n        \"markerSymbol\": \"diamond\" //if using scatter different markerSymbol can be used. See \"markerSymbol\" in px-vis-scatter\n        \"markerSize\": \"64\" //if using scatter allows to change the size of markers\n        \"markerScale\": \"2\" //if using scatter allows to scale the size of markers\n        \"markerFillOpacity\": \"0.5\" //if using scatter allows to specify the opacity of the inside of the marker\n        \"markerStrokeOpacity\": \"1\" //if using scatter allows to specify the opacity of the outside of the marker\n        \"strokeWidth\": \"1\" //if using line, allows you to specify the thickness of the line\n        \"mutedOpacity\": \"0.3\" //opacity value to use when muting a serie\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"x\",  //index or key name for independent variable\n        \"y\": \"y\",  //index or key name for dependent variable\n        \"xAxisUnit\": \"Volt\" //Unit to be used for the X axis. Can be ignored if x axis is time based\n        \"yAxisUnit\": \"Oranges\" //unit to be used for the Y axis.\n        \"xMin\": 0,  // minimum x value\n        \"xMax\": 100,  //maximum x value\n        \"yMin\": 5,  //minimum y value\n        \"yMax\": 50,  //maximum y value\n        \"color\": \"rgb(0,0,0)\", //color you want the chart\n        \"interpolationFunction\": Px.d3.curveBasis, //The line interpretor you want to use. See property 'interpolationFunction'\n        \"axis\": {\n            \"id\": \"AXIS_ID\"   //a unique identifier\n            \"side\": \"left\"    //the side that you want the axis to draw on, `left` or `right`\n            \"number\": 1       //the order of the axis on each side\n         }\n    }\n }\n```",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 94,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "default-series-config",
              "description": "Overwrites to the default configuration file. The defaultSeriesConfig is used to fill in the missing parts of seriesConfig. Any option from seriesConfig can be specified in the defaultSeriesConfig and will be automatically used if not defined in the seriesConfig",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 135,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "include-all-series",
              "description": "A boolean flag on whether to include all the series in the data.\n- `false`: only series defined in the seriesConfig file will be drawn\n- `true`: All series in the dataset will be drawn. Defaults will be used for the seriesConfig. If this is used do not specify a seriesConfig",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 6
                },
                "end": {
                  "line": 145,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "prevent-complete-series-config-calc",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.chartId\n\n    Description:\n    Polymer behavior that allows the chart to have a unique ID\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "_uniqueIdsUsed",
              "type": "Array",
              "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2208,
                  "column": 5
                },
                "end": {
                  "line": 2213,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "chartId",
              "type": "string",
              "description": "Internal unique ID",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 462,
                  "column": 6
                },
                "end": {
                  "line": 464,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2215,
                  "column": 2
                },
                "end": {
                  "line": 2222,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "generateRandomID",
              "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2231,
                  "column": 2
                },
                "end": {
                  "line": 2251,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseStr"
                }
              ],
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 0
            },
            "end": {
              "line": 466,
              "column": 29
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.chartId",
          "attributes": [
            {
              "name": "chart-id",
              "description": "Internal unique ID",
              "sourceRange": {
                "start": {
                  "line": 462,
                  "column": 6
                },
                "end": {
                  "line": 464,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.webWorkerSynchronization\n\n    Description:\n    Polymer behavior that allows the chart to keep its data synced in a web worker\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "preventWebWorkerSynchronization",
              "type": "boolean",
              "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3028,
                  "column": 6
                },
                "end": {
                  "line": 3031,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
            },
            {
              "name": "wwDataSyncCounter",
              "type": "number",
              "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3052,
                  "column": 4
                },
                "end": {
                  "line": 3055,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
            },
            {
              "name": "_wwSyncRequestDataDeletion",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 482,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_wwSyncDataDeleted",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 483,
                  "column": 6
                },
                "end": {
                  "line": 486,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_wwSyncDataDeletionTimeout",
              "type": "number",
              "description": "After detaching the chart time after which we will delete\nthe synced data of the chart from the webworker. If the\nchart is re-attached in the meantime the deletion will\nbe canceled to avoid a re-sync",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 493,
                  "column": 6
                },
                "end": {
                  "line": 496,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "1500"
            },
            {
              "name": "_wwSyncDataPropName",
              "type": "string",
              "description": "Name of the property to be kept in sync. Usually chartData but can\nbe overriden for a filtered dataset instead for example",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 501,
                  "column": 6
                },
                "end": {
                  "line": 504,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"chartData\""
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 506,
                  "column": 4
                },
                "end": {
                  "line": 508,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 509,
                  "column": 4
                },
                "end": {
                  "line": 520,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 521,
                  "column": 4
                },
                "end": {
                  "line": 546,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_keepDataInSync",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 547,
                  "column": 4
                },
                "end": {
                  "line": 560,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 477,
              "column": 0
            },
            "end": {
              "line": 561,
              "column": 135
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.webWorkerSynchronization",
          "attributes": [
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "prevent-web-worker-synchronization",
              "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3028,
                  "column": 6
                },
                "end": {
                  "line": 3031,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
            },
            {
              "name": "ww-data-sync-counter",
              "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3052,
                  "column": 4
                },
                "end": {
                  "line": 3055,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.saveImage\n\n    Description:\n    Polymer behavior that allows the chart to return an image of itself based on\n    its canvas and/or SVG\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "methods": [
            {
              "name": "getImage",
              "description": "Takes a graphic \"snapshot\" of the component and pass results through a callback:\n- a canvas containing the graphical snapshot\n- a png base 64 data uri\n\ncallback object:\n{\n canvas: theCanvasObject\n image: \"data:image/png;base64;iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN...\"\n}\n\nthe data uri can be used to save the image and the canvas object to do\nfurther processing, such as combining different elements snapshot into one image",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 589,
                  "column": 4
                },
                "end": {
                  "line": 660,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                },
                {
                  "name": "renderLegend"
                }
              ]
            },
            {
              "name": "_finishGetImage",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 661,
                  "column": 4
                },
                "end": {
                  "line": 666,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                },
                {
                  "name": "canvas"
                },
                {
                  "name": "renderLegend"
                },
                {
                  "name": "drawingWidth"
                },
                {
                  "name": "drawingHeight"
                }
              ]
            },
            {
              "name": "_getRegisterWidth",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 667,
                  "column": 4
                },
                "end": {
                  "line": 701,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "drawingWidth"
                },
                {
                  "name": "drawingHeight"
                }
              ]
            },
            {
              "name": "_drawRegister",
              "description": "Draws a fake representation of the registers",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 705,
                  "column": 4
                },
                "end": {
                  "line": 733,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "context"
                },
                {
                  "name": "startWidth"
                },
                {
                  "name": "drawingHeight"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 573,
              "column": 0
            },
            "end": {
              "line": 734,
              "column": 39
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.saveImage",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.chartAutoResize\n\n    Description:\n    Polymer behavior that provides auto resize options for charts\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "_parentResizable",
              "type": "Object",
              "description": "The closest ancestor element that implements `IronResizableBehavior`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 39,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_parentResizableChanged\""
                }
              },
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_notifyingDescendant",
              "type": "boolean",
              "description": "True if this element is currently notifying its descendant elements of\nresize.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 45,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "preventResize",
              "type": "boolean",
              "description": "Prevents the chart from automatically resizing to fit its container",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 753,
                  "column": 6
                },
                "end": {
                  "line": 757,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_preventResizeChanged\""
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "chartHorizontalAlignment",
              "type": "string",
              "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 767,
                  "column": 6
                },
                "end": {
                  "line": 770,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"center\""
            },
            {
              "name": "chartVerticalAlignment",
              "type": "string",
              "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 780,
                  "column": 6
                },
                "end": {
                  "line": 783,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"center\""
            },
            {
              "name": "_chartWrapperClass",
              "type": "string",
              "description": "Class to be used on the external wrapper within the chart",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 787,
                  "column": 6
                },
                "end": {
                  "line": 790,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "debounceResizeTiming",
              "type": "number",
              "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 795,
                  "column": 6
                },
                "end": {
                  "line": 798,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "250"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "created",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 60,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 64,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 74,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "notifyResize",
              "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 92,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "assignParentResizable",
              "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 98,
                  "column": 4
                },
                "end": {
                  "line": 100,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "parentResizable"
                }
              ],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "stopResizeNotificationsFor",
              "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 106,
                  "column": 4
                },
                "end": {
                  "line": 113,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "resizerShouldNotify",
              "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 124,
                  "column": 4
                },
                "end": {
                  "line": 124,
                  "column": 59
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "element",
                  "type": "HTMLElement",
                  "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the `element` should be notified of resize."
              },
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_onDescendantIronResize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 126,
                  "column": 4
                },
                "end": {
                  "line": 138,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_fireResize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 140,
                  "column": 4
                },
                "end": {
                  "line": 145,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_onIronRequestResizeNotifications",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 147,
                  "column": 4
                },
                "end": {
                  "line": 162,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_parentResizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 164,
                  "column": 4
                },
                "end": {
                  "line": 168,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "parentResizable"
                }
              ],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_notifyDescendant",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 170,
                  "column": 4
                },
                "end": {
                  "line": 181,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "descendant"
                }
              ],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_requestResizeNotifications",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
                "start": {
                  "line": 183,
                  "column": 4
                },
                "end": {
                  "line": 211,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.IronResizableBehavior"
            },
            {
              "name": "_preventResizeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 801,
                  "column": 4
                },
                "end": {
                  "line": 809,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_secondaryToolbarToggled",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 810,
                  "column": 4
                },
                "end": {
                  "line": 818,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_getChartWrapperClass",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 819,
                  "column": 4
                },
                "end": {
                  "line": 843,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hor"
                },
                {
                  "name": "vert"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 748,
              "column": 0
            },
            "end": {
              "line": 844,
              "column": 63
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.chartAutoResize",
          "attributes": [
            {
              "name": "prevent-resize",
              "description": "Prevents the chart from automatically resizing to fit its container",
              "sourceRange": {
                "start": {
                  "line": 753,
                  "column": 6
                },
                "end": {
                  "line": 757,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "chart-horizontal-alignment",
              "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
              "sourceRange": {
                "start": {
                  "line": 767,
                  "column": 6
                },
                "end": {
                  "line": 770,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "chart-vertical-alignment",
              "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
              "sourceRange": {
                "start": {
                  "line": 780,
                  "column": 6
                },
                "end": {
                  "line": 783,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "debounce-resize-timing",
              "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
              "sourceRange": {
                "start": {
                  "line": 795,
                  "column": 6
                },
                "end": {
                  "line": 798,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.subConfiguration\n\n    Description:\n    Polymer behavior that provides subConfiguration for elements such as axes, register, etc.\n\n    Dependencies:\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [],
          "methods": [
            {
              "name": "_applyConfigToElement",
              "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 865,
                  "column": 4
                },
                "end": {
                  "line": 883,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "config"
                },
                {
                  "name": "element"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 857,
              "column": 0
            },
            "end": {
              "line": 884,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.subConfiguration",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.timeFiltering\n\n    Description:\n    Polymer behavior that allows to filter chartData based on time, providing a _filteredData object\n\n    Dependencies:\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "timeDomain",
              "type": "Object",
              "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3199,
                  "column": 4
                },
                "end": {
                  "line": 3204,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.timeDomain"
            },
            {
              "name": "timeData",
              "type": "string",
              "description": "Name of the variable holding the time stamp in the data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 902,
                  "column": 4
                },
                "end": {
                  "line": 905,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"Timestamp\""
            },
            {
              "name": "_filteredData",
              "type": "Object",
              "description": "Data that has been time filtered",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 909,
                  "column": 4
                },
                "end": {
                  "line": 912,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_filterData",
              "description": "returns a filtered dataset based on the time domain",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 918,
                  "column": 2
                },
                "end": {
                  "line": 940,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chartData"
                },
                {
                  "name": "timeDomain"
                },
                {
                  "name": "timeData"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 897,
              "column": 0
            },
            "end": {
              "line": 941,
              "column": 81
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.timeFiltering",
          "attributes": [
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "time-domain",
              "description": "Can be used to define a time domain to be used, typically to restrain/filter the amount\nof data displayed. Can be used in combination with a px-vis-chart-navigator",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3199,
                  "column": 4
                },
                "end": {
                  "line": 3204,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.timeDomain"
            },
            {
              "name": "time-data",
              "description": "Name of the variable holding the time stamp in the data",
              "sourceRange": {
                "start": {
                  "line": 902,
                  "column": 4
                },
                "end": {
                  "line": 905,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.waitForAttach\n\n    Description:\n    Polymer behavior that provides the the ability for the chart to delay running until attached.\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "_loadedOnPage",
              "type": "boolean",
              "description": "Boolean holding loading until the chart is actually attached",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 960,
                  "column": 6
                },
                "end": {
                  "line": 962,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 965,
                  "column": 4
                },
                "end": {
                  "line": 967,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_isLoadedOnPage",
              "description": "checks if the chart is attached, otherwise waits and recalls",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 972,
                  "column": 4
                },
                "end": {
                  "line": 979,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 955,
              "column": 0
            },
            "end": {
              "line": 981,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.waitForAttach",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.getHideClass\n\n    Description:\n    Behavior allowing a chart to get the class to hide a register\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getHideClass",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 996,
                  "column": 2
                },
                "end": {
                  "line": 1004,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hide"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 995,
              "column": 0
            },
            "end": {
              "line": 1005,
              "column": 32
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.getHideClass",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.registerPositioning\n\n    Description:\n    Behavior allowing a chart to position its registers\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "hideRegister",
              "type": "boolean",
              "description": "Allows to hide the register",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1025,
                  "column": 4
                },
                "end": {
                  "line": 1029,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_hideRegisterChanged\""
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "_registerType",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1030,
                  "column": 4
                },
                "end": {
                  "line": 1032,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_registerWrapperClass",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1033,
                  "column": 4
                },
                "end": {
                  "line": 1036,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getHideClass",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 996,
                  "column": 2
                },
                "end": {
                  "line": 1004,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hide"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.getHideClass"
            },
            {
              "name": "_getRegisterWrapperClass",
              "description": "determine the flex class on the wrapper depending on where the register is",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1041,
                  "column": 2
                },
                "end": {
                  "line": 1058,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_hideRegisterChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1059,
                  "column": 2
                },
                "end": {
                  "line": 1065,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1019,
              "column": 0
            },
            "end": {
              "line": 1066,
              "column": 65
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.registerPositioning",
          "attributes": [
            {
              "name": "hide-register",
              "description": "Allows to hide the register",
              "sourceRange": {
                "start": {
                  "line": 1025,
                  "column": 4
                },
                "end": {
                  "line": 1029,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.registerConfigs\n\n    Description:\n    Behavior allowing providing component config declarations\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "tooltipConfig",
              "type": "Object",
              "description": "Configuration object used to customize the tooltip cosmetic properties.\nPlease refer to px-vis-tooltip and px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- width\n- height\n- tooltipStyle\n- forceDateTimeDisplay",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1091,
                  "column": 4
                },
                "end": {
                  "line": 1093,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "registerConfig",
              "type": "Object",
              "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1099,
                  "column": 4
                },
                "end": {
                  "line": 1101,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1080,
              "column": 0
            },
            "end": {
              "line": 1103,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.registerConfigs",
          "attributes": [
            {
              "name": "tooltip-config",
              "description": "Configuration object used to customize the tooltip cosmetic properties.\nPlease refer to px-vis-tooltip and px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- width\n- height\n- tooltipStyle\n- forceDateTimeDisplay",
              "sourceRange": {
                "start": {
                  "line": 1091,
                  "column": 4
                },
                "end": {
                  "line": 1093,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "register-config",
              "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 1099,
                  "column": 4
                },
                "end": {
                  "line": 1101,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.interactionSpaceConfig\n\n    Description:\n    Behavior providing configuration for a interaction space for a chart\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "interactionSpaceConfig",
              "type": "Object",
              "description": "Configuration object used to customize the interaction space\nPlease refer to px-vis-interation space (https://github.com/PredixDev/px-vis) for a list of supported properties.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1123,
                  "column": 4
                },
                "end": {
                  "line": 1126,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1117,
              "column": 0
            },
            "end": {
              "line": 1128,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.interactionSpaceConfig",
          "attributes": [
            {
              "name": "interaction-space-config",
              "description": "Configuration object used to customize the interaction space\nPlease refer to px-vis-interation space (https://github.com/PredixDev/px-vis) for a list of supported properties.",
              "sourceRange": {
                "start": {
                  "line": 1123,
                  "column": 4
                },
                "end": {
                  "line": 1126,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.chartToolbarConfig\n\n    Description:\n    Behavior providing configuration for a toolbar for a chart\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "interactionSpaceConfig",
              "type": "Object",
              "description": "Configuration object used to customize the interaction space\nPlease refer to px-vis-interation space (https://github.com/PredixDev/px-vis) for a list of supported properties.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1123,
                  "column": 4
                },
                "end": {
                  "line": 1126,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorChart.interactionSpaceConfig"
            },
            {
              "name": "toolbarConfig",
              "type": "Object",
              "description": "Configuration object used to customize the toolbar\nPlease refer to px-vis-toolbar (https://github.com/PredixDev/px-vis) for a list of supported properties.\nMost interesting properties include:\n- config (complex object for customizing the toolbar)\n- horizontalAlignment\n- subToolbarAlignment",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1152,
                  "column": 4
                },
                "end": {
                  "line": 1154,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1142,
              "column": 0
            },
            "end": {
              "line": 1156,
              "column": 46
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.chartToolbarConfig",
          "attributes": [
            {
              "name": "interaction-space-config",
              "description": "Configuration object used to customize the interaction space\nPlease refer to px-vis-interation space (https://github.com/PredixDev/px-vis) for a list of supported properties.",
              "sourceRange": {
                "start": {
                  "line": 1123,
                  "column": 4
                },
                "end": {
                  "line": 1126,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorChart.interactionSpaceConfig"
            },
            {
              "name": "toolbar-config",
              "description": "Configuration object used to customize the toolbar\nPlease refer to px-vis-toolbar (https://github.com/PredixDev/px-vis) for a list of supported properties.\nMost interesting properties include:\n- config (complex object for customizing the toolbar)\n- horizontalAlignment\n- subToolbarAlignment",
              "sourceRange": {
                "start": {
                  "line": 1152,
                  "column": 4
                },
                "end": {
                  "line": 1154,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.axisConfigs\n\n    Description:\n    Behavior allowing providing component config declarations\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "xAxisConfig",
              "type": "Object",
              "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1177,
                  "column": 4
                },
                "end": {
                  "line": 1179,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "yAxisConfig",
              "type": "Object",
              "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1185,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1170,
              "column": 0
            },
            "end": {
              "line": 1189,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.axisConfigs",
          "attributes": [
            {
              "name": "x-axis-config",
              "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 1177,
                  "column": 4
                },
                "end": {
                  "line": 1179,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "y-axis-config",
              "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 1185,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.navigatorConfig\n\n    Description:\n    Behavior allowing providing component config declarations\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "navigatorConfig",
              "type": "Object",
              "description": "Configuration object used to customize the navigator cosmetic properties.\n\nThis can be a collection of other configureation properties, such as axisConfig",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1211,
                  "column": 4
                },
                "end": {
                  "line": 1213,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1203,
              "column": 0
            },
            "end": {
              "line": 1215,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.navigatorConfig",
          "attributes": [
            {
              "name": "navigator-config",
              "description": "Configuration object used to customize the navigator cosmetic properties.\n\nThis can be a collection of other configureation properties, such as axisConfig",
              "sourceRange": {
                "start": {
                  "line": 1211,
                  "column": 4
                },
                "end": {
                  "line": 1213,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.highlighterConfigs\n\n    Description:\n    Behavior allowing providing component config declarations\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "highlighterConfig",
              "type": "Object",
              "description": "Configuration object used to customize the highlighter properties.\nPlease refer to px-vis-point-highlighter and px-vis-line-highlighter (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- `fuzz` : +/- search window around the datapoint value\n- 'differenDataset' : if this chart has a different dataset from the crosshair data origin chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1238,
                  "column": 4
                },
                "end": {
                  "line": 1240,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1229,
              "column": 0
            },
            "end": {
              "line": 1242,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.highlighterConfigs",
          "attributes": [
            {
              "name": "highlighter-config",
              "description": "Configuration object used to customize the highlighter properties.\nPlease refer to px-vis-point-highlighter and px-vis-line-highlighter (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- `fuzz` : +/- search window around the datapoint value\n- 'differenDataset' : if this chart has a different dataset from the crosshair data origin chart",
              "sourceRange": {
                "start": {
                  "line": 1238,
                  "column": 4
                },
                "end": {
                  "line": 1240,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.mouseCusorConfig\n\n    Description:\n    Behavior allowing providing component config declarations\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "mouseCursorConfig",
              "type": "Object",
              "description": "Configuration object used to customize the mouse cursor properties.\nPlease refer to px-vis-mouseCursor (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1262,
                  "column": 4
                },
                "end": {
                  "line": 1264,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1256,
              "column": 0
            },
            "end": {
              "line": 1266,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.mouseCusorConfig",
          "attributes": [
            {
              "name": "mouse-cursor-config",
              "description": "Configuration object used to customize the mouse cursor properties.\nPlease refer to px-vis-mouseCursor (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 1262,
                  "column": 4
                },
                "end": {
                  "line": 1264,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.circleChart\n\n    Description:\n    Behavior providing attributes helping to position a circle based chart such as polar or pie.\n    for exmaple provides the center, radius... based on size and margin\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "_smallerSide",
              "type": "number",
              "description": "Min between width and height",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1286,
                  "column": 5
                },
                "end": {
                  "line": 1289,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_diameter",
              "type": "number",
              "description": "diameter of the chart drawing, adjusted with margins",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1293,
                  "column": 6
                },
                "end": {
                  "line": 1295,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_radius",
              "type": "number",
              "description": "radius of the chart drawing, adjusted with margins",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1299,
                  "column": 6
                },
                "end": {
                  "line": 1301,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_center",
              "type": "Array",
              "description": "center of the chart, based on radius and margins",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1305,
                  "column": 6
                },
                "end": {
                  "line": 1307,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_internalCircleMargins",
              "type": "Object",
              "description": "internal margins we can use in addition to \"margin\",\nused to offset chart labels for example",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1312,
                  "column": 6
                },
                "end": {
                  "line": 1317,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_computeSmallerSide",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1322,
                  "column": 2
                },
                "end": {
                  "line": 1328,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ]
            },
            {
              "name": "_sizeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1329,
                  "column": 2
                },
                "end": {
                  "line": 1377,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "_smallerSide"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "internalMargin"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1281,
              "column": 0
            },
            "end": {
              "line": 1378,
              "column": 54
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.circleChart",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.cursorConfig\n\n    Description:\n    Behavior providing the cursorConfig property\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "cursorConfig",
              "type": "Object",
              "description": "Configuration object used to customize the cursor properties.\nPlease refer to px-vis-cursor (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1395,
                  "column": 4
                },
                "end": {
                  "line": 1397,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1388,
              "column": 0
            },
            "end": {
              "line": 1399,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.cursorConfig",
          "attributes": [
            {
              "name": "cursor-config",
              "description": "Configuration object used to customize the cursor properties.\nPlease refer to px-vis-cursor (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 1395,
                  "column": 4
                },
                "end": {
                  "line": 1397,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.layers\n\n    Description:\n    Behavior providing the layers property and layer generation\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "svg",
              "type": "Object",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_uniqueIdsUsed",
              "type": "Array",
              "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2208,
                  "column": 5
                },
                "end": {
                  "line": 2213,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "pxSvgElem",
              "type": "Object",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "layer",
              "type": "Array",
              "description": "Array of the svg layers",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1415,
                  "column": 4
                },
                "end": {
                  "line": 1418,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "numberOfLayers",
              "type": "number",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1419,
                  "column": 4
                },
                "end": {
                  "line": 1421,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "generateLayers",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1422,
                  "column": 4
                },
                "end": {
                  "line": 1425,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "true"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2215,
                  "column": 2
                },
                "end": {
                  "line": 2222,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "generateRandomID",
              "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 52,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseStr"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "cloneSVGElem",
              "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 82,
                  "column": 2
                },
                "end": {
                  "line": 94,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                },
                {
                  "name": "prop"
                },
                {
                  "name": "onBottom"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawSVGOnCanvas",
              "description": "Draws the current svg into a canvas",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 99,
                  "column": 2
                },
                "end": {
                  "line": 157,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "elem"
                },
                {
                  "name": "callback"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawCanvg",
              "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 162,
                  "column": 2
                },
                "end": {
                  "line": 170,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_nativeDrawSvgOnCanvas",
              "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 175,
                  "column": 2
                },
                "end": {
                  "line": 205,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "sucessCallback"
                },
                {
                  "name": "failureCallback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_getSVGOuterHtml",
              "description": "fix for IE to get outer HTML",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 209,
                  "column": 2
                },
                "end": {
                  "line": 256,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_createLayers",
              "description": "Creates <g> layers",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1435,
                  "column": 2
                },
                "end": {
                  "line": 1458,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                },
                {
                  "name": "numberOfLayers"
                },
                {
                  "name": "propName"
                }
              ]
            },
            {
              "name": "_createLayersOnce",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1459,
                  "column": 2
                },
                "end": {
                  "line": 1473,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                },
                {
                  "name": "numberOfLayers"
                },
                {
                  "name": "generateLayers"
                },
                {
                  "name": "propName"
                }
              ]
            },
            {
              "name": "_initMousePiercing",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1474,
                  "column": 2
                },
                "end": {
                  "line": 1488,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_createPiercingEventHandler",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1489,
                  "column": 2
                },
                "end": {
                  "line": 1530,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "eventName"
                },
                {
                  "name": "context"
                },
                {
                  "name": "topLayer"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1409,
              "column": 0
            },
            "end": {
              "line": 1531,
              "column": 82
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.layers",
          "attributes": [
            {
              "name": "svg",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "px-svg-elem",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "layer",
              "description": "Array of the svg layers",
              "sourceRange": {
                "start": {
                  "line": 1415,
                  "column": 4
                },
                "end": {
                  "line": 1418,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "number-of-layers",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 1419,
                  "column": 4
                },
                "end": {
                  "line": 1421,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "generate-layers",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 1422,
                  "column": 4
                },
                "end": {
                  "line": 1425,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "svg-changed",
              "description": "Fired when the `svg` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "type": "CustomEvent",
              "name": "px-svg-elem-changed",
              "description": "Fired when the `pxSvgElem` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "type": "CustomEvent",
              "name": "layer-changed",
              "description": "Fired when the `layer` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.mutedAxes\n\n    Description:\n    Behavior providing property for muting axes\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "mutedAxes",
              "type": "Object",
              "description": "An object to hold which axes should be muted.\n\n*When adding keys to this, be sure to use Polymer set methods or notifyPath*\n\n```\n   {\n       \"Axes_to_skip_1\":true,\n       \"Axes_to_skip_2\":true\n   }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1555,
                  "column": 6
                },
                "end": {
                  "line": 1559,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1541,
              "column": 0
            },
            "end": {
              "line": 1561,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.mutedAxes",
          "attributes": [
            {
              "name": "muted-axes",
              "description": "An object to hold which axes should be muted.\n\n*When adding keys to this, be sure to use Polymer set methods or notifyPath*\n\n```\n   {\n       \"Axes_to_skip_1\":true,\n       \"Axes_to_skip_2\":true\n   }\n```",
              "sourceRange": {
                "start": {
                  "line": 1555,
                  "column": 6
                },
                "end": {
                  "line": 1559,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "muted-axes-changed",
              "description": "Fired when the `mutedAxes` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.extentsDataRouter\n\n    Description:\n    Behavior providing the extentsDataRouter\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "extentsData",
              "type": "Object",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extentsAction",
              "type": "string",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "_extentsDataRoutes",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1574,
                  "column": 4
                },
                "end": {
                  "line": 1582,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_extentsDataRouter",
              "description": "FIXME import extentsAction",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1589,
                  "column": 2
                },
                "end": {
                  "line": 1609,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1572,
              "column": 0
            },
            "end": {
              "line": 1610,
              "column": 59
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.extentsDataRouter",
          "attributes": [
            {
              "name": "extents-data",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extents-action",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.extentsData"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "extents-data-changed",
              "description": "Fired when the `extentsData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "type": "CustomEvent",
              "name": "extents-action-changed",
              "description": "Fired when the `extentsAction` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.zoomGeneric\n\n    Description:\n    Behavior providing some generic properties for zooming\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "extentsData",
              "type": "Object",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extentsAction",
              "type": "string",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "_extentsDataRoutes",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1574,
                  "column": 4
                },
                "end": {
                  "line": 1582,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "zoomStack",
              "type": "Array",
              "description": "Stack of previous zooms",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1625,
                  "column": 4
                },
                "end": {
                  "line": 1630,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "zoomInPercentage",
              "type": "number",
              "description": "Percentage used to calculate new extents when using zoomIn feature.\nThe higher the number the more it will zoom in. should be less than 1.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1635,
                  "column": 4
                },
                "end": {
                  "line": 1638,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0.5"
            },
            {
              "name": "zoomOutPercentage",
              "type": "number",
              "description": "Percentage used to calculate new extents when using zoomOut feature.\nThe higher the number the more it will zoom out. should be less than 1.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1643,
                  "column": 4
                },
                "end": {
                  "line": 1646,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0.5"
            },
            {
              "name": "_isPanning",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1648,
                  "column": 4
                },
                "end": {
                  "line": 1651,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_extentsDataRouter",
              "description": "FIXME import extentsAction",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1589,
                  "column": 2
                },
                "end": {
                  "line": 1609,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "zoomIn",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1653,
                  "column": 2
                },
                "end": {
                  "line": 1656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "zoomOut",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1657,
                  "column": 2
                },
                "end": {
                  "line": 1660,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_intSpaceStartPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1661,
                  "column": 2
                },
                "end": {
                  "line": 1663,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_intSpaceStopPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1664,
                  "column": 2
                },
                "end": {
                  "line": 1666,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1620,
              "column": 0
            },
            "end": {
              "line": 1668,
              "column": 68
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.zoomGeneric",
          "attributes": [
            {
              "name": "extents-data",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extents-action",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "zoom-stack",
              "description": "Stack of previous zooms",
              "sourceRange": {
                "start": {
                  "line": 1625,
                  "column": 4
                },
                "end": {
                  "line": 1630,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "zoom-in-percentage",
              "description": "Percentage used to calculate new extents when using zoomIn feature.\nThe higher the number the more it will zoom in. should be less than 1.",
              "sourceRange": {
                "start": {
                  "line": 1635,
                  "column": 4
                },
                "end": {
                  "line": 1638,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "zoom-out-percentage",
              "description": "Percentage used to calculate new extents when using zoomOut feature.\nThe higher the number the more it will zoom out. should be less than 1.",
              "sourceRange": {
                "start": {
                  "line": 1643,
                  "column": 4
                },
                "end": {
                  "line": 1646,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "extents-data-changed",
              "description": "Fired when the `extentsData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "type": "CustomEvent",
              "name": "extents-action-changed",
              "description": "Fired when the `extentsAction` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.zooming\n\n    Description:\n    Behavior providing properties and logic for chart zooming\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "extentsData",
              "type": "Object",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extentsAction",
              "type": "string",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "selectedDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "xAxisType",
              "type": "string",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "yAxisType",
              "type": "string",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "selectionType",
              "type": "string",
              "description": "The shape of selection (zoom) the user can do. Can be:\n- 'xy': user can draw a rectangle freely\n- 'xAxis': user can select a range within the X axis, the Y axis always\n  being entirely selected\n- 'yAxis': user can select a range within the Y axis, the X axis always\n  being entirely selected",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1101,
                  "column": 4
                },
                "end": {
                  "line": 1104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"xy\"",
              "inheritedFrom": "PxVisBehavior.zoomSelection"
            },
            {
              "name": "_extentsDataRoutes",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1574,
                  "column": 4
                },
                "end": {
                  "line": 1582,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "zoomStack",
              "type": "Array",
              "description": "Stack of previous zooms",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1625,
                  "column": 4
                },
                "end": {
                  "line": 1630,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoomInPercentage",
              "type": "number",
              "description": "Percentage used to calculate new extents when using zoomIn feature.\nThe higher the number the more it will zoom in. should be less than 1.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1635,
                  "column": 4
                },
                "end": {
                  "line": 1638,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0.5",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoomOutPercentage",
              "type": "number",
              "description": "Percentage used to calculate new extents when using zoomOut feature.\nThe higher the number the more it will zoom out. should be less than 1.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1643,
                  "column": 4
                },
                "end": {
                  "line": 1646,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0.5",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_isPanning",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1648,
                  "column": 4
                },
                "end": {
                  "line": 1651,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_originalOrdinalExtents",
              "type": "Array",
              "description": "Original extents before zooming if one of the axis is ordinal",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1702,
                  "column": 4
                },
                "end": {
                  "line": 1704,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_extentsDataRouter",
              "description": "FIXME import extentsAction",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1589,
                  "column": 2
                },
                "end": {
                  "line": 1609,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "zoomIn",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1653,
                  "column": 2
                },
                "end": {
                  "line": 1656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoomOut",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1657,
                  "column": 2
                },
                "end": {
                  "line": 1660,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_intSpaceStartPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1661,
                  "column": 2
                },
                "end": {
                  "line": 1663,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_intSpaceStopPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1664,
                  "column": 2
                },
                "end": {
                  "line": 1666,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "undoZoom",
              "description": "Restore zoom to its previous value, do nothing if no previous value",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1719,
                  "column": 2
                },
                "end": {
                  "line": 1730,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_saveZoomState",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1731,
                  "column": 2
                },
                "end": {
                  "line": 1744,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_saveOrdinalOriginalExtents",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1745,
                  "column": 2
                },
                "end": {
                  "line": 1756,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_autoZoom",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1757,
                  "column": 2
                },
                "end": {
                  "line": 1817,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isZoomIn"
                }
              ]
            },
            {
              "name": "_calcNewOrdinalExtents",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1818,
                  "column": 2
                },
                "end": {
                  "line": 1824,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentDomain"
                },
                {
                  "name": "originalDomain"
                },
                {
                  "name": "isZoomIn"
                }
              ]
            },
            {
              "name": "_calcNewZoomedInOrdinal",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1825,
                  "column": 2
                },
                "end": {
                  "line": 1836,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentDomain"
                }
              ]
            },
            {
              "name": "_calcNewZoomedOutOrdinal",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1837,
                  "column": 2
                },
                "end": {
                  "line": 1870,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentDomain"
                },
                {
                  "name": "originalDomain"
                }
              ]
            },
            {
              "name": "_calcNewLinearExtents",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1871,
                  "column": 2
                },
                "end": {
                  "line": 1881,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "min"
                },
                {
                  "name": "max"
                },
                {
                  "name": "isZoomIn"
                }
              ]
            },
            {
              "name": "_convertValue",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1882,
                  "column": 2
                },
                "end": {
                  "line": 1888,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "axisType"
                },
                {
                  "name": "convertFrom"
                }
              ]
            },
            {
              "name": "_zoomOrPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1890,
                  "column": 2
                },
                "end": {
                  "line": 1894,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "zoom",
              "description": "Sets the selectedDomain to the drawn zoom and shows the button",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1899,
                  "column": 2
                },
                "end": {
                  "line": 1902,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "pan",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1904,
                  "column": 2
                },
                "end": {
                  "line": 1906,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "resetZoom",
              "description": "resets the extents",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1912,
                  "column": 2
                },
                "end": {
                  "line": 1925,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_notifyZoomed",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1926,
                  "column": 2
                },
                "end": {
                  "line": 1931,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isReset"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1678,
              "column": 0
            },
            "end": {
              "line": 1932,
              "column": 170
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.zooming",
          "attributes": [
            {
              "name": "extents-data",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extents-action",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "selected-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "x-axis-type",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "y-axis-type",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "selection-type",
              "description": "The shape of selection (zoom) the user can do. Can be:\n- 'xy': user can draw a rectangle freely\n- 'xAxis': user can select a range within the X axis, the Y axis always\n  being entirely selected\n- 'yAxis': user can select a range within the Y axis, the X axis always\n  being entirely selected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1101,
                  "column": 4
                },
                "end": {
                  "line": 1104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.zoomSelection"
            },
            {
              "name": "zoom-stack",
              "description": "Stack of previous zooms",
              "sourceRange": {
                "start": {
                  "line": 1625,
                  "column": 4
                },
                "end": {
                  "line": 1630,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoom-in-percentage",
              "description": "Percentage used to calculate new extents when using zoomIn feature.\nThe higher the number the more it will zoom in. should be less than 1.",
              "sourceRange": {
                "start": {
                  "line": 1635,
                  "column": 4
                },
                "end": {
                  "line": 1638,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoom-out-percentage",
              "description": "Percentage used to calculate new extents when using zoomOut feature.\nThe higher the number the more it will zoom out. should be less than 1.",
              "sourceRange": {
                "start": {
                  "line": 1643,
                  "column": 4
                },
                "end": {
                  "line": 1646,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "extents-data-changed",
              "description": "Fired when the `extentsData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "type": "CustomEvent",
              "name": "extents-action-changed",
              "description": "Fired when the `extentsAction` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "type": "CustomEvent",
              "name": "selected-domain-changed",
              "description": "Fired when the `selectedDomain` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "px-vis-zoomed",
              "description": "px-vis-zoomed",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.actionRequest\n\n    Description:\n    Behavior providing properties and logic running a function or firing an event within\n    the context of the chart\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [],
          "methods": [
            {
              "name": "_actionRequest",
              "description": "Runs a custom function within the context of the chart",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1954,
                  "column": 2
                },
                "end": {
                  "line": 1965,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            },
            {
              "name": "_eventRequest",
              "description": "Fires a custom event within the context of the chart",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1969,
                  "column": 2
                },
                "end": {
                  "line": 1975,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1944,
              "column": 0
            },
            "end": {
              "line": 1976,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.actionRequest",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.toolbarSubConfig\n\n    Description:\n    Behavior providing properties for the toolbar subconfig\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "toolbarSubConfig",
              "type": "Object",
              "description": "toolbarSubConfig can be passed around from a toolbar to another so that clicking\non a \"global\" toolbar drives the sub row state for other toolbars",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1993,
                  "column": 4
                },
                "end": {
                  "line": 1995,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 1986,
              "column": 0
            },
            "end": {
              "line": 1997,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.toolbarSubConfig",
          "attributes": [
            {
              "name": "toolbar-sub-config",
              "description": "toolbarSubConfig can be passed around from a toolbar to another so that clicking\non a \"global\" toolbar drives the sub row state for other toolbars",
              "sourceRange": {
                "start": {
                  "line": 1993,
                  "column": 4
                },
                "end": {
                  "line": 1995,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.noDebounceOnPanning\n\n    Description:\n    Behavior removing debouynce on line drawing when panning\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "_oldLinesDrawDebounceTime",
              "type": "number",
              "description": "holds the previous drawing debounce timing (before panning)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2013,
                  "column": 4
                },
                "end": {
                  "line": 2015,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_oldScatterDrawDebounceTime",
              "type": "number",
              "description": "holds the previous drawing debounce timing (before panning)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2019,
                  "column": 4
                },
                "end": {
                  "line": 2021,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_oldThresholdDrawDebounceTime",
              "type": "number",
              "description": "holds the previous drawing debounce timing (before panning)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2025,
                  "column": 4
                },
                "end": {
                  "line": 2027,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_startPanning",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2033,
                  "column": 2
                },
                "end": {
                  "line": 2058,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_stopPanning",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2059,
                  "column": 2
                },
                "end": {
                  "line": 2080,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2007,
              "column": 0
            },
            "end": {
              "line": 2081,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.noDebounceOnPanning",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.showTooltip\n\n    Description:\n    Behavior allowing to have an internal and external properties driving tooltip\n    visibility\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "showTooltip",
              "type": "boolean",
              "description": "Whether to display the tooltip",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2098,
                  "column": 4
                },
                "end": {
                  "line": 2101,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_internalShowTooltip",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2102,
                  "column": 4
                },
                "end": {
                  "line": 2105,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "true"
            },
            {
              "name": "_computedShowTooltip",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2106,
                  "column": 4
                },
                "end": {
                  "line": 2109,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_computeShowTooltip",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2111,
                  "column": 2
                },
                "end": {
                  "line": 2117,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "showTooltip"
                },
                {
                  "name": "_internalShowTooltip"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2092,
              "column": 0
            },
            "end": {
              "line": 2119,
              "column": 32
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.showTooltip",
          "attributes": [
            {
              "name": "show-tooltip",
              "description": "Whether to display the tooltip",
              "sourceRange": {
                "start": {
                  "line": 2098,
                  "column": 4
                },
                "end": {
                  "line": 2101,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.multiAxis\n\n    Description:\n    Provides propterty definitions and methods for multi axis charts\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesToAxes",
              "type": "Object",
              "description": "Object linking which series belong to which axis",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2184,
                  "column": 5
                },
                "end": {
                  "line": 2186,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.seriesToAxes"
            },
            {
              "name": "leftAxisSize",
              "type": "number",
              "description": "The size of an individual axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2140,
                  "column": 4
                },
                "end": {
                  "line": 2143,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "rightAxisSize",
              "type": "number",
              "description": "The size of an individual axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2149,
                  "column": 4
                },
                "end": {
                  "line": 2152,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "numLeftAxes",
              "type": "number",
              "description": "Number of axes on the left",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2158,
                  "column": 4
                },
                "end": {
                  "line": 2161,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "numRightAxes",
              "type": "number",
              "description": "Number of axes on the right",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2167,
                  "column": 4
                },
                "end": {
                  "line": 2170,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "_axisX",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2172,
                  "column": 4
                },
                "end": {
                  "line": 2175,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "_axisDomainChanged",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2177,
                  "column": 4
                },
                "end": {
                  "line": 2180,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "null"
            },
            {
              "name": "_multiAxisSeriesConfig",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2182,
                  "column": 4
                },
                "end": {
                  "line": 2185,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_addAxisToList",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2188,
                  "column": 2
                },
                "end": {
                  "line": 2215,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axisId"
                },
                {
                  "name": "axisNum"
                },
                {
                  "name": "thisSet"
                },
                {
                  "name": "otherSet"
                },
                {
                  "name": "dims"
                }
              ]
            },
            {
              "name": "_calcAxes",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2217,
                  "column": 2
                },
                "end": {
                  "line": 2267,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "completeSeriesConfig"
                }
              ]
            },
            {
              "name": "_calcMultiMargins",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2269,
                  "column": 2
                },
                "end": {
                  "line": 2280,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "margin"
                },
                {
                  "name": "leftAxisWidth"
                },
                {
                  "name": "rightAxisWidth"
                }
              ]
            },
            {
              "name": "_returnYScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2284,
                  "column": 2
                },
                "end": {
                  "line": 2296,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "seriesId"
                },
                {
                  "name": "config"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2133,
              "column": 0
            },
            "end": {
              "line": 2297,
              "column": 57
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.multiAxis",
          "attributes": [
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-to-axes",
              "description": "Object linking which series belong to which axis",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2184,
                  "column": 5
                },
                "end": {
                  "line": 2186,
                  "column": 6
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.seriesToAxes"
            },
            {
              "name": "left-axis-size",
              "description": "The size of an individual axis",
              "sourceRange": {
                "start": {
                  "line": 2140,
                  "column": 4
                },
                "end": {
                  "line": 2143,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "right-axis-size",
              "description": "The size of an individual axis",
              "sourceRange": {
                "start": {
                  "line": 2149,
                  "column": 4
                },
                "end": {
                  "line": 2152,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "num-left-axes",
              "description": "Number of axes on the left",
              "sourceRange": {
                "start": {
                  "line": 2158,
                  "column": 4
                },
                "end": {
                  "line": 2161,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "num-right-axes",
              "description": "Number of axes on the right",
              "sourceRange": {
                "start": {
                  "line": 2167,
                  "column": 4
                },
                "end": {
                  "line": 2170,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "left-axis-size-changed",
              "description": "Fired when the `leftAxisSize` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "right-axis-size-changed",
              "description": "Fired when the `rightAxisSize` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "num-left-axes-changed",
              "description": "Fired when the `numLeftAxes` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "num-right-axes-changed",
              "description": "Fired when the `numRightAxes` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.axisRegister\n\n    Description:\n    Behavior providing properties for dealing with an axis register (// coordinates and radar)\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedAxes",
              "type": "Object",
              "description": "An object to hold which axes should be muted.\n\n*When adding keys to this, be sure to use Polymer set methods or notifyPath*\n\n```\n   {\n       \"Axes_to_skip_1\":true,\n       \"Axes_to_skip_2\":true\n   }\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1555,
                  "column": 6
                },
                "end": {
                  "line": 1559,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorChart.mutedAxes"
            },
            {
              "name": "hideAxisRegister",
              "type": "boolean",
              "description": "Allows to hide the axis register",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2313,
                  "column": 4
                },
                "end": {
                  "line": 2316,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_axisRegisterConfig",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2317,
                  "column": 4
                },
                "end": {
                  "line": 2319,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_axisRegisterTooltipData",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2320,
                  "column": 4
                },
                "end": {
                  "line": 2322,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getHideClass",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 996,
                  "column": 2
                },
                "end": {
                  "line": 1004,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hide"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.getHideClass"
            },
            {
              "name": "_computedAxisRegisterConf",
              "description": "configures the register config and empty data series",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2330,
                  "column": 2
                },
                "end": {
                  "line": 2359,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axes"
                },
                {
                  "name": "completeSeriesConfig"
                }
              ]
            },
            {
              "name": "_ttDataHaveSameSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2361,
                  "column": 2
                },
                "end": {
                  "line": 2379,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data1"
                },
                {
                  "name": "data2"
                }
              ]
            },
            {
              "name": "_buildAxisTooltipData",
              "description": "Resuses existing register dataset for series names and adds or removes values",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2385,
                  "column": 2
                },
                "end": {
                  "line": 2408,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "values"
                },
                {
                  "name": "time"
                }
              ]
            },
            {
              "name": "_updateAxisConfig",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2409,
                  "column": 2
                },
                "end": {
                  "line": 2423,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "color"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2307,
              "column": 0
            },
            "end": {
              "line": 2424,
              "column": 157
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.axisRegister",
          "attributes": [
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-axes",
              "description": "An object to hold which axes should be muted.\n\n*When adding keys to this, be sure to use Polymer set methods or notifyPath*\n\n```\n   {\n       \"Axes_to_skip_1\":true,\n       \"Axes_to_skip_2\":true\n   }\n```",
              "sourceRange": {
                "start": {
                  "line": 1555,
                  "column": 6
                },
                "end": {
                  "line": 1559,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorChart.mutedAxes"
            },
            {
              "name": "hide-axis-register",
              "description": "Allows to hide the axis register",
              "sourceRange": {
                "start": {
                  "line": 2313,
                  "column": 4
                },
                "end": {
                  "line": 2316,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-axes-changed",
              "description": "Fired when the `mutedAxes` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorChart.mutedAxes"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.categoryRegister\n\n    Description:\n    Behavior providing properties for dealing with a category register (// coordinates and radar)\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "categoryKey",
              "type": "string",
              "description": "A dev set string speciying which key to use as the category to use to color the series lines",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1639,
                  "column": 4
                },
                "end": {
                  "line": 1641,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.categories"
            },
            {
              "name": "categories",
              "type": "Array",
              "description": "A dev set array defining the categories values.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1646,
                  "column": 4
                },
                "end": {
                  "line": 1649,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.categories"
            },
            {
              "name": "hideCategoryRegister",
              "type": "boolean",
              "description": "Allows to hide the axis register",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2440,
                  "column": 4
                },
                "end": {
                  "line": 2443,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_hideCategoryRegister",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2444,
                  "column": 4
                },
                "end": {
                  "line": 2447,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "true"
            },
            {
              "name": "_categoryRegisterConfig",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2448,
                  "column": 4
                },
                "end": {
                  "line": 2450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_categoryRegisterTooltipData",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2451,
                  "column": 4
                },
                "end": {
                  "line": 2453,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getHideClass",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 996,
                  "column": 2
                },
                "end": {
                  "line": 1004,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hide"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.getHideClass"
            },
            {
              "name": "_computeCategoryRegisterConfig",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2460,
                  "column": 2
                },
                "end": {
                  "line": 2500,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeHideCategoryRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2501,
                  "column": 2
                },
                "end": {
                  "line": 2507,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2434,
              "column": 0
            },
            "end": {
              "line": 2508,
              "column": 127
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.categoryRegister",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "category-key",
              "description": "A dev set string speciying which key to use as the category to use to color the series lines",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1639,
                  "column": 4
                },
                "end": {
                  "line": 1641,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.categories"
            },
            {
              "name": "categories",
              "description": "A dev set array defining the categories values.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1646,
                  "column": 4
                },
                "end": {
                  "line": 1649,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.categories"
            },
            {
              "name": "hide-category-register",
              "description": "Allows to hide the axis register",
              "sourceRange": {
                "start": {
                  "line": 2440,
                  "column": 4
                },
                "end": {
                  "line": 2443,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.categoryAndAxisRegisterConfigs\n\n    Description:\n    Behavior providing properties for configuring category and axis register (// coordinates and radar)\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "axisRegisterConfig",
              "type": "Object",
              "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2526,
                  "column": 4
                },
                "end": {
                  "line": 2528,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "categoryRegisterConfig",
              "type": "Object",
              "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2534,
                  "column": 4
                },
                "end": {
                  "line": 2536,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_applyConfigToElement",
              "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 865,
                  "column": 4
                },
                "end": {
                  "line": 883,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "config"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
            },
            {
              "name": "_categoryRegisterConfigChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2542,
                  "column": 2
                },
                "end": {
                  "line": 2548,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "conf"
                }
              ]
            },
            {
              "name": "_axisRegisterConfigChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2549,
                  "column": 2
                },
                "end": {
                  "line": 2555,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "conf"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2518,
              "column": 0
            },
            "end": {
              "line": 2556,
              "column": 69
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.categoryAndAxisRegisterConfigs",
          "attributes": [
            {
              "name": "axis-register-config",
              "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 2526,
                  "column": 4
                },
                "end": {
                  "line": 2528,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "category-register-config",
              "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 2534,
                  "column": 4
                },
                "end": {
                  "line": 2536,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.sizeVerticalRegister\n\n    Description:\n    Behavior providing the ability to size the height of a vertical register\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_verticalRegisterHeight",
              "type": "number",
              "description": "the calculated height that should be used by the vertical register",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2573,
                  "column": 4
                },
                "end": {
                  "line": 2575,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_verticalRegisterHeightDeductions",
              "type": "Array",
              "description": "When calculating the register height if the height deductions to do\nhaven't been passed in (i.e height changed rather than ironResize being called)\nthen this list of string will be used to search for elements IDs and calculate\ntheir height, deducting them",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2582,
                  "column": 4
                },
                "end": {
                  "line": 2584,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_verticalRegisterDrawingCanvasId",
              "type": "string",
              "description": "ID of the element where the drawing happens. used to get its height property",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2588,
                  "column": 4
                },
                "end": {
                  "line": 2590,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2595,
                  "column": 2
                },
                "end": {
                  "line": 2597,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_heightChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2598,
                  "column": 2
                },
                "end": {
                  "line": 2604,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeVerticalRegisterHeight",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2605,
                  "column": 2
                },
                "end": {
                  "line": 2632,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "deductions"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2566,
              "column": 0
            },
            "end": {
              "line": 2633,
              "column": 56
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.sizeVerticalRegister",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.tooltipFollowMouseCalculation\n\n    Listen/unlisten mousemove on a target (based on _computedShowTooltip) and caculates mouse pos for it,\n    storing it in mousePosition\n\n    Description:\n    Behavior providing property for muting axes\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "showTooltip",
              "type": "boolean",
              "description": "Whether to display the tooltip",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2098,
                  "column": 4
                },
                "end": {
                  "line": 2101,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorChart.showTooltip"
            },
            {
              "name": "_internalShowTooltip",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2102,
                  "column": 4
                },
                "end": {
                  "line": 2105,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "true",
              "inheritedFrom": "PxVisBehaviorChart.showTooltip"
            },
            {
              "name": "_computedShowTooltip",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2106,
                  "column": 4
                },
                "end": {
                  "line": 2109,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorChart.showTooltip"
            },
            {
              "name": "_tooltipCalcMousePosHandler",
              "type": "Function",
              "description": "handler to the function for calculating tooltip pos",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2651,
                  "column": 6
                },
                "end": {
                  "line": 2653,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_tooltipCalcHoverTargetId",
              "type": "string",
              "description": "Id of the target of hovering",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2657,
                  "column": 6
                },
                "end": {
                  "line": 2659,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "mousePosition",
              "type": "Array",
              "description": "The mouse position in pixel coordinates. Only valid if _computedShowTooltip is true",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2663,
                  "column": 6
                },
                "end": {
                  "line": 2665,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_computeShowTooltip",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2111,
                  "column": 2
                },
                "end": {
                  "line": 2117,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "showTooltip"
                },
                {
                  "name": "_internalShowTooltip"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.showTooltip"
            },
            {
              "name": "_computedShowTooltipChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2670,
                  "column": 2
                },
                "end": {
                  "line": 2685,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_calcMousePos",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2686,
                  "column": 2
                },
                "end": {
                  "line": 2688,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            },
            {
              "name": "_createHandler",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2689,
                  "column": 2
                },
                "end": {
                  "line": 2691,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2646,
              "column": 0
            },
            "end": {
              "line": 2692,
              "column": 64
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.tooltipFollowMouseCalculation",
          "attributes": [
            {
              "name": "show-tooltip",
              "description": "Whether to display the tooltip",
              "sourceRange": {
                "start": {
                  "line": 2098,
                  "column": 4
                },
                "end": {
                  "line": 2101,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorChart.showTooltip"
            },
            {
              "name": "mouse-position",
              "description": "The mouse position in pixel coordinates. Only valid if _computedShowTooltip is true",
              "sourceRange": {
                "start": {
                  "line": 2663,
                  "column": 6
                },
                "end": {
                  "line": 2665,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.thresholdConfig\n\n    Description:\n    Behavior providing the thresholdConfig property\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "thresholdConfig",
              "type": "Object",
              "description": "Configuration object used to customize the threshold properties.\nPlease refer to px-vis-threshold (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2709,
                  "column": 4
                },
                "end": {
                  "line": 2711,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2702,
              "column": 0
            },
            "end": {
              "line": 2713,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.thresholdConfig",
          "attributes": [
            {
              "name": "threshold-config",
              "description": "Configuration object used to customize the threshold properties.\nPlease refer to px-vis-threshold (https://github.com/PredixDev/px-vis) for a list of supported properties",
              "sourceRange": {
                "start": {
                  "line": 2709,
                  "column": 4
                },
                "end": {
                  "line": 2711,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.combineMutes\n\n    Description:\n    Behavior providing ways to combine different type of muting into one array\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "_combinedMutedSeries",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2725,
                  "column": 4
                },
                "end": {
                  "line": 2728,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "mutedSeriesDomain",
              "type": "Object",
              "description": "An object which holds the series lines that have been muted based on the selected domain",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2733,
                  "column": 4
                },
                "end": {
                  "line": 2736,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "mutedSeriesBrush",
              "type": "Object",
              "description": "An object which holds the series lines that have been muted based on the axes brushes",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2741,
                  "column": 4
                },
                "end": {
                  "line": 2744,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "mutedSeriesCategories",
              "type": "Object",
              "description": "An object which holds the series lines that have been muted based on\nthe categories",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2750,
                  "column": 4
                },
                "end": {
                  "line": 2753,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_combineMutes",
              "description": "Takes the muted series from the axis brush and the selected domain and returns a merged copy of them",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2761,
                  "column": 2
                },
                "end": {
                  "line": 2794,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "m1"
                },
                {
                  "name": "m2"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2723,
              "column": 0
            },
            "end": {
              "line": 2795,
              "column": 32
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.combineMutes",
          "attributes": [
            {
              "name": "muted-series-domain",
              "description": "An object which holds the series lines that have been muted based on the selected domain",
              "sourceRange": {
                "start": {
                  "line": 2733,
                  "column": 4
                },
                "end": {
                  "line": 2736,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "muted-series-brush",
              "description": "An object which holds the series lines that have been muted based on the axes brushes",
              "sourceRange": {
                "start": {
                  "line": 2741,
                  "column": 4
                },
                "end": {
                  "line": 2744,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "muted-series-categories",
              "description": "An object which holds the series lines that have been muted based on\nthe categories",
              "sourceRange": {
                "start": {
                  "line": 2750,
                  "column": 4
                },
                "end": {
                  "line": 2753,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.multiAxisMuting\n\n    Behavior for multi-axis charts (radar, parallel) to handle brush muting\n\n    Description:\n    Behavior providing property for muting axes\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "extentsData",
              "type": "Object",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extentsAction",
              "type": "string",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "_extentsDataRoutes",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1574,
                  "column": 4
                },
                "end": {
                  "line": 1582,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "_mutedExtents",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2809,
                  "column": 4
                },
                "end": {
                  "line": 2814,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_extentsDataRouter",
              "description": "FIXME import extentsAction",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1589,
                  "column": 2
                },
                "end": {
                  "line": 1609,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2817,
                  "column": 2
                },
                "end": {
                  "line": 2819,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_addToMutedExtents",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2821,
                  "column": 2
                },
                "end": {
                  "line": 2825,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_calcMutedSeries",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2827,
                  "column": 2
                },
                "end": {
                  "line": 2840,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_calcSingleMutedSeries",
              "description": "calc muted series based on the extents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2845,
                  "column": 2
                },
                "end": {
                  "line": 2885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "extents"
                },
                {
                  "name": "dim"
                },
                {
                  "name": "series"
                },
                {
                  "name": "brushDomains"
                }
              ]
            },
            {
              "name": "deleteMutedBrushes",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2887,
                  "column": 2
                },
                "end": {
                  "line": 2889,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2807,
              "column": 0
            },
            "end": {
              "line": 2890,
              "column": 42
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.multiAxisMuting",
          "attributes": [
            {
              "name": "extents-data",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extents-action",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.extentsData"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "extents-data-changed",
              "description": "Fired when the `extentsData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "type": "CustomEvent",
              "name": "extents-action-changed",
              "description": "Fired when the `extentsAction` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.multiAxisZoom\n\n    Description:\n    Behavior providing properties for zooming on multi-axis charts (radar, parallel)\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "extentsData",
              "type": "Object",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extentsAction",
              "type": "string",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "_extentsDataRoutes",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1574,
                  "column": 4
                },
                "end": {
                  "line": 1582,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "zoomStack",
              "type": "Array",
              "description": "Stack of previous zooms",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1625,
                  "column": 4
                },
                "end": {
                  "line": 1630,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoomInPercentage",
              "type": "number",
              "description": "Percentage used to calculate new extents when using zoomIn feature.\nThe higher the number the more it will zoom in. should be less than 1.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1635,
                  "column": 4
                },
                "end": {
                  "line": 1638,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0.5",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoomOutPercentage",
              "type": "number",
              "description": "Percentage used to calculate new extents when using zoomOut feature.\nThe higher the number the more it will zoom out. should be less than 1.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1643,
                  "column": 4
                },
                "end": {
                  "line": 1646,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0.5",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_isPanning",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1648,
                  "column": 4
                },
                "end": {
                  "line": 1651,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_extentsDataRouter",
              "description": "FIXME import extentsAction",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1589,
                  "column": 2
                },
                "end": {
                  "line": 1609,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.extentsDataRouter"
            },
            {
              "name": "zoomIn",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1653,
                  "column": 2
                },
                "end": {
                  "line": 1656,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoomOut",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 1657,
                  "column": 2
                },
                "end": {
                  "line": 1660,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_intSpaceStartPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1661,
                  "column": 2
                },
                "end": {
                  "line": 1663,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "_intSpaceStopPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 1664,
                  "column": 2
                },
                "end": {
                  "line": 1666,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoom",
              "description": "Sets the selectedDomain to the drawn zoom and shows the button",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2913,
                  "column": 2
                },
                "end": {
                  "line": 2918,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "pan",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2920,
                  "column": 2
                },
                "end": {
                  "line": 2922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_saveZoomState",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2924,
                  "column": 2
                },
                "end": {
                  "line": 2930,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_zoomOrPan",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2932,
                  "column": 2
                },
                "end": {
                  "line": 2956,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_autoZoom",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 2958,
                  "column": 2
                },
                "end": {
                  "line": 2970,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isZoomIn"
                }
              ]
            },
            {
              "name": "undoZoom",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2972,
                  "column": 2
                },
                "end": {
                  "line": 2976,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "resetZoom",
              "description": "resets the extents",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 2982,
                  "column": 2
                },
                "end": {
                  "line": 2989,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 2900,
              "column": 0
            },
            "end": {
              "line": 2991,
              "column": 35
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.multiAxisZoom",
          "attributes": [
            {
              "name": "extents-data",
              "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 771,
                  "column": 4
                },
                "end": {
                  "line": 774,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "extents-action",
              "description": "Used by the chart to interpret if extentsData is strip or zoom",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 778,
                  "column": 4
                },
                "end": {
                  "line": 781,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "name": "zoom-stack",
              "description": "Stack of previous zooms",
              "sourceRange": {
                "start": {
                  "line": 1625,
                  "column": 4
                },
                "end": {
                  "line": 1630,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoom-in-percentage",
              "description": "Percentage used to calculate new extents when using zoomIn feature.\nThe higher the number the more it will zoom in. should be less than 1.",
              "sourceRange": {
                "start": {
                  "line": 1635,
                  "column": 4
                },
                "end": {
                  "line": 1638,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            },
            {
              "name": "zoom-out-percentage",
              "description": "Percentage used to calculate new extents when using zoomOut feature.\nThe higher the number the more it will zoom out. should be less than 1.",
              "sourceRange": {
                "start": {
                  "line": 1643,
                  "column": 4
                },
                "end": {
                  "line": 1646,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorChart.zoomGeneric"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "extents-data-changed",
              "description": "Fired when the `extentsData` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            },
            {
              "type": "CustomEvent",
              "name": "extents-action-changed",
              "description": "Fired when the `extentsAction` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.extentsData"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorChart.useCategoryInTooltip\n\n    Description:\n    Behavior providing useCategoryInTooltip property\n    ",
          "summary": "",
          "path": "px-vis-behavior-chart.html",
          "properties": [
            {
              "name": "useCategoryInTooltip",
              "type": "boolean",
              "description": "Whether the tooltip should show the category name for each\nvalue rather than the axis name.\nWill use the category name if defined in seriesConfig, otherwise\na string with the following formatting: 'categoryKey - category'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 3009,
                  "column": 4
                },
                "end": {
                  "line": 3012,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 3001,
              "column": 0
            },
            "end": {
              "line": 3014,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorChart.useCategoryInTooltip",
          "attributes": [
            {
              "name": "use-category-in-tooltip",
              "description": "Whether the tooltip should show the category name for each\nvalue rather than the axis name.\nWill use the category name if defined in seriesConfig, otherwise\na string with the following formatting: 'categoryKey - category'",
              "sourceRange": {
                "start": {
                  "line": 3009,
                  "column": 4
                },
                "end": {
                  "line": 3012,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorScale.scaleMultiAxis\n\n    Description:\n    Polymer behavior that provides some general properties\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-scale-multi-axis.html",
          "properties": [
            {
              "name": "svg",
              "type": "Object",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_uniqueIdsUsed",
              "type": "Array",
              "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2208,
                  "column": 5
                },
                "end": {
                  "line": 2213,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "pxSvgElem",
              "type": "Object",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "selectedDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "xAxisType",
              "type": "string",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "yAxisType",
              "type": "string",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "chartExtents",
              "type": "Object",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "name": "dataExtents",
              "type": "Object",
              "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1184,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.dataExtents"
            },
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "_combinedMutedSeries",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2725,
                  "column": 4
                },
                "end": {
                  "line": 2728,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "mutedSeriesDomain",
              "type": "Object",
              "description": "An object which holds the series lines that have been muted based on the selected domain",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2733,
                  "column": 4
                },
                "end": {
                  "line": 2736,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "mutedSeriesBrush",
              "type": "Object",
              "description": "An object which holds the series lines that have been muted based on the axes brushes",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2741,
                  "column": 4
                },
                "end": {
                  "line": 2744,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "mutedSeriesCategories",
              "type": "Object",
              "description": "An object which holds the series lines that have been muted based on\nthe categories",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2750,
                  "column": 4
                },
                "end": {
                  "line": 2753,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "_usedChartExtents",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 6
                },
                "end": {
                  "line": 27,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            }
          ],
          "methods": [
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2215,
                  "column": 2
                },
                "end": {
                  "line": 2222,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehavior.uniqueIds"
            },
            {
              "name": "generateRandomID",
              "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 52,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "baseStr"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "cloneSVGElem",
              "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 82,
                  "column": 2
                },
                "end": {
                  "line": 94,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                },
                {
                  "name": "prop"
                },
                {
                  "name": "onBottom"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawSVGOnCanvas",
              "description": "Draws the current svg into a canvas",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 99,
                  "column": 2
                },
                "end": {
                  "line": 157,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "elem"
                },
                {
                  "name": "callback"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_drawCanvg",
              "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 162,
                  "column": 2
                },
                "end": {
                  "line": 170,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_nativeDrawSvgOnCanvas",
              "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 175,
                  "column": 2
                },
                "end": {
                  "line": 205,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "canvas"
                },
                {
                  "name": "svgData"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "sucessCallback"
                },
                {
                  "name": "failureCallback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "_getSVGOuterHtml",
              "description": "fix for IE to get outer HTML",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 209,
                  "column": 2
                },
                "end": {
                  "line": 256,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "svg"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_combineMutes",
              "description": "Takes the muted series from the axis brush and the selected domain and returns a merged copy of them",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2761,
                  "column": 2
                },
                "end": {
                  "line": 2794,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "m1"
                },
                {
                  "name": "m2"
                }
              ],
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "_recreateScales",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_setXScale",
              "description": "Sets the x scale to a single ordinal scale",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 4
                },
                "end": {
                  "line": 61,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "forceRecreating"
                }
              ]
            },
            {
              "name": "_setYScale",
              "description": "Sets the y scale to multiple linear scales",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "height"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "axes"
                },
                {
                  "name": "forceRecreating"
                }
              ]
            },
            {
              "name": "_calcDimExtent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 4
                },
                "end": {
                  "line": 137,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dim"
                },
                {
                  "name": "ext"
                },
                {
                  "name": "searchMin"
                },
                {
                  "name": "searchMax"
                }
              ]
            },
            {
              "name": "_generateDataExtents",
              "description": "Generate dataExtents based on chartExtents and data",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 4
                },
                "end": {
                  "line": 230,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_setDomain",
              "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 238,
                  "column": 5
                },
                "end": {
                  "line": 269,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_squareOffTicks",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 271,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                },
                {
                  "name": "dim"
                }
              ]
            },
            {
              "name": "_updateDomain",
              "description": "When the domain gets set via a user interaction, set the scale function to use the new domain",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 288,
                  "column": 4
                },
                "end": {
                  "line": 299,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axesDomain"
                }
              ]
            },
            {
              "name": "getPixelFromData",
              "description": "Gets pixel values for data value relating to an axis. data is a number\nif margin is specified it will use those to adjust the pixel values\ninstead of the normal `margin` property\nreturns an object with pixel values and whether the values are\ncurrently out of bounds",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 308,
                  "column": 4
                },
                "end": {
                  "line": 325,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "axis"
                },
                {
                  "name": "margin"
                }
              ]
            },
            {
              "name": "getDataFromPixel",
              "description": "Gets data value for pixel value relating to an axis. Pixel val is a\nY pixel value relating to an axis.\nIt returns an array with the axis and the value: [axis, value]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 334,
                  "column": 4
                },
                "end": {
                  "line": 336,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "pixelVal"
                },
                {
                  "name": "axis"
                }
              ]
            },
            {
              "name": "_pixelRequest",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 338,
                  "column": 4
                },
                "end": {
                  "line": 341,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 355,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorScale.scaleMultiAxis",
          "attributes": [
            {
              "name": "svg",
              "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 33,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "px-svg-elem",
              "description": "The SVG element inside the chart - not a D3 selected element.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "selected-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "x-axis-type",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "y-axis-type",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "chart-extents",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "name": "data-extents",
              "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1184,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.dataExtents"
            },
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "muted-series-domain",
              "description": "An object which holds the series lines that have been muted based on the selected domain",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2733,
                  "column": 4
                },
                "end": {
                  "line": 2736,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "muted-series-brush",
              "description": "An object which holds the series lines that have been muted based on the axes brushes",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2741,
                  "column": 4
                },
                "end": {
                  "line": 2744,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            },
            {
              "name": "muted-series-categories",
              "description": "An object which holds the series lines that have been muted based on\nthe categories",
              "sourceRange": {
                "file": "px-vis-behavior-chart.html",
                "start": {
                  "line": 2750,
                  "column": 4
                },
                "end": {
                  "line": 2753,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorChart.combineMutes"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "svg-changed",
              "description": "Fired when the `svg` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "type": "CustomEvent",
              "name": "px-svg-elem-changed",
              "description": "Fired when the `pxSvgElem` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.svg"
            },
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "selected-domain-changed",
              "description": "Fired when the `selectedDomain` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "type": "CustomEvent",
              "name": "chart-extents-changed",
              "description": "Fired when the `chartExtents` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "type": "CustomEvent",
              "name": "data-extents-changed",
              "description": "Fired when the `dataExtents` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.dataExtents"
            },
            {
              "type": "CustomEvent",
              "name": "domain-changed-changed",
              "description": "Fired when the `domainChanged` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "      Name:\n      PxVisBehaviorScale.radar\n\n      Description:\n      Polymer behavior that provides radar scales\n\n      Dependencies:\n      - D3.js\n\n      ",
          "summary": "",
          "path": "px-vis-behavior-scale-radar.html",
          "properties": [
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "chartExtents",
              "type": "Object",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "name": "centerOffset",
              "type": "number",
              "description": "Used in a radial chart to provide a hole in the center of the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 1131,
                  "column": 4
                },
                "end": {
                  "line": 1135,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
            },
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "selectedDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "_calculatedExtents",
              "type": "Object",
              "description": "Holder for the calculated extents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "radar",
              "type": "boolean",
              "description": "Whether the scale is for radar and should use a scalePoint X scale\ninstead of a scaleLinear",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 42,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_setXScale",
              "description": "Sets the x scale to a single ordinal, radial scale",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 4
                },
                "end": {
                  "line": 70,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "radius"
                },
                {
                  "name": "forceRecreation"
                }
              ]
            },
            {
              "name": "_setYScale",
              "description": "Sets the y scale to multiple linear scales",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "radius"
                },
                {
                  "name": "centerOffset"
                },
                {
                  "name": "forceRecreation"
                }
              ]
            },
            {
              "name": "_recreateScales",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 4
                },
                "end": {
                  "line": 101,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_generateChartExtents",
              "description": "Find overall data max and min",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 107,
                  "column": 4
                },
                "end": {
                  "line": 147,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_setDomain",
              "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 156,
                  "column": 6
                },
                "end": {
                  "line": 171,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_updateDomain",
              "description": "When the domain gets set via a user interaction, set the scale function to use the new domain",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 178,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axesDomain"
                }
              ]
            },
            {
              "name": "getPixelFromData",
              "description": "Gets pixel values for data value relating to an axis. data is a number\nif margin is specified it will use those to adjust the pixel values\ninstead of the normal `margin` property",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 5
                },
                "end": {
                  "line": 207,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "axis"
                },
                {
                  "name": "margin"
                }
              ]
            },
            {
              "name": "getDataFromPixel",
              "description": "Gets data value for pixel value relating to an axis. Pixel val is a\nY pixel value relating to an axis.\nIt returns an array with the axis and the value: [axis, value]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 4
                },
                "end": {
                  "line": 218,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "pixelVal"
                },
                {
                  "name": "axis"
                }
              ]
            },
            {
              "name": "_pixelRequest",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 220,
                  "column": 4
                },
                "end": {
                  "line": 223,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 234,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorScale.radar",
          "attributes": [
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "chart-extents",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "name": "center-offset",
              "description": "Used in a radial chart to provide a hole in the center of the chart",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 1131,
                  "column": 4
                },
                "end": {
                  "line": 1135,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
            },
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "selected-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "radar",
              "description": "Whether the scale is for radar and should use a scalePoint X scale\ninstead of a scaleLinear",
              "sourceRange": {
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 42,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "chart-extents-changed",
              "description": "Fired when the `chartExtents` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "type": "CustomEvent",
              "name": "center-offset-changed",
              "description": "Fired when the `centerOffset` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
            },
            {
              "type": "CustomEvent",
              "name": "domain-changed-changed",
              "description": "Fired when the `domainChanged` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "type": "CustomEvent",
              "name": "selected-domain-changed",
              "description": "Fired when the `selectedDomain` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "      Name:\n      PxVisBehaviorScale.radial\n\n      Description:\n      Polymer behavior that provides radial scales\n\n      Dependencies:\n      - D3.js\n\n      ",
          "summary": "",
          "path": "px-vis-behavior-scale-radial.html",
          "properties": [
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "xAxisType",
              "type": "string",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "yAxisType",
              "type": "string",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "amplitudeExtents",
              "type": "Array",
              "description": "Polar's equivalant to chartExtents. Adjusts the max to the given value and takes the min of the min value given and the data's min val: Math.min(amplitudeExtents[0], chartDataMin)\n\nPolar coords must start at the minimum value or else the angle is irrelevant. It also cannot be less than 0.\n\n```\n [minNumber, maxNumber]\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1212,
                  "column": 4
                },
                "end": {
                  "line": 1215,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehavior.amplitudeExtents"
            },
            {
              "name": "centerOffset",
              "type": "number",
              "description": "Used in a radial chart to provide a hole in the center of the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 1131,
                  "column": 4
                },
                "end": {
                  "line": 1135,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
            },
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "counterClockwise",
              "type": "boolean",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "useDegrees",
              "type": "boolean",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "_calculatedExtents",
              "type": "Object",
              "description": "Holder for the calculated extents.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getPixelCoordForRadialData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1708,
                  "column": 2
                },
                "end": {
                  "line": 1722,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataX"
                },
                {
                  "name": "dataY"
                },
                {
                  "name": "yRange"
                },
                {
                  "name": "yDomain"
                },
                {
                  "name": "yDomainTot"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_adjustAngleForPolarChart",
              "description": "adjusts the angle for the polar chart, taking counterClockwise into account\nand returning it in the asked unit (degrees if toDegrees is true)",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1727,
                  "column": 2
                },
                "end": {
                  "line": 1751,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                },
                {
                  "name": "toDegrees"
                }
              ],
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "_setYScale",
              "description": "Sets the y scale to multiple linear scales.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 53,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "radius"
                },
                {
                  "name": "centerOffset"
                }
              ]
            },
            {
              "name": "_recreateScales",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_generateChartExtents",
              "description": "Find overall data max and min.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 119,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_setDomain",
              "description": "Calculates and sets the x and y domain after data loads.\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 5
                },
                "end": {
                  "line": 151,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "getPixelFromData",
              "description": "Gets pixel values for data values. data is an array: [xValue, yValue]\nreturns an object with pixel values and whether the values are\ncurrently out of bounds in regards to the current domain",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 158,
                  "column": 4
                },
                "end": {
                  "line": 180,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "getDataFromPixel",
              "description": "Gets data values for pixel values. pixelVal is an array:\n[xValue, yValue]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 4
                },
                "end": {
                  "line": 208,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "pixelVal"
                }
              ]
            },
            {
              "name": "_pixelRequest",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 210,
                  "column": 4
                },
                "end": {
                  "line": 213,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 225,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorScale.radial",
          "attributes": [
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "x-axis-type",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "y-axis-type",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "amplitude-extents",
              "description": "Polar's equivalant to chartExtents. Adjusts the max to the given value and takes the min of the min value given and the data's min val: Math.min(amplitudeExtents[0], chartDataMin)\n\nPolar coords must start at the minimum value or else the angle is irrelevant. It also cannot be less than 0.\n\n```\n [minNumber, maxNumber]\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1212,
                  "column": 4
                },
                "end": {
                  "line": 1215,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.amplitudeExtents"
            },
            {
              "name": "center-offset",
              "description": "Used in a radial chart to provide a hole in the center of the chart",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 1131,
                  "column": 4
                },
                "end": {
                  "line": 1135,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
            },
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "counter-clockwise",
              "description": "whether the polar data should be interpreted clockwise or counter-clockwise",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1696,
                  "column": 4
                },
                "end": {
                  "line": 1699,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "use-degrees",
              "description": "Whether the angle data should be processed as degrees, as opposed to be processed as radians",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1703,
                  "column": 4
                },
                "end": {
                  "line": 1706,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.polarData"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "center-offset-changed",
              "description": "Fired when the `centerOffset` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.radialAxisConfig"
            },
            {
              "type": "CustomEvent",
              "name": "domain-changed-changed",
              "description": "Fired when the `domainChanged` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorTime.datetime\n\n    Description:\n    Polymer behavior that provides the momentjs, moment-timezone, and a variety of datetime formating options and methods to px-vis and associated sub components.\n\n    Docs to Momentjs: http://momentjs.com/docs/\n\n    Docs to Moment-Timezone: http://momentjs.com/timezone/\n\n    Dependencies:\n    - momentjs\n    - moment-timezone\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-datetime.html",
          "properties": [
            {
              "name": "firstDateTimeFormat",
              "type": "string",
              "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"HH:mm:ss ZZ\""
            },
            {
              "name": "secondDateTimeFormat",
              "type": "string",
              "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"DD MMM YYYY\""
            },
            {
              "name": "separator",
              "type": "string",
              "description": "Defines a separator character between the two datetime strings.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 61,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"|\""
            },
            {
              "name": "timezone",
              "type": "string",
              "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 4
                },
                "end": {
                  "line": 78,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"utc\""
            }
          ],
          "methods": [
            {
              "name": "formatTimestamp",
              "description": "Method that takes a datetime string, timezone string, and a formatting string. Returns a formated datetime string.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 2
                },
                "end": {
                  "line": 99,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "datetime"
                },
                {
                  "name": "timezone"
                },
                {
                  "name": "format"
                }
              ],
              "return": {
                "type": "formatedDatetimeString"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 100,
              "column": 1
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorTime.datetime",
          "attributes": [
            {
              "name": "first-date-time-format",
              "description": "Defines the format for the first datetime string. The first datetime is shown in normal font weight.\n\nDefault is the first datetime string is TIME presented as \"15:00:00 +0000\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "second-date-time-format",
              "description": "Defines the format for the second datetime string. The second datetime is shown in bold font weight.\n\nDefault is the second datetime string is DATE presented as \"12 Feb 2016\"\n\nFor valid string formats, see: http://momentjs.com/docs/#/displaying/",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "separator",
              "description": "Defines a separator character between the two datetime strings.",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 61,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "timezone",
              "description": "Sets what timezone the event time should display in.\n\nTimezone defaults to UTC time. If a valid timezone is specified, then times include daylight savings time if applicable.\n\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\nFor more details on timezones, see: http://momentjs.com/timezone/",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 4
                },
                "end": {
                  "line": 78,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorScale.scale\n\n    Description:\n    Polymer behavior that provides some general properties\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-scale.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "selectedDomain",
              "type": "Object",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "xAxisType",
              "type": "string",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "yAxisType",
              "type": "string",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"linear\"",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "chartExtents",
              "type": "Object",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "name": "dataExtents",
              "type": "Object",
              "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1184,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.dataExtents"
            },
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "preventWebWorkerSynchronization",
              "type": "boolean",
              "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3028,
                  "column": 6
                },
                "end": {
                  "line": 3031,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "_extents",
              "type": "Array",
              "description": "Holder for chart extents from the seriesConfig object",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[[],[]]"
            },
            {
              "name": "_chartDataHasChanged",
              "type": "number",
              "description": "Boolean to detect if the chart data has changed",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "_calculatingDomain",
              "type": "boolean",
              "description": "Boolean to indicate if we are currently calculating the domain",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_defaultScaleValue",
              "type": "Object",
              "description": "default extents to use if none are specified\n\n0 for y axis for best practice",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 60,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"x\":[null],\"y\":[null]}"
            },
            {
              "name": "disableDynamicUpdate",
              "type": "boolean",
              "description": "Defines if the viewable chart extents should update when chartData is updated",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_runOnce",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 74,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "chartId",
              "type": "string",
              "description": "Internal unique ID",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isObjEmpty",
              "description": "Checks to see if an object is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 807,
                  "column": 2
                },
                "end": {
                  "line": 815,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isD3Empty",
              "description": "Checks to see if an d3 obj is empty",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 823,
                  "column": 2
                },
                "end": {
                  "line": 828,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesD3HaveValues",
              "description": "Checks to see if an d3 obj has something",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 836,
                  "column": 2
                },
                "end": {
                  "line": 841,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_doesObjHaveValues",
              "description": "Checks to see if an object has values",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 849,
                  "column": 2
                },
                "end": {
                  "line": 858,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hasProps",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 860,
                  "column": 2
                },
                "end": {
                  "line": 872,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarDefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 880,
                  "column": 2
                },
                "end": {
                  "line": 885,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_isVarUndefined",
              "description": "Checks to see if an object is defined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 892,
                  "column": 2
                },
                "end": {
                  "line": 897,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ],
              "return": {
                "type": "bool"
              },
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_escapeCssSelector",
              "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 902,
                  "column": 2
                },
                "end": {
                  "line": 904,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkThemeVariable",
              "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 909,
                  "column": 2
                },
                "end": {
                  "line": 912,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "varName"
                },
                {
                  "name": "defaultValue"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_checkColorType",
              "description": "Checks if a color is already hex or rgb, if must be a colors obj",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 917,
                  "column": 2
                },
                "end": {
                  "line": 922,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "c"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_hexToRgb",
              "description": "converts a hex to rgb color",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 927,
                  "column": 2
                },
                "end": {
                  "line": 938,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_binarySearch",
              "description": "Binary search through sorted chartData",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 943,
                  "column": 2
                },
                "end": {
                  "line": 960,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "val"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_fuzzyBinarySearch",
              "description": "Binary search through sorted chartData returning all vals within a window",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 965,
                  "column": 2
                },
                "end": {
                  "line": 982,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_getAdjacentValues",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 984,
                  "column": 2
                },
                "end": {
                  "line": 1008,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "key"
                },
                {
                  "name": "lowerFuzz"
                },
                {
                  "name": "upperFuzz"
                },
                {
                  "name": "lowerIndex"
                },
                {
                  "name": "upperIndex"
                },
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "clone",
              "description": "deep-copy object into newObject",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1013,
                  "column": 2
                },
                "end": {
                  "line": 1026,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "newObject"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "isVarNumber",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1028,
                  "column": 2
                },
                "end": {
                  "line": 1030,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "n"
                }
              ],
              "inheritedFrom": "PxVisBehavior.commonMethods"
            },
            {
              "name": "_recreateScales",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 2
                },
                "end": {
                  "line": 105,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                },
                {
                  "name": "margin"
                }
              ]
            },
            {
              "name": "_setXScale",
              "description": "Sets the x scale or update its range if already existing",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 2
                },
                "end": {
                  "line": 117,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "margin"
                }
              ]
            },
            {
              "name": "_internalSetXScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 2
                },
                "end": {
                  "line": 133,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "forceRecreation"
                }
              ]
            },
            {
              "name": "_setYScale",
              "description": "Sets the y scale or update its range if already existing",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 140,
                  "column": 2
                },
                "end": {
                  "line": 145,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "height"
                },
                {
                  "name": "margin"
                }
              ]
            },
            {
              "name": "_internalSetYScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 146,
                  "column": 2
                },
                "end": {
                  "line": 161,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "height"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "forceRecreation"
                }
              ]
            },
            {
              "name": "_setMultiYScale",
              "description": "Sets a multi y scale",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 168,
                  "column": 2
                },
                "end": {
                  "line": 173,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "height"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "axes"
                }
              ]
            },
            {
              "name": "_internalSetMultiYScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 174,
                  "column": 2
                },
                "end": {
                  "line": 209,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "height"
                },
                {
                  "name": "margin"
                },
                {
                  "name": "axes"
                },
                {
                  "name": "forceRecreation"
                }
              ]
            },
            {
              "name": "_setScale",
              "description": "Helper function to set the x and y based on scale type",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 2
                },
                "end": {
                  "line": 247,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                },
                {
                  "name": "range"
                },
                {
                  "name": "currentAxis"
                },
                {
                  "name": "isMultiAxis"
                },
                {
                  "name": "key"
                }
              ]
            },
            {
              "name": "_setDomain",
              "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 256,
                  "column": 3
                },
                "end": {
                  "line": 313,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_applyExtents",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 315,
                  "column": 2
                },
                "end": {
                  "line": 353,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "extents"
                }
              ]
            },
            {
              "name": "_determineExtents",
              "description": "Calculates the extents based on chartExtents, dataExtents, and the data.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 359,
                  "column": 2
                },
                "end": {
                  "line": 441,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_checkForExtents",
              "description": "Looks at chartExtents and dataExtents for extents values per axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 447,
                  "column": 2
                },
                "end": {
                  "line": 482,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isOrd"
                },
                {
                  "name": "chartExtents"
                },
                {
                  "name": "dataExtents"
                },
                {
                  "name": "axis"
                }
              ]
            },
            {
              "name": "_checkChartExtents",
              "description": "Looks at chartExtents for extents values per axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 488,
                  "column": 2
                },
                "end": {
                  "line": 496,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cExts"
                },
                {
                  "name": "axis"
                }
              ]
            },
            {
              "name": "_checkDataExtents",
              "description": "Looks at dataExtents for extents values per axis; resolves chartExtents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 502,
                  "column": 2
                },
                "end": {
                  "line": 519,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dExts"
                },
                {
                  "name": "cExts"
                },
                {
                  "name": "axis"
                },
                {
                  "name": "bool"
                },
                {
                  "name": "exts"
                }
              ]
            },
            {
              "name": "_findMinMax",
              "description": "Find the min and max values or ordinal values in data, for X and/or Y axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 526,
                  "column": 2
                },
                "end": {
                  "line": 552,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "doX"
                },
                {
                  "name": "doY"
                },
                {
                  "name": "ordX"
                },
                {
                  "name": "ordY"
                },
                {
                  "name": "timeX"
                },
                {
                  "name": "result"
                },
                {
                  "name": "keys"
                }
              ]
            },
            {
              "name": "_getDataExtents",
              "description": "Goes through the data and extracts min and max values",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 558,
                  "column": 2
                },
                "end": {
                  "line": 572,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "keysArr"
                },
                {
                  "name": "axis"
                }
              ]
            },
            {
              "name": "_findTimeMM",
              "description": "Finds time based Max and Min",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 578,
                  "column": 2
                },
                "end": {
                  "line": 585,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "result"
                },
                {
                  "name": "d"
                },
                {
                  "name": "l"
                },
                {
                  "name": "x"
                },
                {
                  "name": "doMin"
                },
                {
                  "name": "doMax"
                }
              ]
            },
            {
              "name": "_setMin",
              "description": "Compares existing min and new data for min",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 591,
                  "column": 2
                },
                "end": {
                  "line": 595,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "r"
                },
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "_setMax",
              "description": "Compares existing max and new data for max",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 601,
                  "column": 2
                },
                "end": {
                  "line": 605,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "r"
                },
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "_processDataValues",
              "description": "Goes through the values from the data and calcs the extents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 611,
                  "column": 2
                },
                "end": {
                  "line": 627,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isOrd"
                },
                {
                  "name": "r"
                },
                {
                  "name": "d"
                },
                {
                  "name": "axis"
                },
                {
                  "name": "key"
                },
                {
                  "name": "i"
                },
                {
                  "name": "doMin"
                },
                {
                  "name": "doMax"
                },
                {
                  "name": "v0"
                },
                {
                  "name": "v1"
                }
              ]
            },
            {
              "name": "_checkInSeriesConfig",
              "description": "Loop through each series and see if it has mins and maxes in seriesConfig",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 634,
                  "column": 0
                },
                "end": {
                  "line": 646,
                  "column": 1
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "exts"
                },
                {
                  "name": "a"
                }
              ]
            },
            {
              "name": "_applyChartExtents",
              "description": "Apply chart extents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 652,
                  "column": 0
                },
                "end": {
                  "line": 673,
                  "column": 1
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "exts"
                },
                {
                  "name": "a"
                }
              ]
            },
            {
              "name": "_searchForExtents",
              "description": "Search for multi axis extents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 679,
                  "column": 0
                },
                "end": {
                  "line": 695,
                  "column": 1
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "exts"
                },
                {
                  "name": "seriesToSearch"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "_calcSeriesToSearch",
              "description": "Search for multi axis extents",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 701,
                  "column": 0
                },
                "end": {
                  "line": 713,
                  "column": 1
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "exts"
                },
                {
                  "name": "a"
                },
                {
                  "name": "seriesToSearch"
                }
              ]
            },
            {
              "name": "_calcMultiAxisExtents",
              "description": "calculates chart extents for multi axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 719,
                  "column": 0
                },
                "end": {
                  "line": 763,
                  "column": 1
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_updateDomain",
              "description": "When the domain gets set via a user interaction, set the scale function to use the new domain\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 772,
                  "column": 2
                },
                "end": {
                  "line": 797,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selectedDomain"
                }
              ]
            },
            {
              "name": "_chartDataChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 798,
                  "column": 2
                },
                "end": {
                  "line": 803,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_setAxisScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 805,
                  "column": 2
                },
                "end": {
                  "line": 843,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "leftDims"
                },
                {
                  "name": "rightDims"
                },
                {
                  "name": "leftAxisSize"
                },
                {
                  "name": "rightAxisSize"
                }
              ]
            },
            {
              "name": "getPixelFromData",
              "description": "Gets pixel values for data values relating to a series (series is the id\nused in seriesConfig). data is an array: [xValue, yValue]\nif margin is specified it will use thos to adjust the pixel values\ninstead of the normal `margin` property\nreturns an object with the result and whether that result is out of\nbounds for the current domain",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 853,
                  "column": 2
                },
                "end": {
                  "line": 871,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "series"
                },
                {
                  "name": "margin"
                }
              ]
            },
            {
              "name": "getDataFromPixel",
              "description": "Gets data values for pixel values relating to a series (series is the id\nused in seriesConfig). pixelVal is an array: [xValue, yValue]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 879,
                  "column": 2
                },
                "end": {
                  "line": 887,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "pixelVal"
                },
                {
                  "name": "series"
                }
              ]
            },
            {
              "name": "_pixelRequest",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 889,
                  "column": 2
                },
                "end": {
                  "line": 892,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "evt"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 906,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorScale.scale",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "selected-domain",
              "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 650,
                  "column": 4
                },
                "end": {
                  "line": 656,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "name": "x-axis-type",
              "description": "Sets the type of data for the x values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `time`: for time domains.\n- `timeLocal`: for local time domains.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1058,
                  "column": 4
                },
                "end": {
                  "line": 1061,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "y-axis-type",
              "description": "Sets the type of data for the y values\n\nValid entries are:\n- `ordinal`: for discrete input domains, such as names or categories.\n- `linear`: for continuous input domains, such as numbers.\n- `pie`: for pie/donut charts",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1070,
                  "column": 4
                },
                "end": {
                  "line": 1073,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.axisTypes"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "chart-extents",
              "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1148,
                  "column": 4
                },
                "end": {
                  "line": 1151,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "name": "data-extents",
              "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1184,
                  "column": 4
                },
                "end": {
                  "line": 1187,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.dataExtents"
            },
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "prevent-web-worker-synchronization",
              "description": "Prevents the chart from synchronizing its data with a webworker.\nThis can be turned on to minimize the memory footprint of the\nchart\nWARNING: turning the synchronization off will:\n- prevent the chart from being able to use crosshair feature\n- slow down data search for tooltip/register\n- slow down calculating extents for the chart if it needs to\n\nWe advise against turning it off but it might be beneficial in\nspecific scenarios (high number of small charts with minimum\ninteraction for example)",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 3028,
                  "column": 6
                },
                "end": {
                  "line": 3031,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.preventWebWorkerSynchronization"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "disable-dynamic-update",
              "description": "Defines if the viewable chart extents should update when chartData is updated",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "chart-id",
              "description": "Internal unique ID",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "selected-domain-changed",
              "description": "Fired when the `selectedDomain` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "chart-extents-changed",
              "description": "Fired when the `chartExtents` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.chartExtents"
            },
            {
              "type": "CustomEvent",
              "name": "data-extents-changed",
              "description": "Fired when the `dataExtents` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.dataExtents"
            },
            {
              "type": "CustomEvent",
              "name": "domain-changed-changed",
              "description": "Fired when the `domainChanged` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRenderer.debounceOnPanning\n\n    Description:\n    Polymer behavior that provides ability to control debouncing on panning\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-renderer.html",
          "properties": [
            {
              "name": "drawDebounceTime",
              "type": "Object",
              "description": "Debounce time to use for different types of rendering",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"chartData\":10,\"filteredChartData\":10,\"highlightData\":10,\"markers\":10}"
            },
            {
              "name": "_oldDrawDebounceTime",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 35,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "debounceOnPanning",
              "type": "boolean",
              "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 2
                },
                "end": {
                  "line": 54,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 2
                },
                "end": {
                  "line": 59,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_panningStarted",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_panningStopped",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 2
                },
                "end": {
                  "line": 77,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 78,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRenderer.debounceOnPanning",
          "attributes": [
            {
              "name": "draw-debounce-time",
              "description": "Debounce time to use for different types of rendering",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "debounce-on-panning",
              "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRenderer.base\n\n    Description:\n    Polymer behavior that provides\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-renderer.html",
          "properties": [
            {
              "name": "_isAttached",
              "type": "boolean",
              "description": "Boolean tracking if we are attached",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2362,
                  "column": 4
                },
                "end": {
                  "line": 2365,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.isAttached"
            },
            {
              "name": "renderToCanvas",
              "type": "boolean",
              "description": "Boolean to specify if drawings should render to canvas instead of svg",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 386,
                  "column": 4
                },
                "end": {
                  "line": 390,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_renderToCanvasChanged\""
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "preventInitialDrawing",
              "type": "boolean",
              "description": "blocks initial drawings of axis until set to false",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2272,
                  "column": 4
                },
                "end": {
                  "line": 2275,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
            },
            {
              "name": "drawDebounceTime",
              "type": "Object",
              "description": "Debounce time to use for different types of rendering",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"chartData\":10,\"filteredChartData\":10,\"highlightData\":10,\"markers\":10}",
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "_oldDrawDebounceTime",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 35,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "debounceOnPanning",
              "type": "boolean",
              "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "domainChanged",
              "type": "boolean",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "_progressiveRenderingCounter",
              "type": "Object",
              "description": "Counter to track progressive rendering requests and only draw the latest one",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 126,
                  "column": 4
                },
                "end": {
                  "line": 131,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_canvasTargets",
              "type": "Object",
              "description": "Current registered targets to draw on canvas during rendering",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 4
                },
                "end": {
                  "line": 140,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_svgTargets",
              "type": "Object",
              "description": "Current registered targets to draw on svg during rendering",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 144,
                  "column": 4
                },
                "end": {
                  "line": 149,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "rendererMinimumPointsPerFrame",
              "type": "number",
              "description": "The minimum number of points to render per frame\neven if the chart is laggy",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 4
                },
                "end": {
                  "line": 157,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "50"
            },
            {
              "name": "rendererFrameDurationTarget",
              "type": "number",
              "description": "Target duration (in ms) for one frame. The renderer will try to render\nas much data as possible in that given timeframe before calling the next\nanimation frame.\nWARNING: this needs to be higher than 16ms since by default\nrequestAnimationFrame will be called every ~16ms, so our target needs to\nbe higher to ensure we keep the processor busy",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 4
                },
                "end": {
                  "line": 169,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "20"
            },
            {
              "name": "rendererFrameCountToAverage",
              "type": "number",
              "description": "Number of previous frames to average for the adaptive\nprogressive rendering",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 174,
                  "column": 4
                },
                "end": {
                  "line": 177,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "3"
            },
            {
              "name": "_previousFramesTiming",
              "type": "Object",
              "description": "For each renderer type the previous frames number of points and duration for line and scatter",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 181,
                  "column": 4
                },
                "end": {
                  "line": 189,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_hasBeenDetached",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 4
                },
                "end": {
                  "line": 193,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 215,
                  "column": 2
                },
                "end": {
                  "line": 223,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 2
                },
                "end": {
                  "line": 214,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderToCanvasChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 392,
                  "column": 2
                },
                "end": {
                  "line": 407,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "renderToCanvas"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
            },
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_panningStarted",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "_panningStopped",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 2
                },
                "end": {
                  "line": 77,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "created",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 195,
                  "column": 2
                },
                "end": {
                  "line": 197,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_initializeRendererTypeObject",
              "description": "Creates an object with all renderer types and a default value for each",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 228,
                  "column": 2
                },
                "end": {
                  "line": 236,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "initialVal"
                }
              ]
            },
            {
              "name": "_registerDrawingElement",
              "description": "Elements wanting to use the renderer need to fire an event which\nwill be processed here",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 242,
                  "column": 2
                },
                "end": {
                  "line": 252,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_unregisterDrawingElement",
              "description": "Elements wanting to use the renderer need to fire an event (on detached)\nwhich will be processed here",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 2
                },
                "end": {
                  "line": 286,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_renderSeriesOnTop",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 293,
                  "column": 2
                },
                "end": {
                  "line": 325,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderTypedContext",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 327,
                  "column": 2
                },
                "end": {
                  "line": 352,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "renderType"
                },
                {
                  "name": "canvasesToClear"
                }
              ]
            },
            {
              "name": "_renderChartData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 354,
                  "column": 2
                },
                "end": {
                  "line": 364,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderFilteredChartData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 366,
                  "column": 2
                },
                "end": {
                  "line": 376,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderHighlight",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 378,
                  "column": 2
                },
                "end": {
                  "line": 385,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderMarkers",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 387,
                  "column": 2
                },
                "end": {
                  "line": 392,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderAllLines",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 394,
                  "column": 2
                },
                "end": {
                  "line": 421,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_renderData",
              "description": "Initial entry point, debouncing as needed or cancel",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 429,
                  "column": 2
                },
                "end": {
                  "line": 446,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                }
              ]
            },
            {
              "name": "_renderDataDebounced",
              "description": "Ensure we the basic conditions for allowign rendering\nand start it",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 452,
                  "column": 2
                },
                "end": {
                  "line": 462,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                },
                {
                  "name": "allowCanvasClearing"
                }
              ]
            },
            {
              "name": "_initializeCanvasRendering",
              "description": "Resets var relating to 1 complete rendering, call initializeDrawingSession\non all rendering targets and kick the process",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 468,
                  "column": 2
                },
                "end": {
                  "line": 490,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                },
                {
                  "name": "allowCanvasClearing"
                }
              ]
            },
            {
              "name": "_processCanvasRendering",
              "description": "Called each frame.\n- Updates previous frame timings if there was one\n- Render what can be in the current frame\n- Exit or wait for next frame",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 498,
                  "column": 2
                },
                "end": {
                  "line": 530,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                }
              ]
            },
            {
              "name": "_processCanvasOneFrame",
              "description": "Rendering process during one frame. Calculate how many points can be\nrendered for the current target an render those. Keep rendering next\ntargets if we have enough time, based on same process",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 537,
                  "column": 2
                },
                "end": {
                  "line": 578,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                }
              ]
            },
            {
              "name": "_updatePreviousFrameTiming",
              "description": "Updates stats of the previous frame: how many points have been\nrendered per type and how long it took",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 584,
                  "column": 2
                },
                "end": {
                  "line": 616,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                },
                {
                  "name": "now"
                }
              ]
            },
            {
              "name": "_getCurrentCanvasRenderingTarget",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 618,
                  "column": 2
                },
                "end": {
                  "line": 625,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                }
              ]
            },
            {
              "name": "_firstCanvasRender",
              "description": "Used when rendering a target we don't have stats about. Assumes a first\nnumber of points to render, measure that and render more if we think we can",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 631,
                  "column": 2
                },
                "end": {
                  "line": 675,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                }
              ]
            },
            {
              "name": "_renderTargetToCanvas",
              "description": "Tries to render toRender number of points for the current target.\nreturns the number of points actually rendered and how much of the budget\nthis used",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 682,
                  "column": 2
                },
                "end": {
                  "line": 710,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "toRender"
                },
                {
                  "name": "ctx"
                },
                {
                  "name": "currentBudget"
                }
              ]
            },
            {
              "name": "_calculatePointsAllowance",
              "description": "Calculates how many points we can render in one frame for the\ncontext current target. Based on stats of previous rendering of same type.\nReturns -1 if we don't have stats about this type of rendering",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 717,
                  "column": 2
                },
                "end": {
                  "line": 746,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "ctx"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 0
            },
            "end": {
              "line": 756,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRenderer.base",
          "attributes": [
            {
              "name": "render-to-canvas",
              "description": "Boolean to specify if drawings should render to canvas instead of svg",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 386,
                  "column": 4
                },
                "end": {
                  "line": 390,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.renderToCanvas"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "prevent-initial-drawing",
              "description": "blocks initial drawings of axis until set to false",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2272,
                  "column": 4
                },
                "end": {
                  "line": 2275,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.preventInitialDrawing"
            },
            {
              "name": "draw-debounce-time",
              "description": "Debounce time to use for different types of rendering",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "debounce-on-panning",
              "description": "Whether the drawings will be debounced on panning the chart.\nWhen not debounced the redraw will happen more often on panning,\nwhich should result in a smoother experience. However if rendering\na big number of points this can have the opposite effect since\nit wil redraw too often comapred tot he time taken to re render everything",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorRenderer.debounceOnPanning"
            },
            {
              "name": "domain-changed",
              "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 543,
                  "column": 4
                },
                "end": {
                  "line": 547,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "renderer-minimum-points-per-frame",
              "description": "The minimum number of points to render per frame\neven if the chart is laggy",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 4
                },
                "end": {
                  "line": 157,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "renderer-frame-duration-target",
              "description": "Target duration (in ms) for one frame. The renderer will try to render\nas much data as possible in that given timeframe before calling the next\nanimation frame.\nWARNING: this needs to be higher than 16ms since by default\nrequestAnimationFrame will be called every ~16ms, so our target needs to\nbe higher to ensure we keep the processor busy",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 4
                },
                "end": {
                  "line": 169,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "renderer-frame-count-to-average",
              "description": "Number of previous frames to average for the adaptive\nprogressive rendering",
              "sourceRange": {
                "start": {
                  "line": 174,
                  "column": 4
                },
                "end": {
                  "line": 177,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "domain-changed-changed",
              "description": "Fired when the `domainChanged` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "type": "CustomEvent",
              "name": "px-vis-chart-canvas-rendering-ended",
              "description": "px-vis-chart-canvas-rendering-ended",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "px-vis-chart-canvas-rendering-started",
              "description": "px-vis-chart-canvas-rendering-started",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRenderer.priority\n\n    Description:\n    Polymer behavior that provides the priority  property, used by elements\n    registering for drawing and allowing to set a drawing order\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-renderer.html",
          "properties": [
            {
              "name": "priority",
              "type": "number",
              "description": "Priority is used by elements of the same rendering type to determine\nthe order of drawing. priority 0 => smaller priority. 2 draws over 1, which itself draws over 0, etc..",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 777,
                  "column": 4
                },
                "end": {
                  "line": 780,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 771,
              "column": 0
            },
            "end": {
              "line": 782,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRenderer.priority",
          "attributes": [
            {
              "name": "priority",
              "description": "Priority is used by elements of the same rendering type to determine\nthe order of drawing. priority 0 => smaller priority. 2 draws over 1, which itself draws over 0, etc..",
              "sourceRange": {
                "start": {
                  "line": 777,
                  "column": 4
                },
                "end": {
                  "line": 780,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehavior.dataConverterMethods\n\n    Description:\n    Converts data from Array form to Object form.\n\n    px-vis charts expect data in the following array of objects format:\n\n    ```\n    [\n        {\n            x: 10,\n            y: 50\n        },{\n            x: 20,\n            y: 40\n        }\n    ]\n    ```\n\n    Keys are flexible - multiple keys can be added to the same object:\n\n    ```\n    [\n        {\n            timestamp: 1413930600000,\n            tag1: 15,\n            tag2: 16,\n            tag3: 11\n        },{\n            timestamp: 1414080000000,\n            tag1: 14,\n            tag2: 17,\n            tag3: 13\n        }\n    ]\n    ```\n\n    This component accepts data in the following format:\n\n    ```\n    [{\n        \"id\":\"myTagID\",\n        \"name\":\"My Favorite Tag\",\n        \"minValue\":0,\n        \"maxValue\":293,\n        \"data\":[\n            [1464562720308,41],\n            [1464571360308,170]\n        ]\n    }]\n    ```\n\n    It will reformat the data into the object format and create a seriesConfig file.\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-data-converter.html",
          "properties": [],
          "methods": [
            {
              "name": "_calcId",
              "description": "returns the correct id for the series",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 2
                },
                "end": {
                  "line": 75,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "context"
                },
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "computeChartData",
              "description": "Merges n sorted arrays into an array of objects",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 2
                },
                "end": {
                  "line": 161,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "originalData",
                  "type": "Array",
                  "description": "An array of dataset arrays (returned from the timeseries database) to be merged together."
                },
                {
                  "name": "context",
                  "type": "Object",
                  "description": "Holder for a variety of configs:"
                },
                {
                  "name": "emptySets",
                  "type": "Object",
                  "description": "An object with keys for each empty set in the oringinalData"
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Merged datasets as an Array of Objects"
              }
            },
            {
              "name": "computeSeriesConfig",
              "description": "bundles info in the original dataset into a new series config",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 2
                },
                "end": {
                  "line": 227,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "originalData",
                  "type": "Array",
                  "description": "An array of dataset arrays (returned from the timeseries database) to be merged together."
                },
                {
                  "name": "context",
                  "type": "Object",
                  "description": "Holder for a variety of configs:"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "An Object with all configuration found in the originalData"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 228,
              "column": 1
            }
          },
          "privacy": "public",
          "name": "PxVisBehavior.dataConverterMethods",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorInteraction.lasso\n\n    Description:\n    Polymer behavior that provides the methods and properties necessary\n    to handle lasso selection\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-interaction.html",
          "properties": [
            {
              "name": "_isLassoing",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_lassoDrawing",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 21,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_lassoGroup",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_lassoCoords",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "_lassoCrosshairData",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{\"rawData\":[],\"timeStamps\":[]}"
            },
            {
              "name": "_lassoGenerator",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "resetLassoData",
              "type": "boolean",
              "description": "When switched clears all the previous selection made\n(in _lassoCrosshairData)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_resetLasso\""
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_resetLasso",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 2
                },
                "end": {
                  "line": 63,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_startLasso",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 2
                },
                "end": {
                  "line": 102,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_updateLasso",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 104,
                  "column": 2
                },
                "end": {
                  "line": 121,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "first"
                }
              ]
            },
            {
              "name": "_updateCoordsCartesian",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 123,
                  "column": 2
                },
                "end": {
                  "line": 134,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                }
              ]
            },
            {
              "name": "_updateCoordsRadial",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 136,
                  "column": 2
                },
                "end": {
                  "line": 153,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                }
              ]
            },
            {
              "name": "_updateCoordsTS",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 2
                },
                "end": {
                  "line": 166,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mousePos"
                }
              ]
            },
            {
              "name": "_constrainOnWidth",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 168,
                  "column": 2
                },
                "end": {
                  "line": 176,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "xVal"
                }
              ]
            },
            {
              "name": "_stopLasso",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 178,
                  "column": 2
                },
                "end": {
                  "line": 183,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 184,
              "column": 31
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorInteraction.lasso",
          "attributes": [
            {
              "name": "reset-lasso-data",
              "description": "When switched clears all the previous selection made\n(in _lassoCrosshairData)",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorDrag.basicProps\n\n    Description:\n    Polymer behavior that provides the basic drag properties\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-axis-drag.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "redrawSeries",
              "type": "boolean",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "redrawElems",
              "type": "Array",
              "description": "The accompanying array of series elements required to redraw.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "dynamicRedraw",
              "type": "boolean",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "radial",
              "type": "boolean",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.radial"
            },
            {
              "name": "_dragging",
              "type": "Object",
              "description": "Holder for the axis currently being dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}"
            },
            {
              "name": "dragBehavior",
              "type": "Object",
              "description": "Holder for the drag behavior",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_position",
              "description": "helper function to calc the position of an axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "transition",
              "description": "Defines our transition for axis snapping",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "g"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorDrag.basicProps",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "redraw-series",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "redraw-elems",
              "description": "The accompanying array of series elements required to redraw.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "dynamic-redraw",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "radial",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.radial"
            },
            {
              "name": "drag-behavior",
              "description": "Holder for the drag behavior",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "drag-behavior-changed",
              "description": "Fired when the `dragBehavior` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorDrag.parallelAxisDrag\n\n    Description:\n    Polymer behavior that provides the drag behavior for parallel coordinates and radar\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-axis-drag.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "redrawSeries",
              "type": "boolean",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "redrawElems",
              "type": "Array",
              "description": "The accompanying array of series elements required to redraw.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "dynamicRedraw",
              "type": "boolean",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "radial",
              "type": "boolean",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.radial"
            },
            {
              "name": "_dragging",
              "type": "Object",
              "description": "Holder for the axis currently being dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            },
            {
              "name": "dragBehavior",
              "type": "Object",
              "description": "Holder for the drag behavior",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            }
          ],
          "methods": [
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_position",
              "description": "helper function to calc the position of an axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            },
            {
              "name": "transition",
              "description": "Defines our transition for axis snapping",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "g"
                }
              ],
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            },
            {
              "name": "createParallelAxisDrag",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 92,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onDragStart",
              "description": "When an axis starts being dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 4
                },
                "end": {
                  "line": 105,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onDrag",
              "description": "When an axis is dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 110,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onDragEnd",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 134,
                  "column": 4
                },
                "end": {
                  "line": 154,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_linearDrag",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 156,
                  "column": 4
                },
                "end": {
                  "line": 169,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_radialDrag",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 171,
                  "column": 4
                },
                "end": {
                  "line": 198,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_linearSort",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 200,
                  "column": 4
                },
                "end": {
                  "line": 222,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dims"
                },
                {
                  "name": "d"
                },
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_radialSort",
              "description": "Sorting function for polar in a cartesian space",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 228,
                  "column": 4
                },
                "end": {
                  "line": 295,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dims"
                },
                {
                  "name": "d"
                },
                {
                  "name": "angle"
                }
              ]
            },
            {
              "name": "_radialOrLinear",
              "description": "Helper function to return either a rotate transform or translate transform",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 300,
                  "column": 4
                },
                "end": {
                  "line": 303,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 0
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorDrag.parallelAxisDrag",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "redraw-series",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "redraw-elems",
              "description": "The accompanying array of series elements required to redraw.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "dynamic-redraw",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "radial",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.radial"
            },
            {
              "name": "drag-behavior",
              "description": "Holder for the drag behavior",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "drag-behavior-changed",
              "description": "Fired when the `dragBehavior` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorDrag.cartesianDrag\n\n    Description:\n    Polymer behavior that provides the drag behavior for multiaxis cartesian charts\n\n    Dependencies:\n    - D3.js\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-axis-drag.html",
          "properties": [
            {
              "name": "width",
              "type": "number",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "type": "number",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "_defaultMargin",
              "type": "Object",
              "description": "Copy of the default margin for checking if it has changed",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "margin",
              "type": "Object",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "type": "Array",
              "description": "An optional offset for a variety of elements",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[0,0]",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "axes",
              "type": "Array",
              "description": "An optional dev set array to specify which dimensions to plot",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "type": "Array",
              "description": "An array of dimensions which the chart uses.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "seriesKey",
              "type": "string",
              "description": "A string specifying which key to use as the series",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "chartData",
              "type": "Array",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "redrawSeries",
              "type": "boolean",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "redrawElems",
              "type": "Array",
              "description": "The accompanying array of series elements required to redraw.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "dynamicRedraw",
              "type": "boolean",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "x",
              "type": "Object",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "type": "Object",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "isMultiY",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "radial",
              "type": "boolean",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.radial"
            },
            {
              "name": "_dragging",
              "type": "Object",
              "description": "Holder for the axis currently being dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            },
            {
              "name": "dragBehavior",
              "type": "Object",
              "description": "Holder for the drag behavior",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            }
          ],
          "methods": [
            {
              "name": "_isValidData",
              "description": "returns true if the data is valid: non NaN, null or undefined",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 352,
                  "column": 4
                },
                "end": {
                  "line": 355,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "_isDataNotNull",
              "description": "returns true if the data is not null",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 360,
                  "column": 4
                },
                "end": {
                  "line": 363,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getIsMultiY",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 458,
                  "column": 2
                },
                "end": {
                  "line": 464,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_processYValues",
              "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 471,
                  "column": 2
                },
                "end": {
                  "line": 489,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "callback"
                }
              ],
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "_position",
              "description": "helper function to calc the position of an axis",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            },
            {
              "name": "transition",
              "description": "Defines our transition for axis snapping",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "g"
                }
              ],
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            },
            {
              "name": "createCartesianDrag",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 329,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onCartesianDragStart",
              "description": "When an axis starts being dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 335,
                  "column": 4
                },
                "end": {
                  "line": 340,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onCartesianDrag",
              "description": "When an axis is dragged",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 345,
                  "column": 4
                },
                "end": {
                  "line": 470,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onCartesianDragEnd",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 471,
                  "column": 4
                },
                "end": {
                  "line": 483,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 0
            },
            "end": {
              "line": 484,
              "column": 35
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorDrag.cartesianDrag",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the elem; generally the width of the charting area for most components",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "height",
              "description": "The height of the component; generally the height of the charting area for most components.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "name": "margin",
              "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.margins"
            },
            {
              "name": "offset",
              "description": "An optional offset for a variety of elements",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.sizing"
            },
            {
              "name": "axes",
              "description": "An optional dev set array to specify which dimensions to plot",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1604,
                  "column": 4
                },
                "end": {
                  "line": 1606,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "dimensions",
              "description": "An array of dimensions which the chart uses.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1610,
                  "column": 4
                },
                "end": {
                  "line": 1612,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "series-key",
              "description": "A string specifying which key to use as the series",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1617,
                  "column": 4
                },
                "end": {
                  "line": 1619,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "PxVisBehavior.dimensions"
            },
            {
              "name": "chart-data",
              "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dataset"
            },
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "redraw-series",
              "description": "Boolean to specify if we should redraw the chart series when we move an axis. More of a chart type by chart type configuration rather than a developer configuration. IE, for charts such as multi-y timeseries, it is unnessary. For charts such as parallel coordinates, it is necessary.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 845,
                  "column": 4
                },
                "end": {
                  "line": 848,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "redraw-elems",
              "description": "The accompanying array of series elements required to redraw.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 852,
                  "column": 4
                },
                "end": {
                  "line": 855,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "dynamic-redraw",
              "description": "Boolean specifing if the lines should redraw as you move the axis or just at the end.",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 859,
                  "column": 4
                },
                "end": {
                  "line": 862,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.dynamicRedraw"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "x",
              "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 437,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "y",
              "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 448,
                  "column": 4
                },
                "end": {
                  "line": 451,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "is-multi-y",
              "description": "",
              "sourceRange": {
                "file": "px-vis-behavior-d3.html",
                "start": {
                  "line": 452,
                  "column": 4
                },
                "end": {
                  "line": 456,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "name": "radial",
              "description": "Boolean specifying if the chart is a polar chart or a cartesian chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 1872,
                  "column": 4
                },
                "end": {
                  "line": 1875,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.radial"
            },
            {
              "name": "drag-behavior",
              "description": "Holder for the drag behavior",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "width-changed",
              "description": "Fired when the `width` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "height-changed",
              "description": "Fired when the `height` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.baseSize"
            },
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "type": "CustomEvent",
              "name": "x-changed",
              "description": "Fired when the `x` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "y-changed",
              "description": "Fired when the `y` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorD3.axes"
            },
            {
              "type": "CustomEvent",
              "name": "drag-behavior-changed",
              "description": "Fired when the `dragBehavior` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehaviorDrag.basicProps"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.groupings\n\n    Description:\n    Polymer behavior that provides the groupings property for px-vis register items.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [
            {
              "name": "groupings",
              "type": "number",
              "description": "A holder for a line of the register",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "1"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.groupings",
          "attributes": [
            {
              "name": "groupings",
              "description": "A holder for a line of the register",
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.disableClick\n\n    Description:\n    Polymer behavior that provides the disableClick property for px-vis register items.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [
            {
              "name": "disableClick",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 46,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 1
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.disableClick",
          "attributes": [
            {
              "name": "disable-click",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 46,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.itemShared\n\n    Description:\n    Polymer behavior that provides the basic properties and methods for px-vis register items.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [
            {
              "name": "dynamicMenuConfig",
              "type": "Array",
              "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2038,
                  "column": 4
                },
                "end": {
                  "line": 2040,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "A holder for a line of the register",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_wrapperClass",
              "type": "string",
              "description": "Which flex classes get applied to make it side or top",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 4
                },
                "end": {
                  "line": 76,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_configName",
              "type": "string",
              "description": "The name of the item",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 83,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "nameKey",
              "type": "string",
              "description": "The key holdiong the name of the item in the config",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 87,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"name\""
            },
            {
              "name": "_truncatedName",
              "type": "string",
              "description": "the truncated name for the item",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 97,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_didTruncate",
              "type": "boolean",
              "description": "Whether truncation ran or not",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 101,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_baseClasses",
              "type": "string",
              "description": "Base classes for register item based on its type (vertical/horizontal)",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 4
                },
                "end": {
                  "line": 112,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "type",
              "type": "string",
              "description": "Defines if the register should be horizontal or vertical. Options are:\n - `vertical`\n - `horizontal`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 4
                },
                "end": {
                  "line": 123,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "\"vertical\""
            },
            {
              "name": "_mouseEnterHandler",
              "type": "Function",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_mouseLeaveHandler",
              "type": "Function",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 127,
                  "column": 4
                },
                "end": {
                  "line": 129,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_hasDynamicMenu",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 4
                },
                "end": {
                  "line": 133,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "attached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 2
                },
                "end": {
                  "line": 161,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 4
                },
                "end": {
                  "line": 165,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_getWrapperClass",
              "description": "Returns the correct flex type based on the register type",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 2
                },
                "end": {
                  "line": 182,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeConfigName",
              "description": "Returns the name of the item",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 2
                },
                "end": {
                  "line": 193,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeTruncatedName",
              "description": "returns the truncated name of the item",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 2
                },
                "end": {
                  "line": 203,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "_configName"
                }
              ]
            },
            {
              "name": "_computeDidTruncate",
              "description": "decide if series name was truncated. If so, add a tooltip showing full name",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 209,
                  "column": 2
                },
                "end": {
                  "line": 216,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "len"
                }
              ]
            },
            {
              "name": "_getConfigName",
              "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 221,
                  "column": 2
                },
                "end": {
                  "line": 230,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeBaseClasses",
              "description": "helper function to set initial classes",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 235,
                  "column": 2
                },
                "end": {
                  "line": 242,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_getDynamicMenuClass",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 243,
                  "column": 2
                },
                "end": {
                  "line": 252,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_menuConfigChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 254,
                  "column": 2
                },
                "end": {
                  "line": 260,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 261,
              "column": 65
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.itemShared",
          "attributes": [
            {
              "name": "dynamic-menu-config",
              "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 2038,
                  "column": 4
                },
                "end": {
                  "line": 2040,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
            },
            {
              "name": "item",
              "description": "A holder for a line of the register",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "name-key",
              "description": "The key holdiong the name of the item in the config",
              "sourceRange": {
                "start": {
                  "line": 87,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "type",
              "description": "Defines if the register should be horizontal or vertical. Options are:\n - `vertical`\n - `horizontal`",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 4
                },
                "end": {
                  "line": 123,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "type-changed",
              "description": "Fired when the `type` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.register\n\n    Description:\n    Polymer behavior that provides the basic properties and methods for px-vis register.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "_getSeriesWrapperClass",
              "description": "returns the correct classes for the series based on type",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 280,
                  "column": 2
                },
                "end": {
                  "line": 305,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                },
                {
                  "name": "hozAlign"
                },
                {
                  "name": "_hasScrollBar"
                }
              ]
            },
            {
              "name": "_getSeriesWrapperClassReverse",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 307,
                  "column": 2
                },
                "end": {
                  "line": 315,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_isOfType",
              "description": "tests if an item is of a type",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 320,
                  "column": 2
                },
                "end": {
                  "line": 322,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "toTest"
                },
                {
                  "name": "type"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 0
            },
            "end": {
              "line": 323,
              "column": 32
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.register",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.pie\n\n    Description:\n    Polymer behavior that provides the basic properties and methods for px-vis register.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [
            {
              "name": "usePercentage",
              "type": "boolean",
              "description": "For pie charts whether the values should be displayed in %",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 342,
                  "column": 4
                },
                "end": {
                  "line": 345,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 0
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.pie",
          "attributes": [
            {
              "name": "use-percentage",
              "description": "For pie charts whether the values should be displayed in %",
              "sourceRange": {
                "start": {
                  "line": 342,
                  "column": 4
                },
                "end": {
                  "line": 345,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.datetime\n\n    Description:\n    Polymer behavior that provides the basic properties and methods for px-vis register.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [
            {
              "name": "_firstDateTime",
              "type": "string",
              "description": "Holder for the formated first datetime string",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 370,
                  "column": 4
                },
                "end": {
                  "line": 373,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "_secondDateTime",
              "type": "string",
              "description": "Holder for the formated second datetime string",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 380,
                  "column": 4
                },
                "end": {
                  "line": 383,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "_separator",
              "type": "string",
              "description": "Holder for the formated separator character",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 390,
                  "column": 4
                },
                "end": {
                  "line": 393,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 0
            },
            "end": {
              "line": 395,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.datetime",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "    Name:\n    PxVisBehaviorRegister.generalItem\n\n    Description:\n    Polymer behavior that provides the muting properties.\n\n    Dependencies:\n    - none\n\n    ",
          "summary": "",
          "path": "px-vis-behavior-register.html",
          "properties": [
            {
              "name": "completeSeriesConfig",
              "type": "Object",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "mutedSeries",
              "type": "Object",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hardMute",
              "type": "boolean",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "_itemMutedToStart",
              "type": "string",
              "description": "Decides if the item should be muted",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 414,
                  "column": 4
                },
                "end": {
                  "line": 417,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_itemColor",
              "type": "string",
              "description": "calcates the color of the item",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 421,
                  "column": 4
                },
                "end": {
                  "line": 424,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "_dashPattern",
              "type": "string",
              "description": "calculates the dash pattern of the item",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 428,
                  "column": 4
                },
                "end": {
                  "line": 431,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "preventMuting",
              "type": "boolean",
              "description": "Prevents the mute on click behavior",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 435,
                  "column": 4
                },
                "end": {
                  "line": 438,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "hasUndefinedArguments",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 19,
                  "column": 2
                },
                "end": {
                  "line": 28,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ],
              "inheritedFrom": "PxVisBehavior.observerCheck"
            },
            {
              "name": "muteUnmuteSeries",
              "description": "Method to mute or umute",
              "privacy": "public",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 576,
                  "column": 2
                },
                "end": {
                  "line": 595,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "series"
                },
                {
                  "name": "fromRegister"
                }
              ],
              "inheritedFrom": "PxVisBehavior.muteUnmuteSeries"
            },
            {
              "name": "_computeItemMutedToStart",
              "description": "returns if the series should be muted to start",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 444,
                  "column": 2
                },
                "end": {
                  "line": 450,
                  "column": 3
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeItemColor",
              "description": "Function which takes an index and returns the appropriate dataVisColor\n\n`i` is a series index number\n\n`rgb(r,g,b)` return the appropriate rgb values based in the series index",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 463,
                  "column": 2
                },
                "end": {
                  "line": 469,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "rgb"
              }
            },
            {
              "name": "_computeItemDashPattern",
              "description": "Function which takes an index and returns the appropriate dash pattern\n\n`e.g. pattern = \"5,2\"` return the appropriate svg stroke-dasharray value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 479,
                  "column": 2
                },
                "end": {
                  "line": 487,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "pattern"
              }
            },
            {
              "name": "_mutedToStart",
              "description": "helper function to set initial classes\n\nAdds or removes muted class to those series in the register",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 496,
                  "column": 2
                },
                "end": {
                  "line": 502,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                }
              ]
            },
            {
              "name": "_seriesClicked",
              "description": "Event function which is fired when a series is clicked.\n\nAdds series to mutedSeries property or toggles that key's boolean.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 512,
                  "column": 2
                },
                "end": {
                  "line": 530,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_toggleSeries",
              "description": "observer function which is fired when the mutedSeries property is changed.\n\nAdds or removes muted class to those series in the register.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 539,
                  "column": 2
                },
                "end": {
                  "line": 547,
                  "column": 3
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 0
            },
            "end": {
              "line": 548,
              "column": 64
            }
          },
          "privacy": "public",
          "name": "PxVisBehaviorRegister.generalItem",
          "attributes": [
            {
              "name": "complete-series-config",
              "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 384,
                  "column": 7
                },
                "end": {
                  "line": 387,
                  "column": 8
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "name": "muted-series",
              "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 446,
                  "column": 4
                },
                "end": {
                  "line": 450,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "hard-mute",
              "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
              "sourceRange": {
                "file": "px-vis-behavior-common.html",
                "start": {
                  "line": 457,
                  "column": 5
                },
                "end": {
                  "line": 460,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            },
            {
              "name": "prevent-muting",
              "description": "Prevents the mute on click behavior",
              "sourceRange": {
                "start": {
                  "line": 435,
                  "column": 4
                },
                "end": {
                  "line": 438,
                  "column": 5
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "complete-series-config-changed",
              "description": "Fired when the `completeSeriesConfig` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
            },
            {
              "type": "CustomEvent",
              "name": "muted-series-changed",
              "description": "Fired when the `mutedSeries` property changes.",
              "metadata": {},
              "inheritedFrom": "PxVisBehavior.mutedSeries"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}
